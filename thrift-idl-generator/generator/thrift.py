
class TDoc(object):
    def __init__(self, name,):
        self.name = name
        self.namespaces = []
        self.enums = []
        self.structs = []
    def namespace(self, lang, namespace):
        self.namespaces.append((lang, namespace))

    def enum(self, e):
        self.enums.append(e)

    def struct(self, s):
        self.structs.append(s)

    def pp(self):
        return ( "/* This thrift file has been autogenerated */\n\n" 
               + "\n".join([("namespace " + lang + " " + ns) for (lang, ns) in
                    self.namespaces ])
               + "\n\n/* enums: */\n"
               + "\n".join([e.pp() for e in self.enums ])
               + "\n\n/* structs: */\n"
               + "\n".join([s.pp() for s in self.structs ])
               )

class TEnumEntry(object):
    def __init__(self, name):
        self.name = name
    def pp(self):
        return self.name.upper()

class TEnumEntryValue(object):
    def __init__(self, name, value):
        self.name = name
        self.value = value
    def pp(self):
        return ("%s = %d" % (self.name.upper(), self.value))

class TEnum(object):
    def __init__(self, title):
        self.title = title
        self.values = []

    def entry(self, name, value=None):
        if value == None:
            self.values.append(TEnumEntry(name))
        else:
            self.values.append(TEnumEntryValue(name,value))

    def pp(self):
        body = (",\n  ").join([ v.pp() for v in self.values ])
        return ("enum " + self.title + " {\n  " + body + "\n}\n")

