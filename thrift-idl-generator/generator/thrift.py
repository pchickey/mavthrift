
class TDoc(object):
    def __init__(self, name,):
        self.name = name
        self.namespaces = []
        self.enums = []
        self.structs = []
    def namespace(self, lang, namespace):
        self.namespaces.append((lang, namespace))

    def enum(self, e):
        self.enums.append(e)

    def struct(self, s):
        self.structs.append(s)

    def pp(self):
        s = "/* This thrift file has been autogenerated */\n\n" 
        if len(self.namespaces) > 0:
            s += "\n".join([("namespace " + lang + " " + ns) for (lang, ns) in
                    self.namespaces ])

        s += "\n\n/* enums: */\n"
        if len(self.enums) > 0:
            s += "\n".join([e.pp() for e in self.enums ])

        s += "\n\n/* structs: */\n"
        if len(self.structs) > 0:
            s += "\n".join([s.pp() for s in self.structs ])
        return s

class TEnumEntry(object):
    def __init__(self, name):
        self.name = name
    def pp(self):
        return self.name.upper()

class TEnumEntryValue(object):
    def __init__(self, name, value):
        self.name = name
        self.value = value
    def pp(self):
        return ("%s = %d" % (self.name.upper(), self.value))

class TEnum(object):
    def __init__(self, title):
        self.title = title
        self.values = []

    def entry(self, name, value=None):
        if value == None:
            self.values.append(TEnumEntry(name))
        else:
            self.values.append(TEnumEntryValue(name,value))

    def pp(self):
        body = (",\n  ").join([ v.pp() for v in self.values ])
        return ("enum %s {\n  %s\n}\n" % (self.title, body))

class TAtomField(object):
    def __init__(self,index, name, fieldtype):
        self.index = index
        self.name = name
        self.fieldtype = fieldtype
    def pp(self):
        return ("%d: %s %s" % (self.index, self.fieldtype, self.name))

class TListField(object):
    def __init__(self, index, name, fieldtype):
        self.index = index
        self.name = name
        self.fieldtype = fieldtype
    def pp(self):
        return ("%d: list<%s> %s" % (self.index, self.fieldtype, self.name))

class TStruct(object):
    def __init__(self, typename):
        self.typename = typename
        self.fieldindex = 0
        self.fields = []
    def atom_field(self, name, fieldtype):
        idx = self.fieldindex + 1
        self.fieldindex = idx
        self.fields.append(TAtomField(idx, name, fieldtype))
    def list_field(self, name, fieldtype):
        idx = self.fieldindex + 1
        self.fieldindex = idx
        self.fields.append(TListField(idx, name, fieldtype))
    def pp(self):
        body = (",\n  ").join([ f.pp() for f in self.fields ])
        return ("struct %s {\n  %s\n}\n" % (self.typename, body))

