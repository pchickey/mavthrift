/* This thrift file has been autogenerated */

namespace cpp mavlink.thrift

/* enums: */
enum CommonMessageTypes {
  HEARTBEAT,
  SYS_STATUS,
  SYSTEM_TIME,
  PING,
  CHANGE_OPERATOR_CONTROL,
  CHANGE_OPERATOR_CONTROL_ACK,
  AUTH_KEY,
  SET_MODE,
  PARAM_REQUEST_READ,
  PARAM_REQUEST_LIST,
  PARAM_VALUE,
  PARAM_SET,
  GPS_RAW_INT,
  GPS_STATUS,
  SCALED_IMU,
  RAW_IMU,
  RAW_PRESSURE,
  SCALED_PRESSURE,
  ATTITUDE,
  ATTITUDE_QUATERNION,
  LOCAL_POSITION_NED,
  GLOBAL_POSITION_INT,
  RC_CHANNELS_SCALED,
  RC_CHANNELS_RAW,
  SERVO_OUTPUT_RAW,
  MISSION_REQUEST_PARTIAL_LIST,
  MISSION_WRITE_PARTIAL_LIST,
  MISSION_ITEM,
  MISSION_REQUEST,
  MISSION_SET_CURRENT,
  MISSION_CURRENT,
  MISSION_REQUEST_LIST,
  MISSION_COUNT,
  MISSION_CLEAR_ALL,
  MISSION_ITEM_REACHED,
  MISSION_ACK,
  SET_GPS_GLOBAL_ORIGIN,
  GPS_GLOBAL_ORIGIN,
  SET_LOCAL_POSITION_SETPOINT,
  LOCAL_POSITION_SETPOINT,
  GLOBAL_POSITION_SETPOINT_INT,
  SET_GLOBAL_POSITION_SETPOINT_INT,
  SAFETY_SET_ALLOWED_AREA,
  SAFETY_ALLOWED_AREA,
  SET_ROLL_PITCH_YAW_THRUST,
  SET_ROLL_PITCH_YAW_SPEED_THRUST,
  ROLL_PITCH_YAW_THRUST_SETPOINT,
  ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT,
  SET_QUAD_MOTORS_SETPOINT,
  SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST,
  NAV_CONTROLLER_OUTPUT,
  SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST,
  STATE_CORRECTION,
  REQUEST_DATA_STREAM,
  DATA_STREAM,
  MANUAL_CONTROL,
  RC_CHANNELS_OVERRIDE,
  VFR_HUD,
  COMMAND_LONG,
  COMMAND_ACK,
  ROLL_PITCH_YAW_RATES_THRUST_SETPOINT,
  MANUAL_SETPOINT,
  LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET,
  HIL_STATE,
  HIL_CONTROLS,
  HIL_RC_INPUTS_RAW,
  OPTICAL_FLOW,
  GLOBAL_VISION_POSITION_ESTIMATE,
  VISION_POSITION_ESTIMATE,
  VISION_SPEED_ESTIMATE,
  VICON_POSITION_ESTIMATE,
  HIGHRES_IMU,
  OMNIDIRECTIONAL_FLOW,
  FILE_TRANSFER_START,
  FILE_TRANSFER_DIR_LIST,
  FILE_TRANSFER_RES,
  BATTERY_STATUS,
  SETPOINT_8DOF,
  SETPOINT_6DOF,
  MEMORY_VECT,
  DEBUG_VECT,
  NAMED_VALUE_FLOAT,
  NAMED_VALUE_INT,
  STATUSTEXT,
  DEBUG
}

enum Autopilot {
  GENERIC = 0,
  PIXHAWK = 1,
  SLUGS = 2,
  ARDUPILOTMEGA = 3,
  OPENPILOT = 4,
  GENERIC_WAYPOINTS_ONLY = 5,
  GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6,
  GENERIC_MISSION_FULL = 7,
  INVALID = 8,
  PPZ = 9,
  UDB = 10,
  FP = 11,
  PX4 = 12,
  SMACCMPILOT = 13
}

enum Type {
  GENERIC = 0,
  FIXED_WING = 1,
  QUADROTOR = 2,
  COAXIAL = 3,
  HELICOPTER = 4,
  ANTENNA_TRACKER = 5,
  GCS = 6,
  AIRSHIP = 7,
  FREE_BALLOON = 8,
  ROCKET = 9,
  GROUND_ROVER = 10,
  SURFACE_BOAT = 11,
  SUBMARINE = 12,
  HEXAROTOR = 13,
  OCTOROTOR = 14,
  TRICOPTER = 15,
  FLAPPING_WING = 16,
  KITE = 17
}

enum Mode_flag {
  CUSTOM_MODE_ENABLED = 1,
  TEST_ENABLED = 2,
  AUTO_ENABLED = 4,
  GUIDED_ENABLED = 8,
  STABILIZE_ENABLED = 16,
  HIL_ENABLED = 32,
  MANUAL_INPUT_ENABLED = 64,
  SAFETY_ARMED = 128
}

enum Mode_flag_decode_position {
  CUSTOM_MODE = 1,
  TEST = 2,
  AUTO = 4,
  GUIDED = 8,
  STABILIZE = 16,
  HIL = 32,
  MANUAL = 64,
  SAFETY = 128
}

enum Goto {
  DO_HOLD = 0,
  DO_CONTINUE = 1,
  HOLD_AT_CURRENT_POSITION = 2,
  HOLD_AT_SPECIFIED_POSITION = 3
}

enum Mode {
  PREFLIGHT = 0,
  MANUAL_DISARMED = 64,
  TEST_DISARMED = 66,
  STABILIZE_DISARMED = 80,
  GUIDED_DISARMED = 88,
  AUTO_DISARMED = 92,
  MANUAL_ARMED = 192,
  TEST_ARMED = 194,
  STABILIZE_ARMED = 208,
  GUIDED_ARMED = 216,
  AUTO_ARMED = 220
}

enum State {
  UNINIT = 0,
  BOOT = 1,
  CALIBRATING = 2,
  STANDBY = 3,
  ACTIVE = 4,
  CRITICAL = 5,
  EMERGENCY = 6,
  POWEROFF = 7
}

enum Component {
  ALL = 0,
  CAMERA = 100,
  SERVO1 = 140,
  SERVO2 = 141,
  SERVO3 = 142,
  SERVO4 = 143,
  SERVO5 = 144,
  SERVO6 = 145,
  SERVO7 = 146,
  SERVO8 = 147,
  SERVO9 = 148,
  SERVO10 = 149,
  SERVO11 = 150,
  SERVO12 = 151,
  SERVO13 = 152,
  SERVO14 = 153,
  MAPPER = 180,
  MISSIONPLANNER = 190,
  PATHPLANNER = 195,
  IMU = 200,
  IMU_2 = 201,
  IMU_3 = 202,
  GPS = 220,
  UDP_BRIDGE = 240,
  UART_BRIDGE = 241,
  SYSTEM_CONTROL = 250,
  MAV_COMPONENT_ENUM_END = 251
}

enum Frame {
  GLOBAL = 0,
  LOCAL_NED = 1,
  MISSION = 2,
  GLOBAL_RELATIVE_ALT = 3,
  LOCAL_ENU = 4
}

enum Data_stream_type {
  IMG_JPEG = 1,
  IMG_BMP = 2,
  IMG_RAW8U = 3,
  IMG_RAW32U = 4,
  IMG_PGM = 5,
  IMG_PNG = 6,
  TYPE_ENUM_END = 7
}

enum Data_stream {
  ALL = 0,
  RAW_SENSORS = 1,
  EXTENDED_STATUS = 2,
  RC_CHANNELS = 3,
  RAW_CONTROLLER = 4,
  POSITION = 6,
  EXTRA1 = 10,
  EXTRA2 = 11,
  EXTRA3 = 12
}

enum Roi {
  NONE = 0,
  WPNEXT = 1,
  WPINDEX = 2,
  LOCATION = 3,
  TARGET = 4
}

enum Cmd_ack {
  OK = 1,
  ERR_FAIL = 2,
  ERR_ACCESS_DENIED = 3,
  ERR_NOT_SUPPORTED = 4,
  ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5,
  ERR_COORDINATES_OUT_OF_RANGE = 6,
  ERR_X_LAT_OUT_OF_RANGE = 7,
  ERR_Y_LON_OUT_OF_RANGE = 8,
  ERR_Z_ALT_OUT_OF_RANGE = 9
}

enum Param_type {
  UINT8 = 1,
  INT8 = 2,
  UINT16 = 3,
  INT16 = 4,
  UINT32 = 5,
  INT32 = 6,
  UINT64 = 7,
  INT64 = 8,
  REAL32 = 9,
  REAL64 = 10
}

enum Result {
  ACCEPTED = 0,
  TEMPORARILY_REJECTED = 1,
  DENIED = 2,
  UNSUPPORTED = 3,
  FAILED = 4
}

enum Mission_result {
  ACCEPTED = 0,
  ERROR = 1,
  UNSUPPORTED_FRAME = 2,
  UNSUPPORTED = 3,
  NO_SPACE = 4,
  INVALID = 5,
  INVALID_PARAM1 = 6,
  INVALID_PARAM2 = 7,
  INVALID_PARAM3 = 8,
  INVALID_PARAM4 = 9,
  INVALID_PARAM5_X = 10,
  INVALID_PARAM6_Y = 11,
  INVALID_PARAM7 = 12,
  INVALID_SEQUENCE = 13,
  DENIED = 14,
  RESULT_ENUM_END = 15
}

enum Severity {
  EMERGENCY = 0,
  ALERT = 1,
  CRITICAL = 2,
  ERROR = 3,
  WARNING = 4,
  NOTICE = 5,
  INFO = 6,
  DEBUG = 7
}


/* structs: */
struct Heartbeat {
  1: byte mavtype,
  2: byte autopilot,
  3: byte base_mode,
  4: i32 custom_mode,
  5: byte system_status,
  6: byte mavlink_version
}

struct SysStatus {
  1: i32 onboard_control_sensors_present,
  2: i32 onboard_control_sensors_enabled,
  3: i32 onboard_control_sensors_health,
  4: i16 load,
  5: i16 voltage_battery,
  6: i16 current_battery,
  7: byte battery_remaining,
  8: i16 drop_rate_comm,
  9: i16 errors_comm,
  10: i16 errors_count1,
  11: i16 errors_count2,
  12: i16 errors_count3,
  13: i16 errors_count4
}

struct SystemTime {
  1: i64 time_unix_usec,
  2: i32 time_boot_ms
}

struct Ping {
  1: i64 time_usec,
  2: i32 seq,
  3: byte target_system,
  4: byte target_component
}

struct ChangeOperatorControl {
  1: byte target_system,
  2: byte control_request,
  3: byte version,
  4: list<byte> passkey
}

struct ChangeOperatorControlAck {
  1: byte gcs_system_id,
  2: byte control_request,
  3: byte ack
}

struct AuthKey {
  1: list<byte> key
}

struct SetMode {
  1: byte target_system,
  2: byte base_mode,
  3: i32 custom_mode
}

struct ParamRequestRead {
  1: byte target_system,
  2: byte target_component,
  3: list<byte> param_id,
  4: i16 param_index
}

struct ParamRequestList {
  1: byte target_system,
  2: byte target_component
}

struct ParamValue {
  1: list<byte> param_id,
  2: double param_value,
  3: byte param_type,
  4: i16 param_count,
  5: i16 param_index
}

struct ParamSet {
  1: byte target_system,
  2: byte target_component,
  3: list<byte> param_id,
  4: double param_value,
  5: byte param_type
}

struct GpsRawInt {
  1: i64 time_usec,
  2: byte fix_type,
  3: i32 lat,
  4: i32 lon,
  5: i32 alt,
  6: i16 eph,
  7: i16 epv,
  8: i16 vel,
  9: i16 cog,
  10: byte satellites_visible
}

struct GpsStatus {
  1: byte satellites_visible,
  2: list<byte> satellite_prn,
  3: list<byte> satellite_used,
  4: list<byte> satellite_elevation,
  5: list<byte> satellite_azimuth,
  6: list<byte> satellite_snr
}

struct ScaledImu {
  1: i32 time_boot_ms,
  2: i16 xacc,
  3: i16 yacc,
  4: i16 zacc,
  5: i16 xgyro,
  6: i16 ygyro,
  7: i16 zgyro,
  8: i16 xmag,
  9: i16 ymag,
  10: i16 zmag
}

struct RawImu {
  1: i64 time_usec,
  2: i16 xacc,
  3: i16 yacc,
  4: i16 zacc,
  5: i16 xgyro,
  6: i16 ygyro,
  7: i16 zgyro,
  8: i16 xmag,
  9: i16 ymag,
  10: i16 zmag
}

struct RawPressure {
  1: i64 time_usec,
  2: i16 press_abs,
  3: i16 press_diff1,
  4: i16 press_diff2,
  5: i16 temperature
}

struct ScaledPressure {
  1: i32 time_boot_ms,
  2: double press_abs,
  3: double press_diff,
  4: i16 temperature
}

struct Attitude {
  1: i32 time_boot_ms,
  2: double roll,
  3: double pitch,
  4: double yaw,
  5: double rollspeed,
  6: double pitchspeed,
  7: double yawspeed
}

struct AttitudeQuaternion {
  1: i32 time_boot_ms,
  2: double q1,
  3: double q2,
  4: double q3,
  5: double q4,
  6: double rollspeed,
  7: double pitchspeed,
  8: double yawspeed
}

struct LocalPositionNed {
  1: i32 time_boot_ms,
  2: double x,
  3: double y,
  4: double z,
  5: double vx,
  6: double vy,
  7: double vz
}

struct GlobalPositionInt {
  1: i32 time_boot_ms,
  2: i32 lat,
  3: i32 lon,
  4: i32 alt,
  5: i32 relative_alt,
  6: i16 vx,
  7: i16 vy,
  8: i16 vz,
  9: i16 hdg
}

struct RcChannelsScaled {
  1: i32 time_boot_ms,
  2: byte port,
  3: i16 chan1_scaled,
  4: i16 chan2_scaled,
  5: i16 chan3_scaled,
  6: i16 chan4_scaled,
  7: i16 chan5_scaled,
  8: i16 chan6_scaled,
  9: i16 chan7_scaled,
  10: i16 chan8_scaled,
  11: byte rssi
}

struct RcChannelsRaw {
  1: i32 time_boot_ms,
  2: byte port,
  3: i16 chan1_raw,
  4: i16 chan2_raw,
  5: i16 chan3_raw,
  6: i16 chan4_raw,
  7: i16 chan5_raw,
  8: i16 chan6_raw,
  9: i16 chan7_raw,
  10: i16 chan8_raw,
  11: byte rssi
}

struct ServoOutputRaw {
  1: i32 time_usec,
  2: byte port,
  3: i16 servo1_raw,
  4: i16 servo2_raw,
  5: i16 servo3_raw,
  6: i16 servo4_raw,
  7: i16 servo5_raw,
  8: i16 servo6_raw,
  9: i16 servo7_raw,
  10: i16 servo8_raw
}

struct MissionRequestPartialList {
  1: byte target_system,
  2: byte target_component,
  3: i16 start_index,
  4: i16 end_index
}

struct MissionWritePartialList {
  1: byte target_system,
  2: byte target_component,
  3: i16 start_index,
  4: i16 end_index
}

struct MissionItem {
  1: byte target_system,
  2: byte target_component,
  3: i16 seq,
  4: byte frame,
  5: i16 command,
  6: byte current,
  7: byte autocontinue,
  8: double param1,
  9: double param2,
  10: double param3,
  11: double param4,
  12: double x,
  13: double y,
  14: double z
}

struct MissionRequest {
  1: byte target_system,
  2: byte target_component,
  3: i16 seq
}

struct MissionSetCurrent {
  1: byte target_system,
  2: byte target_component,
  3: i16 seq
}

struct MissionCurrent {
  1: i16 seq
}

struct MissionRequestList {
  1: byte target_system,
  2: byte target_component
}

struct MissionCount {
  1: byte target_system,
  2: byte target_component,
  3: i16 count
}

struct MissionClearAll {
  1: byte target_system,
  2: byte target_component
}

struct MissionItemReached {
  1: i16 seq
}

struct MissionAck {
  1: byte target_system,
  2: byte target_component,
  3: byte mission_ack_type
}

struct SetGpsGlobalOrigin {
  1: byte target_system,
  2: i32 latitude,
  3: i32 longitude,
  4: i32 altitude
}

struct GpsGlobalOrigin {
  1: i32 latitude,
  2: i32 longitude,
  3: i32 altitude
}

struct SetLocalPositionSetpoint {
  1: byte target_system,
  2: byte target_component,
  3: byte coordinate_frame,
  4: double x,
  5: double y,
  6: double z,
  7: double yaw
}

struct LocalPositionSetpoint {
  1: byte coordinate_frame,
  2: double x,
  3: double y,
  4: double z,
  5: double yaw
}

struct GlobalPositionSetpointInt {
  1: byte coordinate_frame,
  2: i32 latitude,
  3: i32 longitude,
  4: i32 altitude,
  5: i16 yaw
}

struct SetGlobalPositionSetpointInt {
  1: byte coordinate_frame,
  2: i32 latitude,
  3: i32 longitude,
  4: i32 altitude,
  5: i16 yaw
}

struct SafetySetAllowedArea {
  1: byte target_system,
  2: byte target_component,
  3: byte frame,
  4: double p1x,
  5: double p1y,
  6: double p1z,
  7: double p2x,
  8: double p2y,
  9: double p2z
}

struct SafetyAllowedArea {
  1: byte frame,
  2: double p1x,
  3: double p1y,
  4: double p1z,
  5: double p2x,
  6: double p2y,
  7: double p2z
}

struct SetRollPitchYawThrust {
  1: byte target_system,
  2: byte target_component,
  3: double roll,
  4: double pitch,
  5: double yaw,
  6: double thrust
}

struct SetRollPitchYawSpeedThrust {
  1: byte target_system,
  2: byte target_component,
  3: double roll_speed,
  4: double pitch_speed,
  5: double yaw_speed,
  6: double thrust
}

struct RollPitchYawThrustSetpoint {
  1: i32 time_boot_ms,
  2: double roll,
  3: double pitch,
  4: double yaw,
  5: double thrust
}

struct RollPitchYawSpeedThrustSetpoint {
  1: i32 time_boot_ms,
  2: double roll_speed,
  3: double pitch_speed,
  4: double yaw_speed,
  5: double thrust
}

struct SetQuadMotorsSetpoint {
  1: byte target_system,
  2: i16 motor_front_nw,
  3: i16 motor_right_ne,
  4: i16 motor_back_se,
  5: i16 motor_left_sw
}

struct SetQuadSwarmRollPitchYawThrust {
  1: byte group,
  2: byte mode,
  3: list<i16> roll,
  4: list<i16> pitch,
  5: list<i16> yaw,
  6: list<i16> thrust
}

struct NavControllerOutput {
  1: double nav_roll,
  2: double nav_pitch,
  3: i16 nav_bearing,
  4: i16 target_bearing,
  5: i16 wp_dist,
  6: double alt_error,
  7: double aspd_error,
  8: double xtrack_error
}

struct SetQuadSwarmLedRollPitchYawThrust {
  1: byte group,
  2: byte mode,
  3: list<byte> led_red,
  4: list<byte> led_blue,
  5: list<byte> led_green,
  6: list<i16> roll,
  7: list<i16> pitch,
  8: list<i16> yaw,
  9: list<i16> thrust
}

struct StateCorrection {
  1: double xErr,
  2: double yErr,
  3: double zErr,
  4: double rollErr,
  5: double pitchErr,
  6: double yawErr,
  7: double vxErr,
  8: double vyErr,
  9: double vzErr
}

struct RequestDataStream {
  1: byte target_system,
  2: byte target_component,
  3: byte req_stream_id,
  4: i16 req_message_rate,
  5: byte start_stop
}

struct DataStream {
  1: byte stream_id,
  2: i16 message_rate,
  3: byte on_off
}

struct ManualControl {
  1: byte target,
  2: i16 x,
  3: i16 y,
  4: i16 z,
  5: i16 r,
  6: i16 buttons
}

struct RcChannelsOverride {
  1: byte target_system,
  2: byte target_component,
  3: i16 chan1_raw,
  4: i16 chan2_raw,
  5: i16 chan3_raw,
  6: i16 chan4_raw,
  7: i16 chan5_raw,
  8: i16 chan6_raw,
  9: i16 chan7_raw,
  10: i16 chan8_raw
}

struct VfrHud {
  1: double airspeed,
  2: double groundspeed,
  3: i16 heading,
  4: i16 throttle,
  5: double alt,
  6: double climb
}

struct CommandLong {
  1: byte target_system,
  2: byte target_component,
  3: i16 command,
  4: byte confirmation,
  5: double param1,
  6: double param2,
  7: double param3,
  8: double param4,
  9: double param5,
  10: double param6,
  11: double param7
}

struct CommandAck {
  1: i16 command,
  2: byte result
}

struct RollPitchYawRatesThrustSetpoint {
  1: i32 time_boot_ms,
  2: double roll_rate,
  3: double pitch_rate,
  4: double yaw_rate,
  5: double thrust
}

struct ManualSetpoint {
  1: i32 time_boot_ms,
  2: double roll,
  3: double pitch,
  4: double yaw,
  5: double thrust,
  6: byte mode_switch,
  7: byte manual_override_switch
}

struct LocalPositionNedSystemGlobalOffset {
  1: i32 time_boot_ms,
  2: double x,
  3: double y,
  4: double z,
  5: double roll,
  6: double pitch,
  7: double yaw
}

struct HilState {
  1: i64 time_usec,
  2: double roll,
  3: double pitch,
  4: double yaw,
  5: double rollspeed,
  6: double pitchspeed,
  7: double yawspeed,
  8: i32 lat,
  9: i32 lon,
  10: i32 alt,
  11: i16 vx,
  12: i16 vy,
  13: i16 vz,
  14: i16 xacc,
  15: i16 yacc,
  16: i16 zacc
}

struct HilControls {
  1: i64 time_usec,
  2: double roll_ailerons,
  3: double pitch_elevator,
  4: double yaw_rudder,
  5: double throttle,
  6: double aux1,
  7: double aux2,
  8: double aux3,
  9: double aux4,
  10: byte mode,
  11: byte nav_mode
}

struct HilRcInputsRaw {
  1: i64 time_usec,
  2: i16 chan1_raw,
  3: i16 chan2_raw,
  4: i16 chan3_raw,
  5: i16 chan4_raw,
  6: i16 chan5_raw,
  7: i16 chan6_raw,
  8: i16 chan7_raw,
  9: i16 chan8_raw,
  10: i16 chan9_raw,
  11: i16 chan10_raw,
  12: i16 chan11_raw,
  13: i16 chan12_raw,
  14: byte rssi
}

struct OpticalFlow {
  1: i64 time_usec,
  2: byte sensor_id,
  3: i16 flow_x,
  4: i16 flow_y,
  5: double flow_comp_m_x,
  6: double flow_comp_m_y,
  7: byte quality,
  8: double ground_distance
}

struct GlobalVisionPositionEstimate {
  1: i64 usec,
  2: double x,
  3: double y,
  4: double z,
  5: double roll,
  6: double pitch,
  7: double yaw
}

struct VisionPositionEstimate {
  1: i64 usec,
  2: double x,
  3: double y,
  4: double z,
  5: double roll,
  6: double pitch,
  7: double yaw
}

struct VisionSpeedEstimate {
  1: i64 usec,
  2: double x,
  3: double y,
  4: double z
}

struct ViconPositionEstimate {
  1: i64 usec,
  2: double x,
  3: double y,
  4: double z,
  5: double roll,
  6: double pitch,
  7: double yaw
}

struct HighresImu {
  1: i64 time_usec,
  2: double xacc,
  3: double yacc,
  4: double zacc,
  5: double xgyro,
  6: double ygyro,
  7: double zgyro,
  8: double xmag,
  9: double ymag,
  10: double zmag,
  11: double abs_pressure,
  12: double diff_pressure,
  13: double pressure_alt,
  14: double temperature,
  15: i16 fields_updated
}

struct OmnidirectionalFlow {
  1: i64 time_usec,
  2: byte sensor_id,
  3: list<i16> left,
  4: list<i16> right,
  5: byte quality,
  6: double front_distance_m
}

struct FileTransferStart {
  1: i64 transfer_uid,
  2: list<byte> dest_path,
  3: byte direction,
  4: i32 file_size,
  5: byte flags
}

struct FileTransferDirList {
  1: i64 transfer_uid,
  2: list<byte> dir_path,
  3: byte flags
}

struct FileTransferRes {
  1: i64 transfer_uid,
  2: byte result
}

struct BatteryStatus {
  1: byte accu_id,
  2: i16 voltage_cell_1,
  3: i16 voltage_cell_2,
  4: i16 voltage_cell_3,
  5: i16 voltage_cell_4,
  6: i16 voltage_cell_5,
  7: i16 voltage_cell_6,
  8: i16 current_battery,
  9: byte battery_remaining
}

struct Setpoint8dof {
  1: byte target_system,
  2: double val1,
  3: double val2,
  4: double val3,
  5: double val4,
  6: double val5,
  7: double val6,
  8: double val7,
  9: double val8
}

struct Setpoint6dof {
  1: byte target_system,
  2: double trans_x,
  3: double trans_y,
  4: double trans_z,
  5: double rot_x,
  6: double rot_y,
  7: double rot_z
}

struct MemoryVect {
  1: i16 address,
  2: byte ver,
  3: byte memory_vect_type,
  4: list<byte> value
}

struct DebugVect {
  1: list<byte> name,
  2: i64 time_usec,
  3: double x,
  4: double y,
  5: double z
}

struct NamedValueFloat {
  1: i32 time_boot_ms,
  2: list<byte> name,
  3: double value
}

struct NamedValueInt {
  1: i32 time_boot_ms,
  2: list<byte> name,
  3: i32 value
}

struct Statustext {
  1: byte severity,
  2: list<byte> text
}

struct Debug {
  1: i32 time_boot_ms,
  2: byte ind,
  3: double value
}


/* exceptions : */
exception InvalidMavlinkMessage {
  1: string error
}


/* services: */
service CommonMessagePost {
  void postHeartbeat(1: Heartbeat msg) throws (1: InvalidMavlinkMessage err),
  void postSysStatus(1: SysStatus msg) throws (1: InvalidMavlinkMessage err),
  void postSystemTime(1: SystemTime msg) throws (1: InvalidMavlinkMessage err),
  void postPing(1: Ping msg) throws (1: InvalidMavlinkMessage err),
  void postChangeOperatorControl(1: ChangeOperatorControl msg) throws (1: InvalidMavlinkMessage err),
  void postChangeOperatorControlAck(1: ChangeOperatorControlAck msg) throws (1: InvalidMavlinkMessage err),
  void postAuthKey(1: AuthKey msg) throws (1: InvalidMavlinkMessage err),
  void postSetMode(1: SetMode msg) throws (1: InvalidMavlinkMessage err),
  void postParamRequestRead(1: ParamRequestRead msg) throws (1: InvalidMavlinkMessage err),
  void postParamRequestList(1: ParamRequestList msg) throws (1: InvalidMavlinkMessage err),
  void postParamValue(1: ParamValue msg) throws (1: InvalidMavlinkMessage err),
  void postParamSet(1: ParamSet msg) throws (1: InvalidMavlinkMessage err),
  void postGpsRawInt(1: GpsRawInt msg) throws (1: InvalidMavlinkMessage err),
  void postGpsStatus(1: GpsStatus msg) throws (1: InvalidMavlinkMessage err),
  void postScaledImu(1: ScaledImu msg) throws (1: InvalidMavlinkMessage err),
  void postRawImu(1: RawImu msg) throws (1: InvalidMavlinkMessage err),
  void postRawPressure(1: RawPressure msg) throws (1: InvalidMavlinkMessage err),
  void postScaledPressure(1: ScaledPressure msg) throws (1: InvalidMavlinkMessage err),
  void postAttitude(1: Attitude msg) throws (1: InvalidMavlinkMessage err),
  void postAttitudeQuaternion(1: AttitudeQuaternion msg) throws (1: InvalidMavlinkMessage err),
  void postLocalPositionNed(1: LocalPositionNed msg) throws (1: InvalidMavlinkMessage err),
  void postGlobalPositionInt(1: GlobalPositionInt msg) throws (1: InvalidMavlinkMessage err),
  void postRcChannelsScaled(1: RcChannelsScaled msg) throws (1: InvalidMavlinkMessage err),
  void postRcChannelsRaw(1: RcChannelsRaw msg) throws (1: InvalidMavlinkMessage err),
  void postServoOutputRaw(1: ServoOutputRaw msg) throws (1: InvalidMavlinkMessage err),
  void postMissionRequestPartialList(1: MissionRequestPartialList msg) throws (1: InvalidMavlinkMessage err),
  void postMissionWritePartialList(1: MissionWritePartialList msg) throws (1: InvalidMavlinkMessage err),
  void postMissionItem(1: MissionItem msg) throws (1: InvalidMavlinkMessage err),
  void postMissionRequest(1: MissionRequest msg) throws (1: InvalidMavlinkMessage err),
  void postMissionSetCurrent(1: MissionSetCurrent msg) throws (1: InvalidMavlinkMessage err),
  void postMissionCurrent(1: MissionCurrent msg) throws (1: InvalidMavlinkMessage err),
  void postMissionRequestList(1: MissionRequestList msg) throws (1: InvalidMavlinkMessage err),
  void postMissionCount(1: MissionCount msg) throws (1: InvalidMavlinkMessage err),
  void postMissionClearAll(1: MissionClearAll msg) throws (1: InvalidMavlinkMessage err),
  void postMissionItemReached(1: MissionItemReached msg) throws (1: InvalidMavlinkMessage err),
  void postMissionAck(1: MissionAck msg) throws (1: InvalidMavlinkMessage err),
  void postSetGpsGlobalOrigin(1: SetGpsGlobalOrigin msg) throws (1: InvalidMavlinkMessage err),
  void postGpsGlobalOrigin(1: GpsGlobalOrigin msg) throws (1: InvalidMavlinkMessage err),
  void postSetLocalPositionSetpoint(1: SetLocalPositionSetpoint msg) throws (1: InvalidMavlinkMessage err),
  void postLocalPositionSetpoint(1: LocalPositionSetpoint msg) throws (1: InvalidMavlinkMessage err),
  void postGlobalPositionSetpointInt(1: GlobalPositionSetpointInt msg) throws (1: InvalidMavlinkMessage err),
  void postSetGlobalPositionSetpointInt(1: SetGlobalPositionSetpointInt msg) throws (1: InvalidMavlinkMessage err),
  void postSafetySetAllowedArea(1: SafetySetAllowedArea msg) throws (1: InvalidMavlinkMessage err),
  void postSafetyAllowedArea(1: SafetyAllowedArea msg) throws (1: InvalidMavlinkMessage err),
  void postSetRollPitchYawThrust(1: SetRollPitchYawThrust msg) throws (1: InvalidMavlinkMessage err),
  void postSetRollPitchYawSpeedThrust(1: SetRollPitchYawSpeedThrust msg) throws (1: InvalidMavlinkMessage err),
  void postRollPitchYawThrustSetpoint(1: RollPitchYawThrustSetpoint msg) throws (1: InvalidMavlinkMessage err),
  void postRollPitchYawSpeedThrustSetpoint(1: RollPitchYawSpeedThrustSetpoint msg) throws (1: InvalidMavlinkMessage err),
  void postSetQuadMotorsSetpoint(1: SetQuadMotorsSetpoint msg) throws (1: InvalidMavlinkMessage err),
  void postSetQuadSwarmRollPitchYawThrust(1: SetQuadSwarmRollPitchYawThrust msg) throws (1: InvalidMavlinkMessage err),
  void postNavControllerOutput(1: NavControllerOutput msg) throws (1: InvalidMavlinkMessage err),
  void postSetQuadSwarmLedRollPitchYawThrust(1: SetQuadSwarmLedRollPitchYawThrust msg) throws (1: InvalidMavlinkMessage err),
  void postStateCorrection(1: StateCorrection msg) throws (1: InvalidMavlinkMessage err),
  void postRequestDataStream(1: RequestDataStream msg) throws (1: InvalidMavlinkMessage err),
  void postDataStream(1: DataStream msg) throws (1: InvalidMavlinkMessage err),
  void postManualControl(1: ManualControl msg) throws (1: InvalidMavlinkMessage err),
  void postRcChannelsOverride(1: RcChannelsOverride msg) throws (1: InvalidMavlinkMessage err),
  void postVfrHud(1: VfrHud msg) throws (1: InvalidMavlinkMessage err),
  void postCommandLong(1: CommandLong msg) throws (1: InvalidMavlinkMessage err),
  void postCommandAck(1: CommandAck msg) throws (1: InvalidMavlinkMessage err),
  void postRollPitchYawRatesThrustSetpoint(1: RollPitchYawRatesThrustSetpoint msg) throws (1: InvalidMavlinkMessage err),
  void postManualSetpoint(1: ManualSetpoint msg) throws (1: InvalidMavlinkMessage err),
  void postLocalPositionNedSystemGlobalOffset(1: LocalPositionNedSystemGlobalOffset msg) throws (1: InvalidMavlinkMessage err),
  void postHilState(1: HilState msg) throws (1: InvalidMavlinkMessage err),
  void postHilControls(1: HilControls msg) throws (1: InvalidMavlinkMessage err),
  void postHilRcInputsRaw(1: HilRcInputsRaw msg) throws (1: InvalidMavlinkMessage err),
  void postOpticalFlow(1: OpticalFlow msg) throws (1: InvalidMavlinkMessage err),
  void postGlobalVisionPositionEstimate(1: GlobalVisionPositionEstimate msg) throws (1: InvalidMavlinkMessage err),
  void postVisionPositionEstimate(1: VisionPositionEstimate msg) throws (1: InvalidMavlinkMessage err),
  void postVisionSpeedEstimate(1: VisionSpeedEstimate msg) throws (1: InvalidMavlinkMessage err),
  void postViconPositionEstimate(1: ViconPositionEstimate msg) throws (1: InvalidMavlinkMessage err),
  void postHighresImu(1: HighresImu msg) throws (1: InvalidMavlinkMessage err),
  void postOmnidirectionalFlow(1: OmnidirectionalFlow msg) throws (1: InvalidMavlinkMessage err),
  void postFileTransferStart(1: FileTransferStart msg) throws (1: InvalidMavlinkMessage err),
  void postFileTransferDirList(1: FileTransferDirList msg) throws (1: InvalidMavlinkMessage err),
  void postFileTransferRes(1: FileTransferRes msg) throws (1: InvalidMavlinkMessage err),
  void postBatteryStatus(1: BatteryStatus msg) throws (1: InvalidMavlinkMessage err),
  void postSetpoint8dof(1: Setpoint8dof msg) throws (1: InvalidMavlinkMessage err),
  void postSetpoint6dof(1: Setpoint6dof msg) throws (1: InvalidMavlinkMessage err),
  void postMemoryVect(1: MemoryVect msg) throws (1: InvalidMavlinkMessage err),
  void postDebugVect(1: DebugVect msg) throws (1: InvalidMavlinkMessage err),
  void postNamedValueFloat(1: NamedValueFloat msg) throws (1: InvalidMavlinkMessage err),
  void postNamedValueInt(1: NamedValueInt msg) throws (1: InvalidMavlinkMessage err),
  void postStatustext(1: Statustext msg) throws (1: InvalidMavlinkMessage err),
  void postDebug(1: Debug msg) throws (1: InvalidMavlinkMessage err)
}

service CommonMessageFetch {
  map<CommonMessageTypes,i32> availableMessages(),
  list<Heartbeat> fetchHeartbeat(),
  list<SysStatus> fetchSysStatus(),
  list<SystemTime> fetchSystemTime(),
  list<Ping> fetchPing(),
  list<ChangeOperatorControl> fetchChangeOperatorControl(),
  list<ChangeOperatorControlAck> fetchChangeOperatorControlAck(),
  list<AuthKey> fetchAuthKey(),
  list<SetMode> fetchSetMode(),
  list<ParamRequestRead> fetchParamRequestRead(),
  list<ParamRequestList> fetchParamRequestList(),
  list<ParamValue> fetchParamValue(),
  list<ParamSet> fetchParamSet(),
  list<GpsRawInt> fetchGpsRawInt(),
  list<GpsStatus> fetchGpsStatus(),
  list<ScaledImu> fetchScaledImu(),
  list<RawImu> fetchRawImu(),
  list<RawPressure> fetchRawPressure(),
  list<ScaledPressure> fetchScaledPressure(),
  list<Attitude> fetchAttitude(),
  list<AttitudeQuaternion> fetchAttitudeQuaternion(),
  list<LocalPositionNed> fetchLocalPositionNed(),
  list<GlobalPositionInt> fetchGlobalPositionInt(),
  list<RcChannelsScaled> fetchRcChannelsScaled(),
  list<RcChannelsRaw> fetchRcChannelsRaw(),
  list<ServoOutputRaw> fetchServoOutputRaw(),
  list<MissionRequestPartialList> fetchMissionRequestPartialList(),
  list<MissionWritePartialList> fetchMissionWritePartialList(),
  list<MissionItem> fetchMissionItem(),
  list<MissionRequest> fetchMissionRequest(),
  list<MissionSetCurrent> fetchMissionSetCurrent(),
  list<MissionCurrent> fetchMissionCurrent(),
  list<MissionRequestList> fetchMissionRequestList(),
  list<MissionCount> fetchMissionCount(),
  list<MissionClearAll> fetchMissionClearAll(),
  list<MissionItemReached> fetchMissionItemReached(),
  list<MissionAck> fetchMissionAck(),
  list<SetGpsGlobalOrigin> fetchSetGpsGlobalOrigin(),
  list<GpsGlobalOrigin> fetchGpsGlobalOrigin(),
  list<SetLocalPositionSetpoint> fetchSetLocalPositionSetpoint(),
  list<LocalPositionSetpoint> fetchLocalPositionSetpoint(),
  list<GlobalPositionSetpointInt> fetchGlobalPositionSetpointInt(),
  list<SetGlobalPositionSetpointInt> fetchSetGlobalPositionSetpointInt(),
  list<SafetySetAllowedArea> fetchSafetySetAllowedArea(),
  list<SafetyAllowedArea> fetchSafetyAllowedArea(),
  list<SetRollPitchYawThrust> fetchSetRollPitchYawThrust(),
  list<SetRollPitchYawSpeedThrust> fetchSetRollPitchYawSpeedThrust(),
  list<RollPitchYawThrustSetpoint> fetchRollPitchYawThrustSetpoint(),
  list<RollPitchYawSpeedThrustSetpoint> fetchRollPitchYawSpeedThrustSetpoint(),
  list<SetQuadMotorsSetpoint> fetchSetQuadMotorsSetpoint(),
  list<SetQuadSwarmRollPitchYawThrust> fetchSetQuadSwarmRollPitchYawThrust(),
  list<NavControllerOutput> fetchNavControllerOutput(),
  list<SetQuadSwarmLedRollPitchYawThrust> fetchSetQuadSwarmLedRollPitchYawThrust(),
  list<StateCorrection> fetchStateCorrection(),
  list<RequestDataStream> fetchRequestDataStream(),
  list<DataStream> fetchDataStream(),
  list<ManualControl> fetchManualControl(),
  list<RcChannelsOverride> fetchRcChannelsOverride(),
  list<VfrHud> fetchVfrHud(),
  list<CommandLong> fetchCommandLong(),
  list<CommandAck> fetchCommandAck(),
  list<RollPitchYawRatesThrustSetpoint> fetchRollPitchYawRatesThrustSetpoint(),
  list<ManualSetpoint> fetchManualSetpoint(),
  list<LocalPositionNedSystemGlobalOffset> fetchLocalPositionNedSystemGlobalOffset(),
  list<HilState> fetchHilState(),
  list<HilControls> fetchHilControls(),
  list<HilRcInputsRaw> fetchHilRcInputsRaw(),
  list<OpticalFlow> fetchOpticalFlow(),
  list<GlobalVisionPositionEstimate> fetchGlobalVisionPositionEstimate(),
  list<VisionPositionEstimate> fetchVisionPositionEstimate(),
  list<VisionSpeedEstimate> fetchVisionSpeedEstimate(),
  list<ViconPositionEstimate> fetchViconPositionEstimate(),
  list<HighresImu> fetchHighresImu(),
  list<OmnidirectionalFlow> fetchOmnidirectionalFlow(),
  list<FileTransferStart> fetchFileTransferStart(),
  list<FileTransferDirList> fetchFileTransferDirList(),
  list<FileTransferRes> fetchFileTransferRes(),
  list<BatteryStatus> fetchBatteryStatus(),
  list<Setpoint8dof> fetchSetpoint8dof(),
  list<Setpoint6dof> fetchSetpoint6dof(),
  list<MemoryVect> fetchMemoryVect(),
  list<DebugVect> fetchDebugVect(),
  list<NamedValueFloat> fetchNamedValueFloat(),
  list<NamedValueInt> fetchNamedValueInt(),
  list<Statustext> fetchStatustext(),
  list<Debug> fetchDebug()
}
