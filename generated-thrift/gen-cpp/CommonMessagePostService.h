/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CommonMessagePostService_H
#define CommonMessagePostService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace mavlink { namespace thrift {

class CommonMessagePostServiceIf {
 public:
  virtual ~CommonMessagePostServiceIf() {}
  virtual void postHeartbeat(const Heartbeat& msg) = 0;
  virtual void postSysStatus(const SysStatus& msg) = 0;
  virtual void postSystemTime(const SystemTime& msg) = 0;
  virtual void postPing(const Ping& msg) = 0;
  virtual void postChangeOperatorControl(const ChangeOperatorControl& msg) = 0;
  virtual void postChangeOperatorControlAck(const ChangeOperatorControlAck& msg) = 0;
  virtual void postAuthKey(const AuthKey& msg) = 0;
  virtual void postSetMode(const SetMode& msg) = 0;
  virtual void postParamRequestRead(const ParamRequestRead& msg) = 0;
  virtual void postParamRequestList(const ParamRequestList& msg) = 0;
  virtual void postParamValue(const ParamValue& msg) = 0;
  virtual void postParamSet(const ParamSet& msg) = 0;
  virtual void postGpsRawInt(const GpsRawInt& msg) = 0;
  virtual void postGpsStatus(const GpsStatus& msg) = 0;
  virtual void postScaledImu(const ScaledImu& msg) = 0;
  virtual void postRawImu(const RawImu& msg) = 0;
  virtual void postRawPressure(const RawPressure& msg) = 0;
  virtual void postScaledPressure(const ScaledPressure& msg) = 0;
  virtual void postAttitude(const Attitude& msg) = 0;
  virtual void postAttitudeQuaternion(const AttitudeQuaternion& msg) = 0;
  virtual void postLocalPositionNed(const LocalPositionNed& msg) = 0;
  virtual void postGlobalPositionInt(const GlobalPositionInt& msg) = 0;
  virtual void postRcChannelsScaled(const RcChannelsScaled& msg) = 0;
  virtual void postRcChannelsRaw(const RcChannelsRaw& msg) = 0;
  virtual void postServoOutputRaw(const ServoOutputRaw& msg) = 0;
  virtual void postMissionRequestPartialList(const MissionRequestPartialList& msg) = 0;
  virtual void postMissionWritePartialList(const MissionWritePartialList& msg) = 0;
  virtual void postMissionItem(const MissionItem& msg) = 0;
  virtual void postMissionRequest(const MissionRequest& msg) = 0;
  virtual void postMissionSetCurrent(const MissionSetCurrent& msg) = 0;
  virtual void postMissionCurrent(const MissionCurrent& msg) = 0;
  virtual void postMissionRequestList(const MissionRequestList& msg) = 0;
  virtual void postMissionCount(const MissionCount& msg) = 0;
  virtual void postMissionClearAll(const MissionClearAll& msg) = 0;
  virtual void postMissionItemReached(const MissionItemReached& msg) = 0;
  virtual void postMissionAck(const MissionAck& msg) = 0;
  virtual void postSetGpsGlobalOrigin(const SetGpsGlobalOrigin& msg) = 0;
  virtual void postGpsGlobalOrigin(const GpsGlobalOrigin& msg) = 0;
  virtual void postSetLocalPositionSetpoint(const SetLocalPositionSetpoint& msg) = 0;
  virtual void postLocalPositionSetpoint(const LocalPositionSetpoint& msg) = 0;
  virtual void postGlobalPositionSetpointInt(const GlobalPositionSetpointInt& msg) = 0;
  virtual void postSetGlobalPositionSetpointInt(const SetGlobalPositionSetpointInt& msg) = 0;
  virtual void postSafetySetAllowedArea(const SafetySetAllowedArea& msg) = 0;
  virtual void postSafetyAllowedArea(const SafetyAllowedArea& msg) = 0;
  virtual void postSetRollPitchYawThrust(const SetRollPitchYawThrust& msg) = 0;
  virtual void postSetRollPitchYawSpeedThrust(const SetRollPitchYawSpeedThrust& msg) = 0;
  virtual void postRollPitchYawThrustSetpoint(const RollPitchYawThrustSetpoint& msg) = 0;
  virtual void postRollPitchYawSpeedThrustSetpoint(const RollPitchYawSpeedThrustSetpoint& msg) = 0;
  virtual void postSetQuadMotorsSetpoint(const SetQuadMotorsSetpoint& msg) = 0;
  virtual void postSetQuadSwarmRollPitchYawThrust(const SetQuadSwarmRollPitchYawThrust& msg) = 0;
  virtual void postNavControllerOutput(const NavControllerOutput& msg) = 0;
  virtual void postSetQuadSwarmLedRollPitchYawThrust(const SetQuadSwarmLedRollPitchYawThrust& msg) = 0;
  virtual void postStateCorrection(const StateCorrection& msg) = 0;
  virtual void postRequestDataStream(const RequestDataStream& msg) = 0;
  virtual void postDataStream(const DataStream& msg) = 0;
  virtual void postManualControl(const ManualControl& msg) = 0;
  virtual void postRcChannelsOverride(const RcChannelsOverride& msg) = 0;
  virtual void postVfrHud(const VfrHud& msg) = 0;
  virtual void postCommandLong(const CommandLong& msg) = 0;
  virtual void postCommandAck(const CommandAck& msg) = 0;
  virtual void postRollPitchYawRatesThrustSetpoint(const RollPitchYawRatesThrustSetpoint& msg) = 0;
  virtual void postManualSetpoint(const ManualSetpoint& msg) = 0;
  virtual void postLocalPositionNedSystemGlobalOffset(const LocalPositionNedSystemGlobalOffset& msg) = 0;
  virtual void postHilState(const HilState& msg) = 0;
  virtual void postHilControls(const HilControls& msg) = 0;
  virtual void postHilRcInputsRaw(const HilRcInputsRaw& msg) = 0;
  virtual void postOpticalFlow(const OpticalFlow& msg) = 0;
  virtual void postGlobalVisionPositionEstimate(const GlobalVisionPositionEstimate& msg) = 0;
  virtual void postVisionPositionEstimate(const VisionPositionEstimate& msg) = 0;
  virtual void postVisionSpeedEstimate(const VisionSpeedEstimate& msg) = 0;
  virtual void postViconPositionEstimate(const ViconPositionEstimate& msg) = 0;
  virtual void postHighresImu(const HighresImu& msg) = 0;
  virtual void postOmnidirectionalFlow(const OmnidirectionalFlow& msg) = 0;
  virtual void postFileTransferStart(const FileTransferStart& msg) = 0;
  virtual void postFileTransferDirList(const FileTransferDirList& msg) = 0;
  virtual void postFileTransferRes(const FileTransferRes& msg) = 0;
  virtual void postBatteryStatus(const BatteryStatus& msg) = 0;
  virtual void postSetpoint8dof(const Setpoint8dof& msg) = 0;
  virtual void postSetpoint6dof(const Setpoint6dof& msg) = 0;
  virtual void postMemoryVect(const MemoryVect& msg) = 0;
  virtual void postDebugVect(const DebugVect& msg) = 0;
  virtual void postNamedValueFloat(const NamedValueFloat& msg) = 0;
  virtual void postNamedValueInt(const NamedValueInt& msg) = 0;
  virtual void postStatustext(const Statustext& msg) = 0;
  virtual void postDebug(const Debug& msg) = 0;
};

class CommonMessagePostServiceIfFactory {
 public:
  typedef CommonMessagePostServiceIf Handler;

  virtual ~CommonMessagePostServiceIfFactory() {}

  virtual CommonMessagePostServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CommonMessagePostServiceIf* /* handler */) = 0;
};

class CommonMessagePostServiceIfSingletonFactory : virtual public CommonMessagePostServiceIfFactory {
 public:
  CommonMessagePostServiceIfSingletonFactory(const boost::shared_ptr<CommonMessagePostServiceIf>& iface) : iface_(iface) {}
  virtual ~CommonMessagePostServiceIfSingletonFactory() {}

  virtual CommonMessagePostServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CommonMessagePostServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CommonMessagePostServiceIf> iface_;
};

class CommonMessagePostServiceNull : virtual public CommonMessagePostServiceIf {
 public:
  virtual ~CommonMessagePostServiceNull() {}
  void postHeartbeat(const Heartbeat& /* msg */) {
    return;
  }
  void postSysStatus(const SysStatus& /* msg */) {
    return;
  }
  void postSystemTime(const SystemTime& /* msg */) {
    return;
  }
  void postPing(const Ping& /* msg */) {
    return;
  }
  void postChangeOperatorControl(const ChangeOperatorControl& /* msg */) {
    return;
  }
  void postChangeOperatorControlAck(const ChangeOperatorControlAck& /* msg */) {
    return;
  }
  void postAuthKey(const AuthKey& /* msg */) {
    return;
  }
  void postSetMode(const SetMode& /* msg */) {
    return;
  }
  void postParamRequestRead(const ParamRequestRead& /* msg */) {
    return;
  }
  void postParamRequestList(const ParamRequestList& /* msg */) {
    return;
  }
  void postParamValue(const ParamValue& /* msg */) {
    return;
  }
  void postParamSet(const ParamSet& /* msg */) {
    return;
  }
  void postGpsRawInt(const GpsRawInt& /* msg */) {
    return;
  }
  void postGpsStatus(const GpsStatus& /* msg */) {
    return;
  }
  void postScaledImu(const ScaledImu& /* msg */) {
    return;
  }
  void postRawImu(const RawImu& /* msg */) {
    return;
  }
  void postRawPressure(const RawPressure& /* msg */) {
    return;
  }
  void postScaledPressure(const ScaledPressure& /* msg */) {
    return;
  }
  void postAttitude(const Attitude& /* msg */) {
    return;
  }
  void postAttitudeQuaternion(const AttitudeQuaternion& /* msg */) {
    return;
  }
  void postLocalPositionNed(const LocalPositionNed& /* msg */) {
    return;
  }
  void postGlobalPositionInt(const GlobalPositionInt& /* msg */) {
    return;
  }
  void postRcChannelsScaled(const RcChannelsScaled& /* msg */) {
    return;
  }
  void postRcChannelsRaw(const RcChannelsRaw& /* msg */) {
    return;
  }
  void postServoOutputRaw(const ServoOutputRaw& /* msg */) {
    return;
  }
  void postMissionRequestPartialList(const MissionRequestPartialList& /* msg */) {
    return;
  }
  void postMissionWritePartialList(const MissionWritePartialList& /* msg */) {
    return;
  }
  void postMissionItem(const MissionItem& /* msg */) {
    return;
  }
  void postMissionRequest(const MissionRequest& /* msg */) {
    return;
  }
  void postMissionSetCurrent(const MissionSetCurrent& /* msg */) {
    return;
  }
  void postMissionCurrent(const MissionCurrent& /* msg */) {
    return;
  }
  void postMissionRequestList(const MissionRequestList& /* msg */) {
    return;
  }
  void postMissionCount(const MissionCount& /* msg */) {
    return;
  }
  void postMissionClearAll(const MissionClearAll& /* msg */) {
    return;
  }
  void postMissionItemReached(const MissionItemReached& /* msg */) {
    return;
  }
  void postMissionAck(const MissionAck& /* msg */) {
    return;
  }
  void postSetGpsGlobalOrigin(const SetGpsGlobalOrigin& /* msg */) {
    return;
  }
  void postGpsGlobalOrigin(const GpsGlobalOrigin& /* msg */) {
    return;
  }
  void postSetLocalPositionSetpoint(const SetLocalPositionSetpoint& /* msg */) {
    return;
  }
  void postLocalPositionSetpoint(const LocalPositionSetpoint& /* msg */) {
    return;
  }
  void postGlobalPositionSetpointInt(const GlobalPositionSetpointInt& /* msg */) {
    return;
  }
  void postSetGlobalPositionSetpointInt(const SetGlobalPositionSetpointInt& /* msg */) {
    return;
  }
  void postSafetySetAllowedArea(const SafetySetAllowedArea& /* msg */) {
    return;
  }
  void postSafetyAllowedArea(const SafetyAllowedArea& /* msg */) {
    return;
  }
  void postSetRollPitchYawThrust(const SetRollPitchYawThrust& /* msg */) {
    return;
  }
  void postSetRollPitchYawSpeedThrust(const SetRollPitchYawSpeedThrust& /* msg */) {
    return;
  }
  void postRollPitchYawThrustSetpoint(const RollPitchYawThrustSetpoint& /* msg */) {
    return;
  }
  void postRollPitchYawSpeedThrustSetpoint(const RollPitchYawSpeedThrustSetpoint& /* msg */) {
    return;
  }
  void postSetQuadMotorsSetpoint(const SetQuadMotorsSetpoint& /* msg */) {
    return;
  }
  void postSetQuadSwarmRollPitchYawThrust(const SetQuadSwarmRollPitchYawThrust& /* msg */) {
    return;
  }
  void postNavControllerOutput(const NavControllerOutput& /* msg */) {
    return;
  }
  void postSetQuadSwarmLedRollPitchYawThrust(const SetQuadSwarmLedRollPitchYawThrust& /* msg */) {
    return;
  }
  void postStateCorrection(const StateCorrection& /* msg */) {
    return;
  }
  void postRequestDataStream(const RequestDataStream& /* msg */) {
    return;
  }
  void postDataStream(const DataStream& /* msg */) {
    return;
  }
  void postManualControl(const ManualControl& /* msg */) {
    return;
  }
  void postRcChannelsOverride(const RcChannelsOverride& /* msg */) {
    return;
  }
  void postVfrHud(const VfrHud& /* msg */) {
    return;
  }
  void postCommandLong(const CommandLong& /* msg */) {
    return;
  }
  void postCommandAck(const CommandAck& /* msg */) {
    return;
  }
  void postRollPitchYawRatesThrustSetpoint(const RollPitchYawRatesThrustSetpoint& /* msg */) {
    return;
  }
  void postManualSetpoint(const ManualSetpoint& /* msg */) {
    return;
  }
  void postLocalPositionNedSystemGlobalOffset(const LocalPositionNedSystemGlobalOffset& /* msg */) {
    return;
  }
  void postHilState(const HilState& /* msg */) {
    return;
  }
  void postHilControls(const HilControls& /* msg */) {
    return;
  }
  void postHilRcInputsRaw(const HilRcInputsRaw& /* msg */) {
    return;
  }
  void postOpticalFlow(const OpticalFlow& /* msg */) {
    return;
  }
  void postGlobalVisionPositionEstimate(const GlobalVisionPositionEstimate& /* msg */) {
    return;
  }
  void postVisionPositionEstimate(const VisionPositionEstimate& /* msg */) {
    return;
  }
  void postVisionSpeedEstimate(const VisionSpeedEstimate& /* msg */) {
    return;
  }
  void postViconPositionEstimate(const ViconPositionEstimate& /* msg */) {
    return;
  }
  void postHighresImu(const HighresImu& /* msg */) {
    return;
  }
  void postOmnidirectionalFlow(const OmnidirectionalFlow& /* msg */) {
    return;
  }
  void postFileTransferStart(const FileTransferStart& /* msg */) {
    return;
  }
  void postFileTransferDirList(const FileTransferDirList& /* msg */) {
    return;
  }
  void postFileTransferRes(const FileTransferRes& /* msg */) {
    return;
  }
  void postBatteryStatus(const BatteryStatus& /* msg */) {
    return;
  }
  void postSetpoint8dof(const Setpoint8dof& /* msg */) {
    return;
  }
  void postSetpoint6dof(const Setpoint6dof& /* msg */) {
    return;
  }
  void postMemoryVect(const MemoryVect& /* msg */) {
    return;
  }
  void postDebugVect(const DebugVect& /* msg */) {
    return;
  }
  void postNamedValueFloat(const NamedValueFloat& /* msg */) {
    return;
  }
  void postNamedValueInt(const NamedValueInt& /* msg */) {
    return;
  }
  void postStatustext(const Statustext& /* msg */) {
    return;
  }
  void postDebug(const Debug& /* msg */) {
    return;
  }
};

typedef struct _CommonMessagePostService_postHeartbeat_args__isset {
  _CommonMessagePostService_postHeartbeat_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postHeartbeat_args__isset;

class CommonMessagePostService_postHeartbeat_args {
 public:

  CommonMessagePostService_postHeartbeat_args() {
  }

  virtual ~CommonMessagePostService_postHeartbeat_args() throw() {}

  Heartbeat msg;

  _CommonMessagePostService_postHeartbeat_args__isset __isset;

  void __set_msg(const Heartbeat& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postHeartbeat_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postHeartbeat_pargs {
 public:


  virtual ~CommonMessagePostService_postHeartbeat_pargs() throw() {}

  const Heartbeat* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHeartbeat_result__isset {
  _CommonMessagePostService_postHeartbeat_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHeartbeat_result__isset;

class CommonMessagePostService_postHeartbeat_result {
 public:

  CommonMessagePostService_postHeartbeat_result() {
  }

  virtual ~CommonMessagePostService_postHeartbeat_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHeartbeat_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postHeartbeat_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHeartbeat_presult__isset {
  _CommonMessagePostService_postHeartbeat_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHeartbeat_presult__isset;

class CommonMessagePostService_postHeartbeat_presult {
 public:


  virtual ~CommonMessagePostService_postHeartbeat_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHeartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSysStatus_args__isset {
  _CommonMessagePostService_postSysStatus_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSysStatus_args__isset;

class CommonMessagePostService_postSysStatus_args {
 public:

  CommonMessagePostService_postSysStatus_args() {
  }

  virtual ~CommonMessagePostService_postSysStatus_args() throw() {}

  SysStatus msg;

  _CommonMessagePostService_postSysStatus_args__isset __isset;

  void __set_msg(const SysStatus& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSysStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSysStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSysStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSysStatus_pargs {
 public:


  virtual ~CommonMessagePostService_postSysStatus_pargs() throw() {}

  const SysStatus* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSysStatus_result__isset {
  _CommonMessagePostService_postSysStatus_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSysStatus_result__isset;

class CommonMessagePostService_postSysStatus_result {
 public:

  CommonMessagePostService_postSysStatus_result() {
  }

  virtual ~CommonMessagePostService_postSysStatus_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSysStatus_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSysStatus_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSysStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSysStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSysStatus_presult__isset {
  _CommonMessagePostService_postSysStatus_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSysStatus_presult__isset;

class CommonMessagePostService_postSysStatus_presult {
 public:


  virtual ~CommonMessagePostService_postSysStatus_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSysStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSystemTime_args__isset {
  _CommonMessagePostService_postSystemTime_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSystemTime_args__isset;

class CommonMessagePostService_postSystemTime_args {
 public:

  CommonMessagePostService_postSystemTime_args() {
  }

  virtual ~CommonMessagePostService_postSystemTime_args() throw() {}

  SystemTime msg;

  _CommonMessagePostService_postSystemTime_args__isset __isset;

  void __set_msg(const SystemTime& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSystemTime_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSystemTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSystemTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSystemTime_pargs {
 public:


  virtual ~CommonMessagePostService_postSystemTime_pargs() throw() {}

  const SystemTime* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSystemTime_result__isset {
  _CommonMessagePostService_postSystemTime_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSystemTime_result__isset;

class CommonMessagePostService_postSystemTime_result {
 public:

  CommonMessagePostService_postSystemTime_result() {
  }

  virtual ~CommonMessagePostService_postSystemTime_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSystemTime_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSystemTime_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSystemTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSystemTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSystemTime_presult__isset {
  _CommonMessagePostService_postSystemTime_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSystemTime_presult__isset;

class CommonMessagePostService_postSystemTime_presult {
 public:


  virtual ~CommonMessagePostService_postSystemTime_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSystemTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postPing_args__isset {
  _CommonMessagePostService_postPing_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postPing_args__isset;

class CommonMessagePostService_postPing_args {
 public:

  CommonMessagePostService_postPing_args() {
  }

  virtual ~CommonMessagePostService_postPing_args() throw() {}

  Ping msg;

  _CommonMessagePostService_postPing_args__isset __isset;

  void __set_msg(const Ping& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postPing_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postPing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postPing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postPing_pargs {
 public:


  virtual ~CommonMessagePostService_postPing_pargs() throw() {}

  const Ping* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postPing_result__isset {
  _CommonMessagePostService_postPing_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postPing_result__isset;

class CommonMessagePostService_postPing_result {
 public:

  CommonMessagePostService_postPing_result() {
  }

  virtual ~CommonMessagePostService_postPing_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postPing_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postPing_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postPing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postPing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postPing_presult__isset {
  _CommonMessagePostService_postPing_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postPing_presult__isset;

class CommonMessagePostService_postPing_presult {
 public:


  virtual ~CommonMessagePostService_postPing_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postPing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postChangeOperatorControl_args__isset {
  _CommonMessagePostService_postChangeOperatorControl_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postChangeOperatorControl_args__isset;

class CommonMessagePostService_postChangeOperatorControl_args {
 public:

  CommonMessagePostService_postChangeOperatorControl_args() {
  }

  virtual ~CommonMessagePostService_postChangeOperatorControl_args() throw() {}

  ChangeOperatorControl msg;

  _CommonMessagePostService_postChangeOperatorControl_args__isset __isset;

  void __set_msg(const ChangeOperatorControl& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postChangeOperatorControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postChangeOperatorControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postChangeOperatorControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postChangeOperatorControl_pargs {
 public:


  virtual ~CommonMessagePostService_postChangeOperatorControl_pargs() throw() {}

  const ChangeOperatorControl* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postChangeOperatorControl_result__isset {
  _CommonMessagePostService_postChangeOperatorControl_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postChangeOperatorControl_result__isset;

class CommonMessagePostService_postChangeOperatorControl_result {
 public:

  CommonMessagePostService_postChangeOperatorControl_result() {
  }

  virtual ~CommonMessagePostService_postChangeOperatorControl_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postChangeOperatorControl_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postChangeOperatorControl_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postChangeOperatorControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postChangeOperatorControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postChangeOperatorControl_presult__isset {
  _CommonMessagePostService_postChangeOperatorControl_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postChangeOperatorControl_presult__isset;

class CommonMessagePostService_postChangeOperatorControl_presult {
 public:


  virtual ~CommonMessagePostService_postChangeOperatorControl_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postChangeOperatorControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postChangeOperatorControlAck_args__isset {
  _CommonMessagePostService_postChangeOperatorControlAck_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postChangeOperatorControlAck_args__isset;

class CommonMessagePostService_postChangeOperatorControlAck_args {
 public:

  CommonMessagePostService_postChangeOperatorControlAck_args() {
  }

  virtual ~CommonMessagePostService_postChangeOperatorControlAck_args() throw() {}

  ChangeOperatorControlAck msg;

  _CommonMessagePostService_postChangeOperatorControlAck_args__isset __isset;

  void __set_msg(const ChangeOperatorControlAck& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postChangeOperatorControlAck_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postChangeOperatorControlAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postChangeOperatorControlAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postChangeOperatorControlAck_pargs {
 public:


  virtual ~CommonMessagePostService_postChangeOperatorControlAck_pargs() throw() {}

  const ChangeOperatorControlAck* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postChangeOperatorControlAck_result__isset {
  _CommonMessagePostService_postChangeOperatorControlAck_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postChangeOperatorControlAck_result__isset;

class CommonMessagePostService_postChangeOperatorControlAck_result {
 public:

  CommonMessagePostService_postChangeOperatorControlAck_result() {
  }

  virtual ~CommonMessagePostService_postChangeOperatorControlAck_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postChangeOperatorControlAck_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postChangeOperatorControlAck_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postChangeOperatorControlAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postChangeOperatorControlAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postChangeOperatorControlAck_presult__isset {
  _CommonMessagePostService_postChangeOperatorControlAck_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postChangeOperatorControlAck_presult__isset;

class CommonMessagePostService_postChangeOperatorControlAck_presult {
 public:


  virtual ~CommonMessagePostService_postChangeOperatorControlAck_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postChangeOperatorControlAck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postAuthKey_args__isset {
  _CommonMessagePostService_postAuthKey_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postAuthKey_args__isset;

class CommonMessagePostService_postAuthKey_args {
 public:

  CommonMessagePostService_postAuthKey_args() {
  }

  virtual ~CommonMessagePostService_postAuthKey_args() throw() {}

  AuthKey msg;

  _CommonMessagePostService_postAuthKey_args__isset __isset;

  void __set_msg(const AuthKey& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postAuthKey_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postAuthKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postAuthKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postAuthKey_pargs {
 public:


  virtual ~CommonMessagePostService_postAuthKey_pargs() throw() {}

  const AuthKey* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postAuthKey_result__isset {
  _CommonMessagePostService_postAuthKey_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postAuthKey_result__isset;

class CommonMessagePostService_postAuthKey_result {
 public:

  CommonMessagePostService_postAuthKey_result() {
  }

  virtual ~CommonMessagePostService_postAuthKey_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postAuthKey_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postAuthKey_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postAuthKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postAuthKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postAuthKey_presult__isset {
  _CommonMessagePostService_postAuthKey_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postAuthKey_presult__isset;

class CommonMessagePostService_postAuthKey_presult {
 public:


  virtual ~CommonMessagePostService_postAuthKey_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postAuthKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetMode_args__isset {
  _CommonMessagePostService_postSetMode_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetMode_args__isset;

class CommonMessagePostService_postSetMode_args {
 public:

  CommonMessagePostService_postSetMode_args() {
  }

  virtual ~CommonMessagePostService_postSetMode_args() throw() {}

  SetMode msg;

  _CommonMessagePostService_postSetMode_args__isset __isset;

  void __set_msg(const SetMode& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetMode_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetMode_pargs {
 public:


  virtual ~CommonMessagePostService_postSetMode_pargs() throw() {}

  const SetMode* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetMode_result__isset {
  _CommonMessagePostService_postSetMode_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetMode_result__isset;

class CommonMessagePostService_postSetMode_result {
 public:

  CommonMessagePostService_postSetMode_result() {
  }

  virtual ~CommonMessagePostService_postSetMode_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetMode_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetMode_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetMode_presult__isset {
  _CommonMessagePostService_postSetMode_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetMode_presult__isset;

class CommonMessagePostService_postSetMode_presult {
 public:


  virtual ~CommonMessagePostService_postSetMode_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postParamRequestRead_args__isset {
  _CommonMessagePostService_postParamRequestRead_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postParamRequestRead_args__isset;

class CommonMessagePostService_postParamRequestRead_args {
 public:

  CommonMessagePostService_postParamRequestRead_args() {
  }

  virtual ~CommonMessagePostService_postParamRequestRead_args() throw() {}

  ParamRequestRead msg;

  _CommonMessagePostService_postParamRequestRead_args__isset __isset;

  void __set_msg(const ParamRequestRead& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postParamRequestRead_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamRequestRead_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamRequestRead_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postParamRequestRead_pargs {
 public:


  virtual ~CommonMessagePostService_postParamRequestRead_pargs() throw() {}

  const ParamRequestRead* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamRequestRead_result__isset {
  _CommonMessagePostService_postParamRequestRead_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamRequestRead_result__isset;

class CommonMessagePostService_postParamRequestRead_result {
 public:

  CommonMessagePostService_postParamRequestRead_result() {
  }

  virtual ~CommonMessagePostService_postParamRequestRead_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamRequestRead_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postParamRequestRead_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamRequestRead_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamRequestRead_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamRequestRead_presult__isset {
  _CommonMessagePostService_postParamRequestRead_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamRequestRead_presult__isset;

class CommonMessagePostService_postParamRequestRead_presult {
 public:


  virtual ~CommonMessagePostService_postParamRequestRead_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamRequestRead_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postParamRequestList_args__isset {
  _CommonMessagePostService_postParamRequestList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postParamRequestList_args__isset;

class CommonMessagePostService_postParamRequestList_args {
 public:

  CommonMessagePostService_postParamRequestList_args() {
  }

  virtual ~CommonMessagePostService_postParamRequestList_args() throw() {}

  ParamRequestList msg;

  _CommonMessagePostService_postParamRequestList_args__isset __isset;

  void __set_msg(const ParamRequestList& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postParamRequestList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamRequestList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamRequestList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postParamRequestList_pargs {
 public:


  virtual ~CommonMessagePostService_postParamRequestList_pargs() throw() {}

  const ParamRequestList* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamRequestList_result__isset {
  _CommonMessagePostService_postParamRequestList_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamRequestList_result__isset;

class CommonMessagePostService_postParamRequestList_result {
 public:

  CommonMessagePostService_postParamRequestList_result() {
  }

  virtual ~CommonMessagePostService_postParamRequestList_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamRequestList_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postParamRequestList_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamRequestList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamRequestList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamRequestList_presult__isset {
  _CommonMessagePostService_postParamRequestList_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamRequestList_presult__isset;

class CommonMessagePostService_postParamRequestList_presult {
 public:


  virtual ~CommonMessagePostService_postParamRequestList_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamRequestList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postParamValue_args__isset {
  _CommonMessagePostService_postParamValue_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postParamValue_args__isset;

class CommonMessagePostService_postParamValue_args {
 public:

  CommonMessagePostService_postParamValue_args() {
  }

  virtual ~CommonMessagePostService_postParamValue_args() throw() {}

  ParamValue msg;

  _CommonMessagePostService_postParamValue_args__isset __isset;

  void __set_msg(const ParamValue& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postParamValue_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postParamValue_pargs {
 public:


  virtual ~CommonMessagePostService_postParamValue_pargs() throw() {}

  const ParamValue* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamValue_result__isset {
  _CommonMessagePostService_postParamValue_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamValue_result__isset;

class CommonMessagePostService_postParamValue_result {
 public:

  CommonMessagePostService_postParamValue_result() {
  }

  virtual ~CommonMessagePostService_postParamValue_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamValue_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postParamValue_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamValue_presult__isset {
  _CommonMessagePostService_postParamValue_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamValue_presult__isset;

class CommonMessagePostService_postParamValue_presult {
 public:


  virtual ~CommonMessagePostService_postParamValue_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postParamSet_args__isset {
  _CommonMessagePostService_postParamSet_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postParamSet_args__isset;

class CommonMessagePostService_postParamSet_args {
 public:

  CommonMessagePostService_postParamSet_args() {
  }

  virtual ~CommonMessagePostService_postParamSet_args() throw() {}

  ParamSet msg;

  _CommonMessagePostService_postParamSet_args__isset __isset;

  void __set_msg(const ParamSet& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postParamSet_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postParamSet_pargs {
 public:


  virtual ~CommonMessagePostService_postParamSet_pargs() throw() {}

  const ParamSet* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamSet_result__isset {
  _CommonMessagePostService_postParamSet_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamSet_result__isset;

class CommonMessagePostService_postParamSet_result {
 public:

  CommonMessagePostService_postParamSet_result() {
  }

  virtual ~CommonMessagePostService_postParamSet_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamSet_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postParamSet_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postParamSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postParamSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postParamSet_presult__isset {
  _CommonMessagePostService_postParamSet_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postParamSet_presult__isset;

class CommonMessagePostService_postParamSet_presult {
 public:


  virtual ~CommonMessagePostService_postParamSet_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postParamSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postGpsRawInt_args__isset {
  _CommonMessagePostService_postGpsRawInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postGpsRawInt_args__isset;

class CommonMessagePostService_postGpsRawInt_args {
 public:

  CommonMessagePostService_postGpsRawInt_args() {
  }

  virtual ~CommonMessagePostService_postGpsRawInt_args() throw() {}

  GpsRawInt msg;

  _CommonMessagePostService_postGpsRawInt_args__isset __isset;

  void __set_msg(const GpsRawInt& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postGpsRawInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGpsRawInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGpsRawInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postGpsRawInt_pargs {
 public:


  virtual ~CommonMessagePostService_postGpsRawInt_pargs() throw() {}

  const GpsRawInt* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGpsRawInt_result__isset {
  _CommonMessagePostService_postGpsRawInt_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGpsRawInt_result__isset;

class CommonMessagePostService_postGpsRawInt_result {
 public:

  CommonMessagePostService_postGpsRawInt_result() {
  }

  virtual ~CommonMessagePostService_postGpsRawInt_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGpsRawInt_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postGpsRawInt_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGpsRawInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGpsRawInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGpsRawInt_presult__isset {
  _CommonMessagePostService_postGpsRawInt_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGpsRawInt_presult__isset;

class CommonMessagePostService_postGpsRawInt_presult {
 public:


  virtual ~CommonMessagePostService_postGpsRawInt_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGpsRawInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postGpsStatus_args__isset {
  _CommonMessagePostService_postGpsStatus_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postGpsStatus_args__isset;

class CommonMessagePostService_postGpsStatus_args {
 public:

  CommonMessagePostService_postGpsStatus_args() {
  }

  virtual ~CommonMessagePostService_postGpsStatus_args() throw() {}

  GpsStatus msg;

  _CommonMessagePostService_postGpsStatus_args__isset __isset;

  void __set_msg(const GpsStatus& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postGpsStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGpsStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGpsStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postGpsStatus_pargs {
 public:


  virtual ~CommonMessagePostService_postGpsStatus_pargs() throw() {}

  const GpsStatus* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGpsStatus_result__isset {
  _CommonMessagePostService_postGpsStatus_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGpsStatus_result__isset;

class CommonMessagePostService_postGpsStatus_result {
 public:

  CommonMessagePostService_postGpsStatus_result() {
  }

  virtual ~CommonMessagePostService_postGpsStatus_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGpsStatus_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postGpsStatus_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGpsStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGpsStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGpsStatus_presult__isset {
  _CommonMessagePostService_postGpsStatus_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGpsStatus_presult__isset;

class CommonMessagePostService_postGpsStatus_presult {
 public:


  virtual ~CommonMessagePostService_postGpsStatus_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGpsStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postScaledImu_args__isset {
  _CommonMessagePostService_postScaledImu_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postScaledImu_args__isset;

class CommonMessagePostService_postScaledImu_args {
 public:

  CommonMessagePostService_postScaledImu_args() {
  }

  virtual ~CommonMessagePostService_postScaledImu_args() throw() {}

  ScaledImu msg;

  _CommonMessagePostService_postScaledImu_args__isset __isset;

  void __set_msg(const ScaledImu& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postScaledImu_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postScaledImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postScaledImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postScaledImu_pargs {
 public:


  virtual ~CommonMessagePostService_postScaledImu_pargs() throw() {}

  const ScaledImu* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postScaledImu_result__isset {
  _CommonMessagePostService_postScaledImu_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postScaledImu_result__isset;

class CommonMessagePostService_postScaledImu_result {
 public:

  CommonMessagePostService_postScaledImu_result() {
  }

  virtual ~CommonMessagePostService_postScaledImu_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postScaledImu_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postScaledImu_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postScaledImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postScaledImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postScaledImu_presult__isset {
  _CommonMessagePostService_postScaledImu_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postScaledImu_presult__isset;

class CommonMessagePostService_postScaledImu_presult {
 public:


  virtual ~CommonMessagePostService_postScaledImu_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postScaledImu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRawImu_args__isset {
  _CommonMessagePostService_postRawImu_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRawImu_args__isset;

class CommonMessagePostService_postRawImu_args {
 public:

  CommonMessagePostService_postRawImu_args() {
  }

  virtual ~CommonMessagePostService_postRawImu_args() throw() {}

  RawImu msg;

  _CommonMessagePostService_postRawImu_args__isset __isset;

  void __set_msg(const RawImu& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRawImu_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRawImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRawImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRawImu_pargs {
 public:


  virtual ~CommonMessagePostService_postRawImu_pargs() throw() {}

  const RawImu* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRawImu_result__isset {
  _CommonMessagePostService_postRawImu_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRawImu_result__isset;

class CommonMessagePostService_postRawImu_result {
 public:

  CommonMessagePostService_postRawImu_result() {
  }

  virtual ~CommonMessagePostService_postRawImu_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRawImu_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRawImu_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRawImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRawImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRawImu_presult__isset {
  _CommonMessagePostService_postRawImu_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRawImu_presult__isset;

class CommonMessagePostService_postRawImu_presult {
 public:


  virtual ~CommonMessagePostService_postRawImu_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRawImu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRawPressure_args__isset {
  _CommonMessagePostService_postRawPressure_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRawPressure_args__isset;

class CommonMessagePostService_postRawPressure_args {
 public:

  CommonMessagePostService_postRawPressure_args() {
  }

  virtual ~CommonMessagePostService_postRawPressure_args() throw() {}

  RawPressure msg;

  _CommonMessagePostService_postRawPressure_args__isset __isset;

  void __set_msg(const RawPressure& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRawPressure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRawPressure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRawPressure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRawPressure_pargs {
 public:


  virtual ~CommonMessagePostService_postRawPressure_pargs() throw() {}

  const RawPressure* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRawPressure_result__isset {
  _CommonMessagePostService_postRawPressure_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRawPressure_result__isset;

class CommonMessagePostService_postRawPressure_result {
 public:

  CommonMessagePostService_postRawPressure_result() {
  }

  virtual ~CommonMessagePostService_postRawPressure_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRawPressure_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRawPressure_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRawPressure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRawPressure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRawPressure_presult__isset {
  _CommonMessagePostService_postRawPressure_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRawPressure_presult__isset;

class CommonMessagePostService_postRawPressure_presult {
 public:


  virtual ~CommonMessagePostService_postRawPressure_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRawPressure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postScaledPressure_args__isset {
  _CommonMessagePostService_postScaledPressure_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postScaledPressure_args__isset;

class CommonMessagePostService_postScaledPressure_args {
 public:

  CommonMessagePostService_postScaledPressure_args() {
  }

  virtual ~CommonMessagePostService_postScaledPressure_args() throw() {}

  ScaledPressure msg;

  _CommonMessagePostService_postScaledPressure_args__isset __isset;

  void __set_msg(const ScaledPressure& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postScaledPressure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postScaledPressure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postScaledPressure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postScaledPressure_pargs {
 public:


  virtual ~CommonMessagePostService_postScaledPressure_pargs() throw() {}

  const ScaledPressure* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postScaledPressure_result__isset {
  _CommonMessagePostService_postScaledPressure_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postScaledPressure_result__isset;

class CommonMessagePostService_postScaledPressure_result {
 public:

  CommonMessagePostService_postScaledPressure_result() {
  }

  virtual ~CommonMessagePostService_postScaledPressure_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postScaledPressure_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postScaledPressure_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postScaledPressure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postScaledPressure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postScaledPressure_presult__isset {
  _CommonMessagePostService_postScaledPressure_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postScaledPressure_presult__isset;

class CommonMessagePostService_postScaledPressure_presult {
 public:


  virtual ~CommonMessagePostService_postScaledPressure_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postScaledPressure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postAttitude_args__isset {
  _CommonMessagePostService_postAttitude_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postAttitude_args__isset;

class CommonMessagePostService_postAttitude_args {
 public:

  CommonMessagePostService_postAttitude_args() {
  }

  virtual ~CommonMessagePostService_postAttitude_args() throw() {}

  Attitude msg;

  _CommonMessagePostService_postAttitude_args__isset __isset;

  void __set_msg(const Attitude& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postAttitude_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postAttitude_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postAttitude_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postAttitude_pargs {
 public:


  virtual ~CommonMessagePostService_postAttitude_pargs() throw() {}

  const Attitude* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postAttitude_result__isset {
  _CommonMessagePostService_postAttitude_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postAttitude_result__isset;

class CommonMessagePostService_postAttitude_result {
 public:

  CommonMessagePostService_postAttitude_result() {
  }

  virtual ~CommonMessagePostService_postAttitude_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postAttitude_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postAttitude_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postAttitude_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postAttitude_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postAttitude_presult__isset {
  _CommonMessagePostService_postAttitude_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postAttitude_presult__isset;

class CommonMessagePostService_postAttitude_presult {
 public:


  virtual ~CommonMessagePostService_postAttitude_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postAttitude_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postAttitudeQuaternion_args__isset {
  _CommonMessagePostService_postAttitudeQuaternion_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postAttitudeQuaternion_args__isset;

class CommonMessagePostService_postAttitudeQuaternion_args {
 public:

  CommonMessagePostService_postAttitudeQuaternion_args() {
  }

  virtual ~CommonMessagePostService_postAttitudeQuaternion_args() throw() {}

  AttitudeQuaternion msg;

  _CommonMessagePostService_postAttitudeQuaternion_args__isset __isset;

  void __set_msg(const AttitudeQuaternion& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postAttitudeQuaternion_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postAttitudeQuaternion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postAttitudeQuaternion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postAttitudeQuaternion_pargs {
 public:


  virtual ~CommonMessagePostService_postAttitudeQuaternion_pargs() throw() {}

  const AttitudeQuaternion* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postAttitudeQuaternion_result__isset {
  _CommonMessagePostService_postAttitudeQuaternion_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postAttitudeQuaternion_result__isset;

class CommonMessagePostService_postAttitudeQuaternion_result {
 public:

  CommonMessagePostService_postAttitudeQuaternion_result() {
  }

  virtual ~CommonMessagePostService_postAttitudeQuaternion_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postAttitudeQuaternion_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postAttitudeQuaternion_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postAttitudeQuaternion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postAttitudeQuaternion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postAttitudeQuaternion_presult__isset {
  _CommonMessagePostService_postAttitudeQuaternion_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postAttitudeQuaternion_presult__isset;

class CommonMessagePostService_postAttitudeQuaternion_presult {
 public:


  virtual ~CommonMessagePostService_postAttitudeQuaternion_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postAttitudeQuaternion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postLocalPositionNed_args__isset {
  _CommonMessagePostService_postLocalPositionNed_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postLocalPositionNed_args__isset;

class CommonMessagePostService_postLocalPositionNed_args {
 public:

  CommonMessagePostService_postLocalPositionNed_args() {
  }

  virtual ~CommonMessagePostService_postLocalPositionNed_args() throw() {}

  LocalPositionNed msg;

  _CommonMessagePostService_postLocalPositionNed_args__isset __isset;

  void __set_msg(const LocalPositionNed& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postLocalPositionNed_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postLocalPositionNed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postLocalPositionNed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postLocalPositionNed_pargs {
 public:


  virtual ~CommonMessagePostService_postLocalPositionNed_pargs() throw() {}

  const LocalPositionNed* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postLocalPositionNed_result__isset {
  _CommonMessagePostService_postLocalPositionNed_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postLocalPositionNed_result__isset;

class CommonMessagePostService_postLocalPositionNed_result {
 public:

  CommonMessagePostService_postLocalPositionNed_result() {
  }

  virtual ~CommonMessagePostService_postLocalPositionNed_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postLocalPositionNed_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postLocalPositionNed_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postLocalPositionNed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postLocalPositionNed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postLocalPositionNed_presult__isset {
  _CommonMessagePostService_postLocalPositionNed_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postLocalPositionNed_presult__isset;

class CommonMessagePostService_postLocalPositionNed_presult {
 public:


  virtual ~CommonMessagePostService_postLocalPositionNed_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postLocalPositionNed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postGlobalPositionInt_args__isset {
  _CommonMessagePostService_postGlobalPositionInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postGlobalPositionInt_args__isset;

class CommonMessagePostService_postGlobalPositionInt_args {
 public:

  CommonMessagePostService_postGlobalPositionInt_args() {
  }

  virtual ~CommonMessagePostService_postGlobalPositionInt_args() throw() {}

  GlobalPositionInt msg;

  _CommonMessagePostService_postGlobalPositionInt_args__isset __isset;

  void __set_msg(const GlobalPositionInt& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postGlobalPositionInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGlobalPositionInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGlobalPositionInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postGlobalPositionInt_pargs {
 public:


  virtual ~CommonMessagePostService_postGlobalPositionInt_pargs() throw() {}

  const GlobalPositionInt* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGlobalPositionInt_result__isset {
  _CommonMessagePostService_postGlobalPositionInt_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGlobalPositionInt_result__isset;

class CommonMessagePostService_postGlobalPositionInt_result {
 public:

  CommonMessagePostService_postGlobalPositionInt_result() {
  }

  virtual ~CommonMessagePostService_postGlobalPositionInt_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGlobalPositionInt_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postGlobalPositionInt_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGlobalPositionInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGlobalPositionInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGlobalPositionInt_presult__isset {
  _CommonMessagePostService_postGlobalPositionInt_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGlobalPositionInt_presult__isset;

class CommonMessagePostService_postGlobalPositionInt_presult {
 public:


  virtual ~CommonMessagePostService_postGlobalPositionInt_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGlobalPositionInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRcChannelsScaled_args__isset {
  _CommonMessagePostService_postRcChannelsScaled_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRcChannelsScaled_args__isset;

class CommonMessagePostService_postRcChannelsScaled_args {
 public:

  CommonMessagePostService_postRcChannelsScaled_args() {
  }

  virtual ~CommonMessagePostService_postRcChannelsScaled_args() throw() {}

  RcChannelsScaled msg;

  _CommonMessagePostService_postRcChannelsScaled_args__isset __isset;

  void __set_msg(const RcChannelsScaled& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRcChannelsScaled_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRcChannelsScaled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRcChannelsScaled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRcChannelsScaled_pargs {
 public:


  virtual ~CommonMessagePostService_postRcChannelsScaled_pargs() throw() {}

  const RcChannelsScaled* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRcChannelsScaled_result__isset {
  _CommonMessagePostService_postRcChannelsScaled_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRcChannelsScaled_result__isset;

class CommonMessagePostService_postRcChannelsScaled_result {
 public:

  CommonMessagePostService_postRcChannelsScaled_result() {
  }

  virtual ~CommonMessagePostService_postRcChannelsScaled_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRcChannelsScaled_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRcChannelsScaled_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRcChannelsScaled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRcChannelsScaled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRcChannelsScaled_presult__isset {
  _CommonMessagePostService_postRcChannelsScaled_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRcChannelsScaled_presult__isset;

class CommonMessagePostService_postRcChannelsScaled_presult {
 public:


  virtual ~CommonMessagePostService_postRcChannelsScaled_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRcChannelsScaled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRcChannelsRaw_args__isset {
  _CommonMessagePostService_postRcChannelsRaw_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRcChannelsRaw_args__isset;

class CommonMessagePostService_postRcChannelsRaw_args {
 public:

  CommonMessagePostService_postRcChannelsRaw_args() {
  }

  virtual ~CommonMessagePostService_postRcChannelsRaw_args() throw() {}

  RcChannelsRaw msg;

  _CommonMessagePostService_postRcChannelsRaw_args__isset __isset;

  void __set_msg(const RcChannelsRaw& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRcChannelsRaw_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRcChannelsRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRcChannelsRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRcChannelsRaw_pargs {
 public:


  virtual ~CommonMessagePostService_postRcChannelsRaw_pargs() throw() {}

  const RcChannelsRaw* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRcChannelsRaw_result__isset {
  _CommonMessagePostService_postRcChannelsRaw_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRcChannelsRaw_result__isset;

class CommonMessagePostService_postRcChannelsRaw_result {
 public:

  CommonMessagePostService_postRcChannelsRaw_result() {
  }

  virtual ~CommonMessagePostService_postRcChannelsRaw_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRcChannelsRaw_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRcChannelsRaw_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRcChannelsRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRcChannelsRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRcChannelsRaw_presult__isset {
  _CommonMessagePostService_postRcChannelsRaw_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRcChannelsRaw_presult__isset;

class CommonMessagePostService_postRcChannelsRaw_presult {
 public:


  virtual ~CommonMessagePostService_postRcChannelsRaw_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRcChannelsRaw_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postServoOutputRaw_args__isset {
  _CommonMessagePostService_postServoOutputRaw_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postServoOutputRaw_args__isset;

class CommonMessagePostService_postServoOutputRaw_args {
 public:

  CommonMessagePostService_postServoOutputRaw_args() {
  }

  virtual ~CommonMessagePostService_postServoOutputRaw_args() throw() {}

  ServoOutputRaw msg;

  _CommonMessagePostService_postServoOutputRaw_args__isset __isset;

  void __set_msg(const ServoOutputRaw& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postServoOutputRaw_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postServoOutputRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postServoOutputRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postServoOutputRaw_pargs {
 public:


  virtual ~CommonMessagePostService_postServoOutputRaw_pargs() throw() {}

  const ServoOutputRaw* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postServoOutputRaw_result__isset {
  _CommonMessagePostService_postServoOutputRaw_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postServoOutputRaw_result__isset;

class CommonMessagePostService_postServoOutputRaw_result {
 public:

  CommonMessagePostService_postServoOutputRaw_result() {
  }

  virtual ~CommonMessagePostService_postServoOutputRaw_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postServoOutputRaw_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postServoOutputRaw_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postServoOutputRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postServoOutputRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postServoOutputRaw_presult__isset {
  _CommonMessagePostService_postServoOutputRaw_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postServoOutputRaw_presult__isset;

class CommonMessagePostService_postServoOutputRaw_presult {
 public:


  virtual ~CommonMessagePostService_postServoOutputRaw_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postServoOutputRaw_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionRequestPartialList_args__isset {
  _CommonMessagePostService_postMissionRequestPartialList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionRequestPartialList_args__isset;

class CommonMessagePostService_postMissionRequestPartialList_args {
 public:

  CommonMessagePostService_postMissionRequestPartialList_args() {
  }

  virtual ~CommonMessagePostService_postMissionRequestPartialList_args() throw() {}

  MissionRequestPartialList msg;

  _CommonMessagePostService_postMissionRequestPartialList_args__isset __isset;

  void __set_msg(const MissionRequestPartialList& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionRequestPartialList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionRequestPartialList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionRequestPartialList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionRequestPartialList_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionRequestPartialList_pargs() throw() {}

  const MissionRequestPartialList* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionRequestPartialList_result__isset {
  _CommonMessagePostService_postMissionRequestPartialList_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionRequestPartialList_result__isset;

class CommonMessagePostService_postMissionRequestPartialList_result {
 public:

  CommonMessagePostService_postMissionRequestPartialList_result() {
  }

  virtual ~CommonMessagePostService_postMissionRequestPartialList_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionRequestPartialList_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionRequestPartialList_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionRequestPartialList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionRequestPartialList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionRequestPartialList_presult__isset {
  _CommonMessagePostService_postMissionRequestPartialList_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionRequestPartialList_presult__isset;

class CommonMessagePostService_postMissionRequestPartialList_presult {
 public:


  virtual ~CommonMessagePostService_postMissionRequestPartialList_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionRequestPartialList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionWritePartialList_args__isset {
  _CommonMessagePostService_postMissionWritePartialList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionWritePartialList_args__isset;

class CommonMessagePostService_postMissionWritePartialList_args {
 public:

  CommonMessagePostService_postMissionWritePartialList_args() {
  }

  virtual ~CommonMessagePostService_postMissionWritePartialList_args() throw() {}

  MissionWritePartialList msg;

  _CommonMessagePostService_postMissionWritePartialList_args__isset __isset;

  void __set_msg(const MissionWritePartialList& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionWritePartialList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionWritePartialList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionWritePartialList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionWritePartialList_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionWritePartialList_pargs() throw() {}

  const MissionWritePartialList* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionWritePartialList_result__isset {
  _CommonMessagePostService_postMissionWritePartialList_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionWritePartialList_result__isset;

class CommonMessagePostService_postMissionWritePartialList_result {
 public:

  CommonMessagePostService_postMissionWritePartialList_result() {
  }

  virtual ~CommonMessagePostService_postMissionWritePartialList_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionWritePartialList_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionWritePartialList_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionWritePartialList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionWritePartialList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionWritePartialList_presult__isset {
  _CommonMessagePostService_postMissionWritePartialList_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionWritePartialList_presult__isset;

class CommonMessagePostService_postMissionWritePartialList_presult {
 public:


  virtual ~CommonMessagePostService_postMissionWritePartialList_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionWritePartialList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionItem_args__isset {
  _CommonMessagePostService_postMissionItem_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionItem_args__isset;

class CommonMessagePostService_postMissionItem_args {
 public:

  CommonMessagePostService_postMissionItem_args() {
  }

  virtual ~CommonMessagePostService_postMissionItem_args() throw() {}

  MissionItem msg;

  _CommonMessagePostService_postMissionItem_args__isset __isset;

  void __set_msg(const MissionItem& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionItem_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionItem_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionItem_pargs() throw() {}

  const MissionItem* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionItem_result__isset {
  _CommonMessagePostService_postMissionItem_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionItem_result__isset;

class CommonMessagePostService_postMissionItem_result {
 public:

  CommonMessagePostService_postMissionItem_result() {
  }

  virtual ~CommonMessagePostService_postMissionItem_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionItem_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionItem_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionItem_presult__isset {
  _CommonMessagePostService_postMissionItem_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionItem_presult__isset;

class CommonMessagePostService_postMissionItem_presult {
 public:


  virtual ~CommonMessagePostService_postMissionItem_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionRequest_args__isset {
  _CommonMessagePostService_postMissionRequest_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionRequest_args__isset;

class CommonMessagePostService_postMissionRequest_args {
 public:

  CommonMessagePostService_postMissionRequest_args() {
  }

  virtual ~CommonMessagePostService_postMissionRequest_args() throw() {}

  MissionRequest msg;

  _CommonMessagePostService_postMissionRequest_args__isset __isset;

  void __set_msg(const MissionRequest& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionRequest_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionRequest_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionRequest_pargs() throw() {}

  const MissionRequest* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionRequest_result__isset {
  _CommonMessagePostService_postMissionRequest_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionRequest_result__isset;

class CommonMessagePostService_postMissionRequest_result {
 public:

  CommonMessagePostService_postMissionRequest_result() {
  }

  virtual ~CommonMessagePostService_postMissionRequest_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionRequest_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionRequest_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionRequest_presult__isset {
  _CommonMessagePostService_postMissionRequest_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionRequest_presult__isset;

class CommonMessagePostService_postMissionRequest_presult {
 public:


  virtual ~CommonMessagePostService_postMissionRequest_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionSetCurrent_args__isset {
  _CommonMessagePostService_postMissionSetCurrent_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionSetCurrent_args__isset;

class CommonMessagePostService_postMissionSetCurrent_args {
 public:

  CommonMessagePostService_postMissionSetCurrent_args() {
  }

  virtual ~CommonMessagePostService_postMissionSetCurrent_args() throw() {}

  MissionSetCurrent msg;

  _CommonMessagePostService_postMissionSetCurrent_args__isset __isset;

  void __set_msg(const MissionSetCurrent& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionSetCurrent_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionSetCurrent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionSetCurrent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionSetCurrent_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionSetCurrent_pargs() throw() {}

  const MissionSetCurrent* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionSetCurrent_result__isset {
  _CommonMessagePostService_postMissionSetCurrent_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionSetCurrent_result__isset;

class CommonMessagePostService_postMissionSetCurrent_result {
 public:

  CommonMessagePostService_postMissionSetCurrent_result() {
  }

  virtual ~CommonMessagePostService_postMissionSetCurrent_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionSetCurrent_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionSetCurrent_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionSetCurrent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionSetCurrent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionSetCurrent_presult__isset {
  _CommonMessagePostService_postMissionSetCurrent_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionSetCurrent_presult__isset;

class CommonMessagePostService_postMissionSetCurrent_presult {
 public:


  virtual ~CommonMessagePostService_postMissionSetCurrent_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionSetCurrent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionCurrent_args__isset {
  _CommonMessagePostService_postMissionCurrent_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionCurrent_args__isset;

class CommonMessagePostService_postMissionCurrent_args {
 public:

  CommonMessagePostService_postMissionCurrent_args() {
  }

  virtual ~CommonMessagePostService_postMissionCurrent_args() throw() {}

  MissionCurrent msg;

  _CommonMessagePostService_postMissionCurrent_args__isset __isset;

  void __set_msg(const MissionCurrent& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionCurrent_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionCurrent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionCurrent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionCurrent_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionCurrent_pargs() throw() {}

  const MissionCurrent* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionCurrent_result__isset {
  _CommonMessagePostService_postMissionCurrent_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionCurrent_result__isset;

class CommonMessagePostService_postMissionCurrent_result {
 public:

  CommonMessagePostService_postMissionCurrent_result() {
  }

  virtual ~CommonMessagePostService_postMissionCurrent_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionCurrent_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionCurrent_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionCurrent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionCurrent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionCurrent_presult__isset {
  _CommonMessagePostService_postMissionCurrent_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionCurrent_presult__isset;

class CommonMessagePostService_postMissionCurrent_presult {
 public:


  virtual ~CommonMessagePostService_postMissionCurrent_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionCurrent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionRequestList_args__isset {
  _CommonMessagePostService_postMissionRequestList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionRequestList_args__isset;

class CommonMessagePostService_postMissionRequestList_args {
 public:

  CommonMessagePostService_postMissionRequestList_args() {
  }

  virtual ~CommonMessagePostService_postMissionRequestList_args() throw() {}

  MissionRequestList msg;

  _CommonMessagePostService_postMissionRequestList_args__isset __isset;

  void __set_msg(const MissionRequestList& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionRequestList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionRequestList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionRequestList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionRequestList_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionRequestList_pargs() throw() {}

  const MissionRequestList* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionRequestList_result__isset {
  _CommonMessagePostService_postMissionRequestList_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionRequestList_result__isset;

class CommonMessagePostService_postMissionRequestList_result {
 public:

  CommonMessagePostService_postMissionRequestList_result() {
  }

  virtual ~CommonMessagePostService_postMissionRequestList_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionRequestList_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionRequestList_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionRequestList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionRequestList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionRequestList_presult__isset {
  _CommonMessagePostService_postMissionRequestList_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionRequestList_presult__isset;

class CommonMessagePostService_postMissionRequestList_presult {
 public:


  virtual ~CommonMessagePostService_postMissionRequestList_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionRequestList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionCount_args__isset {
  _CommonMessagePostService_postMissionCount_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionCount_args__isset;

class CommonMessagePostService_postMissionCount_args {
 public:

  CommonMessagePostService_postMissionCount_args() {
  }

  virtual ~CommonMessagePostService_postMissionCount_args() throw() {}

  MissionCount msg;

  _CommonMessagePostService_postMissionCount_args__isset __isset;

  void __set_msg(const MissionCount& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionCount_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionCount_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionCount_pargs() throw() {}

  const MissionCount* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionCount_result__isset {
  _CommonMessagePostService_postMissionCount_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionCount_result__isset;

class CommonMessagePostService_postMissionCount_result {
 public:

  CommonMessagePostService_postMissionCount_result() {
  }

  virtual ~CommonMessagePostService_postMissionCount_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionCount_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionCount_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionCount_presult__isset {
  _CommonMessagePostService_postMissionCount_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionCount_presult__isset;

class CommonMessagePostService_postMissionCount_presult {
 public:


  virtual ~CommonMessagePostService_postMissionCount_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionClearAll_args__isset {
  _CommonMessagePostService_postMissionClearAll_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionClearAll_args__isset;

class CommonMessagePostService_postMissionClearAll_args {
 public:

  CommonMessagePostService_postMissionClearAll_args() {
  }

  virtual ~CommonMessagePostService_postMissionClearAll_args() throw() {}

  MissionClearAll msg;

  _CommonMessagePostService_postMissionClearAll_args__isset __isset;

  void __set_msg(const MissionClearAll& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionClearAll_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionClearAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionClearAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionClearAll_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionClearAll_pargs() throw() {}

  const MissionClearAll* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionClearAll_result__isset {
  _CommonMessagePostService_postMissionClearAll_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionClearAll_result__isset;

class CommonMessagePostService_postMissionClearAll_result {
 public:

  CommonMessagePostService_postMissionClearAll_result() {
  }

  virtual ~CommonMessagePostService_postMissionClearAll_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionClearAll_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionClearAll_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionClearAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionClearAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionClearAll_presult__isset {
  _CommonMessagePostService_postMissionClearAll_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionClearAll_presult__isset;

class CommonMessagePostService_postMissionClearAll_presult {
 public:


  virtual ~CommonMessagePostService_postMissionClearAll_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionClearAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionItemReached_args__isset {
  _CommonMessagePostService_postMissionItemReached_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionItemReached_args__isset;

class CommonMessagePostService_postMissionItemReached_args {
 public:

  CommonMessagePostService_postMissionItemReached_args() {
  }

  virtual ~CommonMessagePostService_postMissionItemReached_args() throw() {}

  MissionItemReached msg;

  _CommonMessagePostService_postMissionItemReached_args__isset __isset;

  void __set_msg(const MissionItemReached& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionItemReached_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionItemReached_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionItemReached_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionItemReached_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionItemReached_pargs() throw() {}

  const MissionItemReached* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionItemReached_result__isset {
  _CommonMessagePostService_postMissionItemReached_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionItemReached_result__isset;

class CommonMessagePostService_postMissionItemReached_result {
 public:

  CommonMessagePostService_postMissionItemReached_result() {
  }

  virtual ~CommonMessagePostService_postMissionItemReached_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionItemReached_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionItemReached_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionItemReached_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionItemReached_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionItemReached_presult__isset {
  _CommonMessagePostService_postMissionItemReached_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionItemReached_presult__isset;

class CommonMessagePostService_postMissionItemReached_presult {
 public:


  virtual ~CommonMessagePostService_postMissionItemReached_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionItemReached_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMissionAck_args__isset {
  _CommonMessagePostService_postMissionAck_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMissionAck_args__isset;

class CommonMessagePostService_postMissionAck_args {
 public:

  CommonMessagePostService_postMissionAck_args() {
  }

  virtual ~CommonMessagePostService_postMissionAck_args() throw() {}

  MissionAck msg;

  _CommonMessagePostService_postMissionAck_args__isset __isset;

  void __set_msg(const MissionAck& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMissionAck_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMissionAck_pargs {
 public:


  virtual ~CommonMessagePostService_postMissionAck_pargs() throw() {}

  const MissionAck* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionAck_result__isset {
  _CommonMessagePostService_postMissionAck_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionAck_result__isset;

class CommonMessagePostService_postMissionAck_result {
 public:

  CommonMessagePostService_postMissionAck_result() {
  }

  virtual ~CommonMessagePostService_postMissionAck_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionAck_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMissionAck_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMissionAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMissionAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMissionAck_presult__isset {
  _CommonMessagePostService_postMissionAck_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMissionAck_presult__isset;

class CommonMessagePostService_postMissionAck_presult {
 public:


  virtual ~CommonMessagePostService_postMissionAck_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMissionAck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetGpsGlobalOrigin_args__isset {
  _CommonMessagePostService_postSetGpsGlobalOrigin_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetGpsGlobalOrigin_args__isset;

class CommonMessagePostService_postSetGpsGlobalOrigin_args {
 public:

  CommonMessagePostService_postSetGpsGlobalOrigin_args() {
  }

  virtual ~CommonMessagePostService_postSetGpsGlobalOrigin_args() throw() {}

  SetGpsGlobalOrigin msg;

  _CommonMessagePostService_postSetGpsGlobalOrigin_args__isset __isset;

  void __set_msg(const SetGpsGlobalOrigin& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetGpsGlobalOrigin_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetGpsGlobalOrigin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetGpsGlobalOrigin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetGpsGlobalOrigin_pargs {
 public:


  virtual ~CommonMessagePostService_postSetGpsGlobalOrigin_pargs() throw() {}

  const SetGpsGlobalOrigin* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetGpsGlobalOrigin_result__isset {
  _CommonMessagePostService_postSetGpsGlobalOrigin_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetGpsGlobalOrigin_result__isset;

class CommonMessagePostService_postSetGpsGlobalOrigin_result {
 public:

  CommonMessagePostService_postSetGpsGlobalOrigin_result() {
  }

  virtual ~CommonMessagePostService_postSetGpsGlobalOrigin_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetGpsGlobalOrigin_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetGpsGlobalOrigin_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetGpsGlobalOrigin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetGpsGlobalOrigin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetGpsGlobalOrigin_presult__isset {
  _CommonMessagePostService_postSetGpsGlobalOrigin_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetGpsGlobalOrigin_presult__isset;

class CommonMessagePostService_postSetGpsGlobalOrigin_presult {
 public:


  virtual ~CommonMessagePostService_postSetGpsGlobalOrigin_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetGpsGlobalOrigin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postGpsGlobalOrigin_args__isset {
  _CommonMessagePostService_postGpsGlobalOrigin_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postGpsGlobalOrigin_args__isset;

class CommonMessagePostService_postGpsGlobalOrigin_args {
 public:

  CommonMessagePostService_postGpsGlobalOrigin_args() {
  }

  virtual ~CommonMessagePostService_postGpsGlobalOrigin_args() throw() {}

  GpsGlobalOrigin msg;

  _CommonMessagePostService_postGpsGlobalOrigin_args__isset __isset;

  void __set_msg(const GpsGlobalOrigin& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postGpsGlobalOrigin_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGpsGlobalOrigin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGpsGlobalOrigin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postGpsGlobalOrigin_pargs {
 public:


  virtual ~CommonMessagePostService_postGpsGlobalOrigin_pargs() throw() {}

  const GpsGlobalOrigin* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGpsGlobalOrigin_result__isset {
  _CommonMessagePostService_postGpsGlobalOrigin_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGpsGlobalOrigin_result__isset;

class CommonMessagePostService_postGpsGlobalOrigin_result {
 public:

  CommonMessagePostService_postGpsGlobalOrigin_result() {
  }

  virtual ~CommonMessagePostService_postGpsGlobalOrigin_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGpsGlobalOrigin_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postGpsGlobalOrigin_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGpsGlobalOrigin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGpsGlobalOrigin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGpsGlobalOrigin_presult__isset {
  _CommonMessagePostService_postGpsGlobalOrigin_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGpsGlobalOrigin_presult__isset;

class CommonMessagePostService_postGpsGlobalOrigin_presult {
 public:


  virtual ~CommonMessagePostService_postGpsGlobalOrigin_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGpsGlobalOrigin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetLocalPositionSetpoint_args__isset {
  _CommonMessagePostService_postSetLocalPositionSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetLocalPositionSetpoint_args__isset;

class CommonMessagePostService_postSetLocalPositionSetpoint_args {
 public:

  CommonMessagePostService_postSetLocalPositionSetpoint_args() {
  }

  virtual ~CommonMessagePostService_postSetLocalPositionSetpoint_args() throw() {}

  SetLocalPositionSetpoint msg;

  _CommonMessagePostService_postSetLocalPositionSetpoint_args__isset __isset;

  void __set_msg(const SetLocalPositionSetpoint& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetLocalPositionSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetLocalPositionSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetLocalPositionSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetLocalPositionSetpoint_pargs {
 public:


  virtual ~CommonMessagePostService_postSetLocalPositionSetpoint_pargs() throw() {}

  const SetLocalPositionSetpoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetLocalPositionSetpoint_result__isset {
  _CommonMessagePostService_postSetLocalPositionSetpoint_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetLocalPositionSetpoint_result__isset;

class CommonMessagePostService_postSetLocalPositionSetpoint_result {
 public:

  CommonMessagePostService_postSetLocalPositionSetpoint_result() {
  }

  virtual ~CommonMessagePostService_postSetLocalPositionSetpoint_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetLocalPositionSetpoint_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetLocalPositionSetpoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetLocalPositionSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetLocalPositionSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetLocalPositionSetpoint_presult__isset {
  _CommonMessagePostService_postSetLocalPositionSetpoint_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetLocalPositionSetpoint_presult__isset;

class CommonMessagePostService_postSetLocalPositionSetpoint_presult {
 public:


  virtual ~CommonMessagePostService_postSetLocalPositionSetpoint_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetLocalPositionSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postLocalPositionSetpoint_args__isset {
  _CommonMessagePostService_postLocalPositionSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postLocalPositionSetpoint_args__isset;

class CommonMessagePostService_postLocalPositionSetpoint_args {
 public:

  CommonMessagePostService_postLocalPositionSetpoint_args() {
  }

  virtual ~CommonMessagePostService_postLocalPositionSetpoint_args() throw() {}

  LocalPositionSetpoint msg;

  _CommonMessagePostService_postLocalPositionSetpoint_args__isset __isset;

  void __set_msg(const LocalPositionSetpoint& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postLocalPositionSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postLocalPositionSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postLocalPositionSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postLocalPositionSetpoint_pargs {
 public:


  virtual ~CommonMessagePostService_postLocalPositionSetpoint_pargs() throw() {}

  const LocalPositionSetpoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postLocalPositionSetpoint_result__isset {
  _CommonMessagePostService_postLocalPositionSetpoint_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postLocalPositionSetpoint_result__isset;

class CommonMessagePostService_postLocalPositionSetpoint_result {
 public:

  CommonMessagePostService_postLocalPositionSetpoint_result() {
  }

  virtual ~CommonMessagePostService_postLocalPositionSetpoint_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postLocalPositionSetpoint_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postLocalPositionSetpoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postLocalPositionSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postLocalPositionSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postLocalPositionSetpoint_presult__isset {
  _CommonMessagePostService_postLocalPositionSetpoint_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postLocalPositionSetpoint_presult__isset;

class CommonMessagePostService_postLocalPositionSetpoint_presult {
 public:


  virtual ~CommonMessagePostService_postLocalPositionSetpoint_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postLocalPositionSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postGlobalPositionSetpointInt_args__isset {
  _CommonMessagePostService_postGlobalPositionSetpointInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postGlobalPositionSetpointInt_args__isset;

class CommonMessagePostService_postGlobalPositionSetpointInt_args {
 public:

  CommonMessagePostService_postGlobalPositionSetpointInt_args() {
  }

  virtual ~CommonMessagePostService_postGlobalPositionSetpointInt_args() throw() {}

  GlobalPositionSetpointInt msg;

  _CommonMessagePostService_postGlobalPositionSetpointInt_args__isset __isset;

  void __set_msg(const GlobalPositionSetpointInt& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postGlobalPositionSetpointInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGlobalPositionSetpointInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGlobalPositionSetpointInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postGlobalPositionSetpointInt_pargs {
 public:


  virtual ~CommonMessagePostService_postGlobalPositionSetpointInt_pargs() throw() {}

  const GlobalPositionSetpointInt* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGlobalPositionSetpointInt_result__isset {
  _CommonMessagePostService_postGlobalPositionSetpointInt_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGlobalPositionSetpointInt_result__isset;

class CommonMessagePostService_postGlobalPositionSetpointInt_result {
 public:

  CommonMessagePostService_postGlobalPositionSetpointInt_result() {
  }

  virtual ~CommonMessagePostService_postGlobalPositionSetpointInt_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGlobalPositionSetpointInt_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postGlobalPositionSetpointInt_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGlobalPositionSetpointInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGlobalPositionSetpointInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGlobalPositionSetpointInt_presult__isset {
  _CommonMessagePostService_postGlobalPositionSetpointInt_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGlobalPositionSetpointInt_presult__isset;

class CommonMessagePostService_postGlobalPositionSetpointInt_presult {
 public:


  virtual ~CommonMessagePostService_postGlobalPositionSetpointInt_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGlobalPositionSetpointInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetGlobalPositionSetpointInt_args__isset {
  _CommonMessagePostService_postSetGlobalPositionSetpointInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetGlobalPositionSetpointInt_args__isset;

class CommonMessagePostService_postSetGlobalPositionSetpointInt_args {
 public:

  CommonMessagePostService_postSetGlobalPositionSetpointInt_args() {
  }

  virtual ~CommonMessagePostService_postSetGlobalPositionSetpointInt_args() throw() {}

  SetGlobalPositionSetpointInt msg;

  _CommonMessagePostService_postSetGlobalPositionSetpointInt_args__isset __isset;

  void __set_msg(const SetGlobalPositionSetpointInt& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetGlobalPositionSetpointInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetGlobalPositionSetpointInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetGlobalPositionSetpointInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetGlobalPositionSetpointInt_pargs {
 public:


  virtual ~CommonMessagePostService_postSetGlobalPositionSetpointInt_pargs() throw() {}

  const SetGlobalPositionSetpointInt* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetGlobalPositionSetpointInt_result__isset {
  _CommonMessagePostService_postSetGlobalPositionSetpointInt_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetGlobalPositionSetpointInt_result__isset;

class CommonMessagePostService_postSetGlobalPositionSetpointInt_result {
 public:

  CommonMessagePostService_postSetGlobalPositionSetpointInt_result() {
  }

  virtual ~CommonMessagePostService_postSetGlobalPositionSetpointInt_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetGlobalPositionSetpointInt_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetGlobalPositionSetpointInt_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetGlobalPositionSetpointInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetGlobalPositionSetpointInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetGlobalPositionSetpointInt_presult__isset {
  _CommonMessagePostService_postSetGlobalPositionSetpointInt_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetGlobalPositionSetpointInt_presult__isset;

class CommonMessagePostService_postSetGlobalPositionSetpointInt_presult {
 public:


  virtual ~CommonMessagePostService_postSetGlobalPositionSetpointInt_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetGlobalPositionSetpointInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSafetySetAllowedArea_args__isset {
  _CommonMessagePostService_postSafetySetAllowedArea_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSafetySetAllowedArea_args__isset;

class CommonMessagePostService_postSafetySetAllowedArea_args {
 public:

  CommonMessagePostService_postSafetySetAllowedArea_args() {
  }

  virtual ~CommonMessagePostService_postSafetySetAllowedArea_args() throw() {}

  SafetySetAllowedArea msg;

  _CommonMessagePostService_postSafetySetAllowedArea_args__isset __isset;

  void __set_msg(const SafetySetAllowedArea& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSafetySetAllowedArea_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSafetySetAllowedArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSafetySetAllowedArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSafetySetAllowedArea_pargs {
 public:


  virtual ~CommonMessagePostService_postSafetySetAllowedArea_pargs() throw() {}

  const SafetySetAllowedArea* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSafetySetAllowedArea_result__isset {
  _CommonMessagePostService_postSafetySetAllowedArea_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSafetySetAllowedArea_result__isset;

class CommonMessagePostService_postSafetySetAllowedArea_result {
 public:

  CommonMessagePostService_postSafetySetAllowedArea_result() {
  }

  virtual ~CommonMessagePostService_postSafetySetAllowedArea_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSafetySetAllowedArea_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSafetySetAllowedArea_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSafetySetAllowedArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSafetySetAllowedArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSafetySetAllowedArea_presult__isset {
  _CommonMessagePostService_postSafetySetAllowedArea_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSafetySetAllowedArea_presult__isset;

class CommonMessagePostService_postSafetySetAllowedArea_presult {
 public:


  virtual ~CommonMessagePostService_postSafetySetAllowedArea_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSafetySetAllowedArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSafetyAllowedArea_args__isset {
  _CommonMessagePostService_postSafetyAllowedArea_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSafetyAllowedArea_args__isset;

class CommonMessagePostService_postSafetyAllowedArea_args {
 public:

  CommonMessagePostService_postSafetyAllowedArea_args() {
  }

  virtual ~CommonMessagePostService_postSafetyAllowedArea_args() throw() {}

  SafetyAllowedArea msg;

  _CommonMessagePostService_postSafetyAllowedArea_args__isset __isset;

  void __set_msg(const SafetyAllowedArea& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSafetyAllowedArea_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSafetyAllowedArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSafetyAllowedArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSafetyAllowedArea_pargs {
 public:


  virtual ~CommonMessagePostService_postSafetyAllowedArea_pargs() throw() {}

  const SafetyAllowedArea* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSafetyAllowedArea_result__isset {
  _CommonMessagePostService_postSafetyAllowedArea_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSafetyAllowedArea_result__isset;

class CommonMessagePostService_postSafetyAllowedArea_result {
 public:

  CommonMessagePostService_postSafetyAllowedArea_result() {
  }

  virtual ~CommonMessagePostService_postSafetyAllowedArea_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSafetyAllowedArea_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSafetyAllowedArea_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSafetyAllowedArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSafetyAllowedArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSafetyAllowedArea_presult__isset {
  _CommonMessagePostService_postSafetyAllowedArea_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSafetyAllowedArea_presult__isset;

class CommonMessagePostService_postSafetyAllowedArea_presult {
 public:


  virtual ~CommonMessagePostService_postSafetyAllowedArea_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSafetyAllowedArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetRollPitchYawThrust_args__isset {
  _CommonMessagePostService_postSetRollPitchYawThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetRollPitchYawThrust_args__isset;

class CommonMessagePostService_postSetRollPitchYawThrust_args {
 public:

  CommonMessagePostService_postSetRollPitchYawThrust_args() {
  }

  virtual ~CommonMessagePostService_postSetRollPitchYawThrust_args() throw() {}

  SetRollPitchYawThrust msg;

  _CommonMessagePostService_postSetRollPitchYawThrust_args__isset __isset;

  void __set_msg(const SetRollPitchYawThrust& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetRollPitchYawThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessagePostService_postSetRollPitchYawThrust_pargs() throw() {}

  const SetRollPitchYawThrust* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetRollPitchYawThrust_result__isset {
  _CommonMessagePostService_postSetRollPitchYawThrust_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetRollPitchYawThrust_result__isset;

class CommonMessagePostService_postSetRollPitchYawThrust_result {
 public:

  CommonMessagePostService_postSetRollPitchYawThrust_result() {
  }

  virtual ~CommonMessagePostService_postSetRollPitchYawThrust_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetRollPitchYawThrust_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetRollPitchYawThrust_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetRollPitchYawThrust_presult__isset {
  _CommonMessagePostService_postSetRollPitchYawThrust_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetRollPitchYawThrust_presult__isset;

class CommonMessagePostService_postSetRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessagePostService_postSetRollPitchYawThrust_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetRollPitchYawThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetRollPitchYawSpeedThrust_args__isset {
  _CommonMessagePostService_postSetRollPitchYawSpeedThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetRollPitchYawSpeedThrust_args__isset;

class CommonMessagePostService_postSetRollPitchYawSpeedThrust_args {
 public:

  CommonMessagePostService_postSetRollPitchYawSpeedThrust_args() {
  }

  virtual ~CommonMessagePostService_postSetRollPitchYawSpeedThrust_args() throw() {}

  SetRollPitchYawSpeedThrust msg;

  _CommonMessagePostService_postSetRollPitchYawSpeedThrust_args__isset __isset;

  void __set_msg(const SetRollPitchYawSpeedThrust& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetRollPitchYawSpeedThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetRollPitchYawSpeedThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetRollPitchYawSpeedThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetRollPitchYawSpeedThrust_pargs {
 public:


  virtual ~CommonMessagePostService_postSetRollPitchYawSpeedThrust_pargs() throw() {}

  const SetRollPitchYawSpeedThrust* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetRollPitchYawSpeedThrust_result__isset {
  _CommonMessagePostService_postSetRollPitchYawSpeedThrust_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetRollPitchYawSpeedThrust_result__isset;

class CommonMessagePostService_postSetRollPitchYawSpeedThrust_result {
 public:

  CommonMessagePostService_postSetRollPitchYawSpeedThrust_result() {
  }

  virtual ~CommonMessagePostService_postSetRollPitchYawSpeedThrust_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetRollPitchYawSpeedThrust_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetRollPitchYawSpeedThrust_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetRollPitchYawSpeedThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetRollPitchYawSpeedThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetRollPitchYawSpeedThrust_presult__isset {
  _CommonMessagePostService_postSetRollPitchYawSpeedThrust_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetRollPitchYawSpeedThrust_presult__isset;

class CommonMessagePostService_postSetRollPitchYawSpeedThrust_presult {
 public:


  virtual ~CommonMessagePostService_postSetRollPitchYawSpeedThrust_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetRollPitchYawSpeedThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRollPitchYawThrustSetpoint_args__isset {
  _CommonMessagePostService_postRollPitchYawThrustSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRollPitchYawThrustSetpoint_args__isset;

class CommonMessagePostService_postRollPitchYawThrustSetpoint_args {
 public:

  CommonMessagePostService_postRollPitchYawThrustSetpoint_args() {
  }

  virtual ~CommonMessagePostService_postRollPitchYawThrustSetpoint_args() throw() {}

  RollPitchYawThrustSetpoint msg;

  _CommonMessagePostService_postRollPitchYawThrustSetpoint_args__isset __isset;

  void __set_msg(const RollPitchYawThrustSetpoint& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRollPitchYawThrustSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRollPitchYawThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRollPitchYawThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRollPitchYawThrustSetpoint_pargs {
 public:


  virtual ~CommonMessagePostService_postRollPitchYawThrustSetpoint_pargs() throw() {}

  const RollPitchYawThrustSetpoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRollPitchYawThrustSetpoint_result__isset {
  _CommonMessagePostService_postRollPitchYawThrustSetpoint_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRollPitchYawThrustSetpoint_result__isset;

class CommonMessagePostService_postRollPitchYawThrustSetpoint_result {
 public:

  CommonMessagePostService_postRollPitchYawThrustSetpoint_result() {
  }

  virtual ~CommonMessagePostService_postRollPitchYawThrustSetpoint_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRollPitchYawThrustSetpoint_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRollPitchYawThrustSetpoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRollPitchYawThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRollPitchYawThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRollPitchYawThrustSetpoint_presult__isset {
  _CommonMessagePostService_postRollPitchYawThrustSetpoint_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRollPitchYawThrustSetpoint_presult__isset;

class CommonMessagePostService_postRollPitchYawThrustSetpoint_presult {
 public:


  virtual ~CommonMessagePostService_postRollPitchYawThrustSetpoint_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRollPitchYawThrustSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args__isset {
  _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args__isset;

class CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args {
 public:

  CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args() {
  }

  virtual ~CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args() throw() {}

  RollPitchYawSpeedThrustSetpoint msg;

  _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args__isset __isset;

  void __set_msg(const RollPitchYawSpeedThrustSetpoint& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_pargs {
 public:


  virtual ~CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_pargs() throw() {}

  const RollPitchYawSpeedThrustSetpoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result__isset {
  _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result__isset;

class CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result {
 public:

  CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result() {
  }

  virtual ~CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_presult__isset {
  _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_presult__isset;

class CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_presult {
 public:


  virtual ~CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRollPitchYawSpeedThrustSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetQuadMotorsSetpoint_args__isset {
  _CommonMessagePostService_postSetQuadMotorsSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetQuadMotorsSetpoint_args__isset;

class CommonMessagePostService_postSetQuadMotorsSetpoint_args {
 public:

  CommonMessagePostService_postSetQuadMotorsSetpoint_args() {
  }

  virtual ~CommonMessagePostService_postSetQuadMotorsSetpoint_args() throw() {}

  SetQuadMotorsSetpoint msg;

  _CommonMessagePostService_postSetQuadMotorsSetpoint_args__isset __isset;

  void __set_msg(const SetQuadMotorsSetpoint& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetQuadMotorsSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetQuadMotorsSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetQuadMotorsSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetQuadMotorsSetpoint_pargs {
 public:


  virtual ~CommonMessagePostService_postSetQuadMotorsSetpoint_pargs() throw() {}

  const SetQuadMotorsSetpoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetQuadMotorsSetpoint_result__isset {
  _CommonMessagePostService_postSetQuadMotorsSetpoint_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetQuadMotorsSetpoint_result__isset;

class CommonMessagePostService_postSetQuadMotorsSetpoint_result {
 public:

  CommonMessagePostService_postSetQuadMotorsSetpoint_result() {
  }

  virtual ~CommonMessagePostService_postSetQuadMotorsSetpoint_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetQuadMotorsSetpoint_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetQuadMotorsSetpoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetQuadMotorsSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetQuadMotorsSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetQuadMotorsSetpoint_presult__isset {
  _CommonMessagePostService_postSetQuadMotorsSetpoint_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetQuadMotorsSetpoint_presult__isset;

class CommonMessagePostService_postSetQuadMotorsSetpoint_presult {
 public:


  virtual ~CommonMessagePostService_postSetQuadMotorsSetpoint_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetQuadMotorsSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args__isset {
  _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args__isset;

class CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args {
 public:

  CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args() {
  }

  virtual ~CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args() throw() {}

  SetQuadSwarmRollPitchYawThrust msg;

  _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args__isset __isset;

  void __set_msg(const SetQuadSwarmRollPitchYawThrust& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_pargs() throw() {}

  const SetQuadSwarmRollPitchYawThrust* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result__isset {
  _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result__isset;

class CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result {
 public:

  CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result() {
  }

  virtual ~CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_presult__isset {
  _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_presult__isset;

class CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetQuadSwarmRollPitchYawThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postNavControllerOutput_args__isset {
  _CommonMessagePostService_postNavControllerOutput_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postNavControllerOutput_args__isset;

class CommonMessagePostService_postNavControllerOutput_args {
 public:

  CommonMessagePostService_postNavControllerOutput_args() {
  }

  virtual ~CommonMessagePostService_postNavControllerOutput_args() throw() {}

  NavControllerOutput msg;

  _CommonMessagePostService_postNavControllerOutput_args__isset __isset;

  void __set_msg(const NavControllerOutput& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postNavControllerOutput_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postNavControllerOutput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postNavControllerOutput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postNavControllerOutput_pargs {
 public:


  virtual ~CommonMessagePostService_postNavControllerOutput_pargs() throw() {}

  const NavControllerOutput* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postNavControllerOutput_result__isset {
  _CommonMessagePostService_postNavControllerOutput_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postNavControllerOutput_result__isset;

class CommonMessagePostService_postNavControllerOutput_result {
 public:

  CommonMessagePostService_postNavControllerOutput_result() {
  }

  virtual ~CommonMessagePostService_postNavControllerOutput_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postNavControllerOutput_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postNavControllerOutput_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postNavControllerOutput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postNavControllerOutput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postNavControllerOutput_presult__isset {
  _CommonMessagePostService_postNavControllerOutput_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postNavControllerOutput_presult__isset;

class CommonMessagePostService_postNavControllerOutput_presult {
 public:


  virtual ~CommonMessagePostService_postNavControllerOutput_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postNavControllerOutput_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args__isset {
  _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args__isset;

class CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args {
 public:

  CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args() {
  }

  virtual ~CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args() throw() {}

  SetQuadSwarmLedRollPitchYawThrust msg;

  _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args__isset __isset;

  void __set_msg(const SetQuadSwarmLedRollPitchYawThrust& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_pargs() throw() {}

  const SetQuadSwarmLedRollPitchYawThrust* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result__isset {
  _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result__isset;

class CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result {
 public:

  CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result() {
  }

  virtual ~CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_presult__isset {
  _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_presult__isset;

class CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetQuadSwarmLedRollPitchYawThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postStateCorrection_args__isset {
  _CommonMessagePostService_postStateCorrection_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postStateCorrection_args__isset;

class CommonMessagePostService_postStateCorrection_args {
 public:

  CommonMessagePostService_postStateCorrection_args() {
  }

  virtual ~CommonMessagePostService_postStateCorrection_args() throw() {}

  StateCorrection msg;

  _CommonMessagePostService_postStateCorrection_args__isset __isset;

  void __set_msg(const StateCorrection& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postStateCorrection_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postStateCorrection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postStateCorrection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postStateCorrection_pargs {
 public:


  virtual ~CommonMessagePostService_postStateCorrection_pargs() throw() {}

  const StateCorrection* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postStateCorrection_result__isset {
  _CommonMessagePostService_postStateCorrection_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postStateCorrection_result__isset;

class CommonMessagePostService_postStateCorrection_result {
 public:

  CommonMessagePostService_postStateCorrection_result() {
  }

  virtual ~CommonMessagePostService_postStateCorrection_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postStateCorrection_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postStateCorrection_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postStateCorrection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postStateCorrection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postStateCorrection_presult__isset {
  _CommonMessagePostService_postStateCorrection_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postStateCorrection_presult__isset;

class CommonMessagePostService_postStateCorrection_presult {
 public:


  virtual ~CommonMessagePostService_postStateCorrection_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postStateCorrection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRequestDataStream_args__isset {
  _CommonMessagePostService_postRequestDataStream_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRequestDataStream_args__isset;

class CommonMessagePostService_postRequestDataStream_args {
 public:

  CommonMessagePostService_postRequestDataStream_args() {
  }

  virtual ~CommonMessagePostService_postRequestDataStream_args() throw() {}

  RequestDataStream msg;

  _CommonMessagePostService_postRequestDataStream_args__isset __isset;

  void __set_msg(const RequestDataStream& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRequestDataStream_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRequestDataStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRequestDataStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRequestDataStream_pargs {
 public:


  virtual ~CommonMessagePostService_postRequestDataStream_pargs() throw() {}

  const RequestDataStream* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRequestDataStream_result__isset {
  _CommonMessagePostService_postRequestDataStream_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRequestDataStream_result__isset;

class CommonMessagePostService_postRequestDataStream_result {
 public:

  CommonMessagePostService_postRequestDataStream_result() {
  }

  virtual ~CommonMessagePostService_postRequestDataStream_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRequestDataStream_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRequestDataStream_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRequestDataStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRequestDataStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRequestDataStream_presult__isset {
  _CommonMessagePostService_postRequestDataStream_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRequestDataStream_presult__isset;

class CommonMessagePostService_postRequestDataStream_presult {
 public:


  virtual ~CommonMessagePostService_postRequestDataStream_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRequestDataStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postDataStream_args__isset {
  _CommonMessagePostService_postDataStream_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postDataStream_args__isset;

class CommonMessagePostService_postDataStream_args {
 public:

  CommonMessagePostService_postDataStream_args() {
  }

  virtual ~CommonMessagePostService_postDataStream_args() throw() {}

  DataStream msg;

  _CommonMessagePostService_postDataStream_args__isset __isset;

  void __set_msg(const DataStream& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postDataStream_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postDataStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postDataStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postDataStream_pargs {
 public:


  virtual ~CommonMessagePostService_postDataStream_pargs() throw() {}

  const DataStream* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postDataStream_result__isset {
  _CommonMessagePostService_postDataStream_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postDataStream_result__isset;

class CommonMessagePostService_postDataStream_result {
 public:

  CommonMessagePostService_postDataStream_result() {
  }

  virtual ~CommonMessagePostService_postDataStream_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postDataStream_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postDataStream_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postDataStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postDataStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postDataStream_presult__isset {
  _CommonMessagePostService_postDataStream_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postDataStream_presult__isset;

class CommonMessagePostService_postDataStream_presult {
 public:


  virtual ~CommonMessagePostService_postDataStream_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postDataStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postManualControl_args__isset {
  _CommonMessagePostService_postManualControl_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postManualControl_args__isset;

class CommonMessagePostService_postManualControl_args {
 public:

  CommonMessagePostService_postManualControl_args() {
  }

  virtual ~CommonMessagePostService_postManualControl_args() throw() {}

  ManualControl msg;

  _CommonMessagePostService_postManualControl_args__isset __isset;

  void __set_msg(const ManualControl& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postManualControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postManualControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postManualControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postManualControl_pargs {
 public:


  virtual ~CommonMessagePostService_postManualControl_pargs() throw() {}

  const ManualControl* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postManualControl_result__isset {
  _CommonMessagePostService_postManualControl_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postManualControl_result__isset;

class CommonMessagePostService_postManualControl_result {
 public:

  CommonMessagePostService_postManualControl_result() {
  }

  virtual ~CommonMessagePostService_postManualControl_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postManualControl_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postManualControl_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postManualControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postManualControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postManualControl_presult__isset {
  _CommonMessagePostService_postManualControl_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postManualControl_presult__isset;

class CommonMessagePostService_postManualControl_presult {
 public:


  virtual ~CommonMessagePostService_postManualControl_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postManualControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRcChannelsOverride_args__isset {
  _CommonMessagePostService_postRcChannelsOverride_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRcChannelsOverride_args__isset;

class CommonMessagePostService_postRcChannelsOverride_args {
 public:

  CommonMessagePostService_postRcChannelsOverride_args() {
  }

  virtual ~CommonMessagePostService_postRcChannelsOverride_args() throw() {}

  RcChannelsOverride msg;

  _CommonMessagePostService_postRcChannelsOverride_args__isset __isset;

  void __set_msg(const RcChannelsOverride& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRcChannelsOverride_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRcChannelsOverride_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRcChannelsOverride_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRcChannelsOverride_pargs {
 public:


  virtual ~CommonMessagePostService_postRcChannelsOverride_pargs() throw() {}

  const RcChannelsOverride* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRcChannelsOverride_result__isset {
  _CommonMessagePostService_postRcChannelsOverride_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRcChannelsOverride_result__isset;

class CommonMessagePostService_postRcChannelsOverride_result {
 public:

  CommonMessagePostService_postRcChannelsOverride_result() {
  }

  virtual ~CommonMessagePostService_postRcChannelsOverride_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRcChannelsOverride_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRcChannelsOverride_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRcChannelsOverride_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRcChannelsOverride_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRcChannelsOverride_presult__isset {
  _CommonMessagePostService_postRcChannelsOverride_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRcChannelsOverride_presult__isset;

class CommonMessagePostService_postRcChannelsOverride_presult {
 public:


  virtual ~CommonMessagePostService_postRcChannelsOverride_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRcChannelsOverride_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postVfrHud_args__isset {
  _CommonMessagePostService_postVfrHud_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postVfrHud_args__isset;

class CommonMessagePostService_postVfrHud_args {
 public:

  CommonMessagePostService_postVfrHud_args() {
  }

  virtual ~CommonMessagePostService_postVfrHud_args() throw() {}

  VfrHud msg;

  _CommonMessagePostService_postVfrHud_args__isset __isset;

  void __set_msg(const VfrHud& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postVfrHud_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postVfrHud_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postVfrHud_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postVfrHud_pargs {
 public:


  virtual ~CommonMessagePostService_postVfrHud_pargs() throw() {}

  const VfrHud* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postVfrHud_result__isset {
  _CommonMessagePostService_postVfrHud_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postVfrHud_result__isset;

class CommonMessagePostService_postVfrHud_result {
 public:

  CommonMessagePostService_postVfrHud_result() {
  }

  virtual ~CommonMessagePostService_postVfrHud_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postVfrHud_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postVfrHud_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postVfrHud_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postVfrHud_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postVfrHud_presult__isset {
  _CommonMessagePostService_postVfrHud_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postVfrHud_presult__isset;

class CommonMessagePostService_postVfrHud_presult {
 public:


  virtual ~CommonMessagePostService_postVfrHud_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postVfrHud_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postCommandLong_args__isset {
  _CommonMessagePostService_postCommandLong_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postCommandLong_args__isset;

class CommonMessagePostService_postCommandLong_args {
 public:

  CommonMessagePostService_postCommandLong_args() {
  }

  virtual ~CommonMessagePostService_postCommandLong_args() throw() {}

  CommandLong msg;

  _CommonMessagePostService_postCommandLong_args__isset __isset;

  void __set_msg(const CommandLong& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postCommandLong_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postCommandLong_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postCommandLong_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postCommandLong_pargs {
 public:


  virtual ~CommonMessagePostService_postCommandLong_pargs() throw() {}

  const CommandLong* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postCommandLong_result__isset {
  _CommonMessagePostService_postCommandLong_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postCommandLong_result__isset;

class CommonMessagePostService_postCommandLong_result {
 public:

  CommonMessagePostService_postCommandLong_result() {
  }

  virtual ~CommonMessagePostService_postCommandLong_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postCommandLong_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postCommandLong_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postCommandLong_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postCommandLong_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postCommandLong_presult__isset {
  _CommonMessagePostService_postCommandLong_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postCommandLong_presult__isset;

class CommonMessagePostService_postCommandLong_presult {
 public:


  virtual ~CommonMessagePostService_postCommandLong_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postCommandLong_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postCommandAck_args__isset {
  _CommonMessagePostService_postCommandAck_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postCommandAck_args__isset;

class CommonMessagePostService_postCommandAck_args {
 public:

  CommonMessagePostService_postCommandAck_args() {
  }

  virtual ~CommonMessagePostService_postCommandAck_args() throw() {}

  CommandAck msg;

  _CommonMessagePostService_postCommandAck_args__isset __isset;

  void __set_msg(const CommandAck& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postCommandAck_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postCommandAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postCommandAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postCommandAck_pargs {
 public:


  virtual ~CommonMessagePostService_postCommandAck_pargs() throw() {}

  const CommandAck* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postCommandAck_result__isset {
  _CommonMessagePostService_postCommandAck_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postCommandAck_result__isset;

class CommonMessagePostService_postCommandAck_result {
 public:

  CommonMessagePostService_postCommandAck_result() {
  }

  virtual ~CommonMessagePostService_postCommandAck_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postCommandAck_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postCommandAck_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postCommandAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postCommandAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postCommandAck_presult__isset {
  _CommonMessagePostService_postCommandAck_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postCommandAck_presult__isset;

class CommonMessagePostService_postCommandAck_presult {
 public:


  virtual ~CommonMessagePostService_postCommandAck_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postCommandAck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args__isset {
  _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args__isset;

class CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args {
 public:

  CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args() {
  }

  virtual ~CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args() throw() {}

  RollPitchYawRatesThrustSetpoint msg;

  _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args__isset __isset;

  void __set_msg(const RollPitchYawRatesThrustSetpoint& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_pargs {
 public:


  virtual ~CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_pargs() throw() {}

  const RollPitchYawRatesThrustSetpoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result__isset {
  _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result__isset;

class CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result {
 public:

  CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result() {
  }

  virtual ~CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_presult__isset {
  _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_presult__isset;

class CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_presult {
 public:


  virtual ~CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postRollPitchYawRatesThrustSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postManualSetpoint_args__isset {
  _CommonMessagePostService_postManualSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postManualSetpoint_args__isset;

class CommonMessagePostService_postManualSetpoint_args {
 public:

  CommonMessagePostService_postManualSetpoint_args() {
  }

  virtual ~CommonMessagePostService_postManualSetpoint_args() throw() {}

  ManualSetpoint msg;

  _CommonMessagePostService_postManualSetpoint_args__isset __isset;

  void __set_msg(const ManualSetpoint& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postManualSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postManualSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postManualSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postManualSetpoint_pargs {
 public:


  virtual ~CommonMessagePostService_postManualSetpoint_pargs() throw() {}

  const ManualSetpoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postManualSetpoint_result__isset {
  _CommonMessagePostService_postManualSetpoint_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postManualSetpoint_result__isset;

class CommonMessagePostService_postManualSetpoint_result {
 public:

  CommonMessagePostService_postManualSetpoint_result() {
  }

  virtual ~CommonMessagePostService_postManualSetpoint_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postManualSetpoint_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postManualSetpoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postManualSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postManualSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postManualSetpoint_presult__isset {
  _CommonMessagePostService_postManualSetpoint_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postManualSetpoint_presult__isset;

class CommonMessagePostService_postManualSetpoint_presult {
 public:


  virtual ~CommonMessagePostService_postManualSetpoint_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postManualSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args__isset {
  _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args__isset;

class CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args {
 public:

  CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args() {
  }

  virtual ~CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args() throw() {}

  LocalPositionNedSystemGlobalOffset msg;

  _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args__isset __isset;

  void __set_msg(const LocalPositionNedSystemGlobalOffset& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_pargs {
 public:


  virtual ~CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_pargs() throw() {}

  const LocalPositionNedSystemGlobalOffset* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result__isset {
  _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result__isset;

class CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result {
 public:

  CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result() {
  }

  virtual ~CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_presult__isset {
  _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_presult__isset;

class CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_presult {
 public:


  virtual ~CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postLocalPositionNedSystemGlobalOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postHilState_args__isset {
  _CommonMessagePostService_postHilState_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postHilState_args__isset;

class CommonMessagePostService_postHilState_args {
 public:

  CommonMessagePostService_postHilState_args() {
  }

  virtual ~CommonMessagePostService_postHilState_args() throw() {}

  HilState msg;

  _CommonMessagePostService_postHilState_args__isset __isset;

  void __set_msg(const HilState& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postHilState_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHilState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHilState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postHilState_pargs {
 public:


  virtual ~CommonMessagePostService_postHilState_pargs() throw() {}

  const HilState* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHilState_result__isset {
  _CommonMessagePostService_postHilState_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHilState_result__isset;

class CommonMessagePostService_postHilState_result {
 public:

  CommonMessagePostService_postHilState_result() {
  }

  virtual ~CommonMessagePostService_postHilState_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHilState_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postHilState_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHilState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHilState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHilState_presult__isset {
  _CommonMessagePostService_postHilState_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHilState_presult__isset;

class CommonMessagePostService_postHilState_presult {
 public:


  virtual ~CommonMessagePostService_postHilState_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHilState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postHilControls_args__isset {
  _CommonMessagePostService_postHilControls_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postHilControls_args__isset;

class CommonMessagePostService_postHilControls_args {
 public:

  CommonMessagePostService_postHilControls_args() {
  }

  virtual ~CommonMessagePostService_postHilControls_args() throw() {}

  HilControls msg;

  _CommonMessagePostService_postHilControls_args__isset __isset;

  void __set_msg(const HilControls& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postHilControls_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHilControls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHilControls_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postHilControls_pargs {
 public:


  virtual ~CommonMessagePostService_postHilControls_pargs() throw() {}

  const HilControls* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHilControls_result__isset {
  _CommonMessagePostService_postHilControls_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHilControls_result__isset;

class CommonMessagePostService_postHilControls_result {
 public:

  CommonMessagePostService_postHilControls_result() {
  }

  virtual ~CommonMessagePostService_postHilControls_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHilControls_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postHilControls_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHilControls_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHilControls_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHilControls_presult__isset {
  _CommonMessagePostService_postHilControls_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHilControls_presult__isset;

class CommonMessagePostService_postHilControls_presult {
 public:


  virtual ~CommonMessagePostService_postHilControls_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHilControls_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postHilRcInputsRaw_args__isset {
  _CommonMessagePostService_postHilRcInputsRaw_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postHilRcInputsRaw_args__isset;

class CommonMessagePostService_postHilRcInputsRaw_args {
 public:

  CommonMessagePostService_postHilRcInputsRaw_args() {
  }

  virtual ~CommonMessagePostService_postHilRcInputsRaw_args() throw() {}

  HilRcInputsRaw msg;

  _CommonMessagePostService_postHilRcInputsRaw_args__isset __isset;

  void __set_msg(const HilRcInputsRaw& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postHilRcInputsRaw_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHilRcInputsRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHilRcInputsRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postHilRcInputsRaw_pargs {
 public:


  virtual ~CommonMessagePostService_postHilRcInputsRaw_pargs() throw() {}

  const HilRcInputsRaw* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHilRcInputsRaw_result__isset {
  _CommonMessagePostService_postHilRcInputsRaw_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHilRcInputsRaw_result__isset;

class CommonMessagePostService_postHilRcInputsRaw_result {
 public:

  CommonMessagePostService_postHilRcInputsRaw_result() {
  }

  virtual ~CommonMessagePostService_postHilRcInputsRaw_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHilRcInputsRaw_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postHilRcInputsRaw_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHilRcInputsRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHilRcInputsRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHilRcInputsRaw_presult__isset {
  _CommonMessagePostService_postHilRcInputsRaw_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHilRcInputsRaw_presult__isset;

class CommonMessagePostService_postHilRcInputsRaw_presult {
 public:


  virtual ~CommonMessagePostService_postHilRcInputsRaw_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHilRcInputsRaw_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postOpticalFlow_args__isset {
  _CommonMessagePostService_postOpticalFlow_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postOpticalFlow_args__isset;

class CommonMessagePostService_postOpticalFlow_args {
 public:

  CommonMessagePostService_postOpticalFlow_args() {
  }

  virtual ~CommonMessagePostService_postOpticalFlow_args() throw() {}

  OpticalFlow msg;

  _CommonMessagePostService_postOpticalFlow_args__isset __isset;

  void __set_msg(const OpticalFlow& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postOpticalFlow_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postOpticalFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postOpticalFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postOpticalFlow_pargs {
 public:


  virtual ~CommonMessagePostService_postOpticalFlow_pargs() throw() {}

  const OpticalFlow* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postOpticalFlow_result__isset {
  _CommonMessagePostService_postOpticalFlow_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postOpticalFlow_result__isset;

class CommonMessagePostService_postOpticalFlow_result {
 public:

  CommonMessagePostService_postOpticalFlow_result() {
  }

  virtual ~CommonMessagePostService_postOpticalFlow_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postOpticalFlow_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postOpticalFlow_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postOpticalFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postOpticalFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postOpticalFlow_presult__isset {
  _CommonMessagePostService_postOpticalFlow_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postOpticalFlow_presult__isset;

class CommonMessagePostService_postOpticalFlow_presult {
 public:


  virtual ~CommonMessagePostService_postOpticalFlow_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postOpticalFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postGlobalVisionPositionEstimate_args__isset {
  _CommonMessagePostService_postGlobalVisionPositionEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postGlobalVisionPositionEstimate_args__isset;

class CommonMessagePostService_postGlobalVisionPositionEstimate_args {
 public:

  CommonMessagePostService_postGlobalVisionPositionEstimate_args() {
  }

  virtual ~CommonMessagePostService_postGlobalVisionPositionEstimate_args() throw() {}

  GlobalVisionPositionEstimate msg;

  _CommonMessagePostService_postGlobalVisionPositionEstimate_args__isset __isset;

  void __set_msg(const GlobalVisionPositionEstimate& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postGlobalVisionPositionEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGlobalVisionPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGlobalVisionPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postGlobalVisionPositionEstimate_pargs {
 public:


  virtual ~CommonMessagePostService_postGlobalVisionPositionEstimate_pargs() throw() {}

  const GlobalVisionPositionEstimate* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGlobalVisionPositionEstimate_result__isset {
  _CommonMessagePostService_postGlobalVisionPositionEstimate_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGlobalVisionPositionEstimate_result__isset;

class CommonMessagePostService_postGlobalVisionPositionEstimate_result {
 public:

  CommonMessagePostService_postGlobalVisionPositionEstimate_result() {
  }

  virtual ~CommonMessagePostService_postGlobalVisionPositionEstimate_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGlobalVisionPositionEstimate_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postGlobalVisionPositionEstimate_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postGlobalVisionPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postGlobalVisionPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postGlobalVisionPositionEstimate_presult__isset {
  _CommonMessagePostService_postGlobalVisionPositionEstimate_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postGlobalVisionPositionEstimate_presult__isset;

class CommonMessagePostService_postGlobalVisionPositionEstimate_presult {
 public:


  virtual ~CommonMessagePostService_postGlobalVisionPositionEstimate_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postGlobalVisionPositionEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postVisionPositionEstimate_args__isset {
  _CommonMessagePostService_postVisionPositionEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postVisionPositionEstimate_args__isset;

class CommonMessagePostService_postVisionPositionEstimate_args {
 public:

  CommonMessagePostService_postVisionPositionEstimate_args() {
  }

  virtual ~CommonMessagePostService_postVisionPositionEstimate_args() throw() {}

  VisionPositionEstimate msg;

  _CommonMessagePostService_postVisionPositionEstimate_args__isset __isset;

  void __set_msg(const VisionPositionEstimate& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postVisionPositionEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postVisionPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postVisionPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postVisionPositionEstimate_pargs {
 public:


  virtual ~CommonMessagePostService_postVisionPositionEstimate_pargs() throw() {}

  const VisionPositionEstimate* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postVisionPositionEstimate_result__isset {
  _CommonMessagePostService_postVisionPositionEstimate_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postVisionPositionEstimate_result__isset;

class CommonMessagePostService_postVisionPositionEstimate_result {
 public:

  CommonMessagePostService_postVisionPositionEstimate_result() {
  }

  virtual ~CommonMessagePostService_postVisionPositionEstimate_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postVisionPositionEstimate_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postVisionPositionEstimate_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postVisionPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postVisionPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postVisionPositionEstimate_presult__isset {
  _CommonMessagePostService_postVisionPositionEstimate_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postVisionPositionEstimate_presult__isset;

class CommonMessagePostService_postVisionPositionEstimate_presult {
 public:


  virtual ~CommonMessagePostService_postVisionPositionEstimate_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postVisionPositionEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postVisionSpeedEstimate_args__isset {
  _CommonMessagePostService_postVisionSpeedEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postVisionSpeedEstimate_args__isset;

class CommonMessagePostService_postVisionSpeedEstimate_args {
 public:

  CommonMessagePostService_postVisionSpeedEstimate_args() {
  }

  virtual ~CommonMessagePostService_postVisionSpeedEstimate_args() throw() {}

  VisionSpeedEstimate msg;

  _CommonMessagePostService_postVisionSpeedEstimate_args__isset __isset;

  void __set_msg(const VisionSpeedEstimate& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postVisionSpeedEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postVisionSpeedEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postVisionSpeedEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postVisionSpeedEstimate_pargs {
 public:


  virtual ~CommonMessagePostService_postVisionSpeedEstimate_pargs() throw() {}

  const VisionSpeedEstimate* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postVisionSpeedEstimate_result__isset {
  _CommonMessagePostService_postVisionSpeedEstimate_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postVisionSpeedEstimate_result__isset;

class CommonMessagePostService_postVisionSpeedEstimate_result {
 public:

  CommonMessagePostService_postVisionSpeedEstimate_result() {
  }

  virtual ~CommonMessagePostService_postVisionSpeedEstimate_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postVisionSpeedEstimate_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postVisionSpeedEstimate_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postVisionSpeedEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postVisionSpeedEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postVisionSpeedEstimate_presult__isset {
  _CommonMessagePostService_postVisionSpeedEstimate_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postVisionSpeedEstimate_presult__isset;

class CommonMessagePostService_postVisionSpeedEstimate_presult {
 public:


  virtual ~CommonMessagePostService_postVisionSpeedEstimate_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postVisionSpeedEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postViconPositionEstimate_args__isset {
  _CommonMessagePostService_postViconPositionEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postViconPositionEstimate_args__isset;

class CommonMessagePostService_postViconPositionEstimate_args {
 public:

  CommonMessagePostService_postViconPositionEstimate_args() {
  }

  virtual ~CommonMessagePostService_postViconPositionEstimate_args() throw() {}

  ViconPositionEstimate msg;

  _CommonMessagePostService_postViconPositionEstimate_args__isset __isset;

  void __set_msg(const ViconPositionEstimate& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postViconPositionEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postViconPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postViconPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postViconPositionEstimate_pargs {
 public:


  virtual ~CommonMessagePostService_postViconPositionEstimate_pargs() throw() {}

  const ViconPositionEstimate* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postViconPositionEstimate_result__isset {
  _CommonMessagePostService_postViconPositionEstimate_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postViconPositionEstimate_result__isset;

class CommonMessagePostService_postViconPositionEstimate_result {
 public:

  CommonMessagePostService_postViconPositionEstimate_result() {
  }

  virtual ~CommonMessagePostService_postViconPositionEstimate_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postViconPositionEstimate_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postViconPositionEstimate_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postViconPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postViconPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postViconPositionEstimate_presult__isset {
  _CommonMessagePostService_postViconPositionEstimate_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postViconPositionEstimate_presult__isset;

class CommonMessagePostService_postViconPositionEstimate_presult {
 public:


  virtual ~CommonMessagePostService_postViconPositionEstimate_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postViconPositionEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postHighresImu_args__isset {
  _CommonMessagePostService_postHighresImu_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postHighresImu_args__isset;

class CommonMessagePostService_postHighresImu_args {
 public:

  CommonMessagePostService_postHighresImu_args() {
  }

  virtual ~CommonMessagePostService_postHighresImu_args() throw() {}

  HighresImu msg;

  _CommonMessagePostService_postHighresImu_args__isset __isset;

  void __set_msg(const HighresImu& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postHighresImu_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHighresImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHighresImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postHighresImu_pargs {
 public:


  virtual ~CommonMessagePostService_postHighresImu_pargs() throw() {}

  const HighresImu* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHighresImu_result__isset {
  _CommonMessagePostService_postHighresImu_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHighresImu_result__isset;

class CommonMessagePostService_postHighresImu_result {
 public:

  CommonMessagePostService_postHighresImu_result() {
  }

  virtual ~CommonMessagePostService_postHighresImu_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHighresImu_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postHighresImu_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postHighresImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postHighresImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postHighresImu_presult__isset {
  _CommonMessagePostService_postHighresImu_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postHighresImu_presult__isset;

class CommonMessagePostService_postHighresImu_presult {
 public:


  virtual ~CommonMessagePostService_postHighresImu_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postHighresImu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postOmnidirectionalFlow_args__isset {
  _CommonMessagePostService_postOmnidirectionalFlow_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postOmnidirectionalFlow_args__isset;

class CommonMessagePostService_postOmnidirectionalFlow_args {
 public:

  CommonMessagePostService_postOmnidirectionalFlow_args() {
  }

  virtual ~CommonMessagePostService_postOmnidirectionalFlow_args() throw() {}

  OmnidirectionalFlow msg;

  _CommonMessagePostService_postOmnidirectionalFlow_args__isset __isset;

  void __set_msg(const OmnidirectionalFlow& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postOmnidirectionalFlow_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postOmnidirectionalFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postOmnidirectionalFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postOmnidirectionalFlow_pargs {
 public:


  virtual ~CommonMessagePostService_postOmnidirectionalFlow_pargs() throw() {}

  const OmnidirectionalFlow* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postOmnidirectionalFlow_result__isset {
  _CommonMessagePostService_postOmnidirectionalFlow_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postOmnidirectionalFlow_result__isset;

class CommonMessagePostService_postOmnidirectionalFlow_result {
 public:

  CommonMessagePostService_postOmnidirectionalFlow_result() {
  }

  virtual ~CommonMessagePostService_postOmnidirectionalFlow_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postOmnidirectionalFlow_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postOmnidirectionalFlow_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postOmnidirectionalFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postOmnidirectionalFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postOmnidirectionalFlow_presult__isset {
  _CommonMessagePostService_postOmnidirectionalFlow_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postOmnidirectionalFlow_presult__isset;

class CommonMessagePostService_postOmnidirectionalFlow_presult {
 public:


  virtual ~CommonMessagePostService_postOmnidirectionalFlow_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postOmnidirectionalFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postFileTransferStart_args__isset {
  _CommonMessagePostService_postFileTransferStart_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postFileTransferStart_args__isset;

class CommonMessagePostService_postFileTransferStart_args {
 public:

  CommonMessagePostService_postFileTransferStart_args() {
  }

  virtual ~CommonMessagePostService_postFileTransferStart_args() throw() {}

  FileTransferStart msg;

  _CommonMessagePostService_postFileTransferStart_args__isset __isset;

  void __set_msg(const FileTransferStart& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postFileTransferStart_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postFileTransferStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postFileTransferStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postFileTransferStart_pargs {
 public:


  virtual ~CommonMessagePostService_postFileTransferStart_pargs() throw() {}

  const FileTransferStart* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postFileTransferStart_result__isset {
  _CommonMessagePostService_postFileTransferStart_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postFileTransferStart_result__isset;

class CommonMessagePostService_postFileTransferStart_result {
 public:

  CommonMessagePostService_postFileTransferStart_result() {
  }

  virtual ~CommonMessagePostService_postFileTransferStart_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postFileTransferStart_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postFileTransferStart_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postFileTransferStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postFileTransferStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postFileTransferStart_presult__isset {
  _CommonMessagePostService_postFileTransferStart_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postFileTransferStart_presult__isset;

class CommonMessagePostService_postFileTransferStart_presult {
 public:


  virtual ~CommonMessagePostService_postFileTransferStart_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postFileTransferStart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postFileTransferDirList_args__isset {
  _CommonMessagePostService_postFileTransferDirList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postFileTransferDirList_args__isset;

class CommonMessagePostService_postFileTransferDirList_args {
 public:

  CommonMessagePostService_postFileTransferDirList_args() {
  }

  virtual ~CommonMessagePostService_postFileTransferDirList_args() throw() {}

  FileTransferDirList msg;

  _CommonMessagePostService_postFileTransferDirList_args__isset __isset;

  void __set_msg(const FileTransferDirList& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postFileTransferDirList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postFileTransferDirList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postFileTransferDirList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postFileTransferDirList_pargs {
 public:


  virtual ~CommonMessagePostService_postFileTransferDirList_pargs() throw() {}

  const FileTransferDirList* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postFileTransferDirList_result__isset {
  _CommonMessagePostService_postFileTransferDirList_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postFileTransferDirList_result__isset;

class CommonMessagePostService_postFileTransferDirList_result {
 public:

  CommonMessagePostService_postFileTransferDirList_result() {
  }

  virtual ~CommonMessagePostService_postFileTransferDirList_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postFileTransferDirList_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postFileTransferDirList_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postFileTransferDirList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postFileTransferDirList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postFileTransferDirList_presult__isset {
  _CommonMessagePostService_postFileTransferDirList_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postFileTransferDirList_presult__isset;

class CommonMessagePostService_postFileTransferDirList_presult {
 public:


  virtual ~CommonMessagePostService_postFileTransferDirList_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postFileTransferDirList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postFileTransferRes_args__isset {
  _CommonMessagePostService_postFileTransferRes_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postFileTransferRes_args__isset;

class CommonMessagePostService_postFileTransferRes_args {
 public:

  CommonMessagePostService_postFileTransferRes_args() {
  }

  virtual ~CommonMessagePostService_postFileTransferRes_args() throw() {}

  FileTransferRes msg;

  _CommonMessagePostService_postFileTransferRes_args__isset __isset;

  void __set_msg(const FileTransferRes& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postFileTransferRes_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postFileTransferRes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postFileTransferRes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postFileTransferRes_pargs {
 public:


  virtual ~CommonMessagePostService_postFileTransferRes_pargs() throw() {}

  const FileTransferRes* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postFileTransferRes_result__isset {
  _CommonMessagePostService_postFileTransferRes_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postFileTransferRes_result__isset;

class CommonMessagePostService_postFileTransferRes_result {
 public:

  CommonMessagePostService_postFileTransferRes_result() {
  }

  virtual ~CommonMessagePostService_postFileTransferRes_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postFileTransferRes_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postFileTransferRes_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postFileTransferRes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postFileTransferRes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postFileTransferRes_presult__isset {
  _CommonMessagePostService_postFileTransferRes_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postFileTransferRes_presult__isset;

class CommonMessagePostService_postFileTransferRes_presult {
 public:


  virtual ~CommonMessagePostService_postFileTransferRes_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postFileTransferRes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postBatteryStatus_args__isset {
  _CommonMessagePostService_postBatteryStatus_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postBatteryStatus_args__isset;

class CommonMessagePostService_postBatteryStatus_args {
 public:

  CommonMessagePostService_postBatteryStatus_args() {
  }

  virtual ~CommonMessagePostService_postBatteryStatus_args() throw() {}

  BatteryStatus msg;

  _CommonMessagePostService_postBatteryStatus_args__isset __isset;

  void __set_msg(const BatteryStatus& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postBatteryStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postBatteryStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postBatteryStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postBatteryStatus_pargs {
 public:


  virtual ~CommonMessagePostService_postBatteryStatus_pargs() throw() {}

  const BatteryStatus* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postBatteryStatus_result__isset {
  _CommonMessagePostService_postBatteryStatus_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postBatteryStatus_result__isset;

class CommonMessagePostService_postBatteryStatus_result {
 public:

  CommonMessagePostService_postBatteryStatus_result() {
  }

  virtual ~CommonMessagePostService_postBatteryStatus_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postBatteryStatus_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postBatteryStatus_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postBatteryStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postBatteryStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postBatteryStatus_presult__isset {
  _CommonMessagePostService_postBatteryStatus_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postBatteryStatus_presult__isset;

class CommonMessagePostService_postBatteryStatus_presult {
 public:


  virtual ~CommonMessagePostService_postBatteryStatus_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postBatteryStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetpoint8dof_args__isset {
  _CommonMessagePostService_postSetpoint8dof_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetpoint8dof_args__isset;

class CommonMessagePostService_postSetpoint8dof_args {
 public:

  CommonMessagePostService_postSetpoint8dof_args() {
  }

  virtual ~CommonMessagePostService_postSetpoint8dof_args() throw() {}

  Setpoint8dof msg;

  _CommonMessagePostService_postSetpoint8dof_args__isset __isset;

  void __set_msg(const Setpoint8dof& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetpoint8dof_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetpoint8dof_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetpoint8dof_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetpoint8dof_pargs {
 public:


  virtual ~CommonMessagePostService_postSetpoint8dof_pargs() throw() {}

  const Setpoint8dof* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetpoint8dof_result__isset {
  _CommonMessagePostService_postSetpoint8dof_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetpoint8dof_result__isset;

class CommonMessagePostService_postSetpoint8dof_result {
 public:

  CommonMessagePostService_postSetpoint8dof_result() {
  }

  virtual ~CommonMessagePostService_postSetpoint8dof_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetpoint8dof_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetpoint8dof_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetpoint8dof_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetpoint8dof_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetpoint8dof_presult__isset {
  _CommonMessagePostService_postSetpoint8dof_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetpoint8dof_presult__isset;

class CommonMessagePostService_postSetpoint8dof_presult {
 public:


  virtual ~CommonMessagePostService_postSetpoint8dof_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetpoint8dof_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postSetpoint6dof_args__isset {
  _CommonMessagePostService_postSetpoint6dof_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postSetpoint6dof_args__isset;

class CommonMessagePostService_postSetpoint6dof_args {
 public:

  CommonMessagePostService_postSetpoint6dof_args() {
  }

  virtual ~CommonMessagePostService_postSetpoint6dof_args() throw() {}

  Setpoint6dof msg;

  _CommonMessagePostService_postSetpoint6dof_args__isset __isset;

  void __set_msg(const Setpoint6dof& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postSetpoint6dof_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetpoint6dof_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetpoint6dof_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postSetpoint6dof_pargs {
 public:


  virtual ~CommonMessagePostService_postSetpoint6dof_pargs() throw() {}

  const Setpoint6dof* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetpoint6dof_result__isset {
  _CommonMessagePostService_postSetpoint6dof_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetpoint6dof_result__isset;

class CommonMessagePostService_postSetpoint6dof_result {
 public:

  CommonMessagePostService_postSetpoint6dof_result() {
  }

  virtual ~CommonMessagePostService_postSetpoint6dof_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetpoint6dof_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postSetpoint6dof_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postSetpoint6dof_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postSetpoint6dof_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postSetpoint6dof_presult__isset {
  _CommonMessagePostService_postSetpoint6dof_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postSetpoint6dof_presult__isset;

class CommonMessagePostService_postSetpoint6dof_presult {
 public:


  virtual ~CommonMessagePostService_postSetpoint6dof_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postSetpoint6dof_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postMemoryVect_args__isset {
  _CommonMessagePostService_postMemoryVect_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postMemoryVect_args__isset;

class CommonMessagePostService_postMemoryVect_args {
 public:

  CommonMessagePostService_postMemoryVect_args() {
  }

  virtual ~CommonMessagePostService_postMemoryVect_args() throw() {}

  MemoryVect msg;

  _CommonMessagePostService_postMemoryVect_args__isset __isset;

  void __set_msg(const MemoryVect& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postMemoryVect_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMemoryVect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMemoryVect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postMemoryVect_pargs {
 public:


  virtual ~CommonMessagePostService_postMemoryVect_pargs() throw() {}

  const MemoryVect* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMemoryVect_result__isset {
  _CommonMessagePostService_postMemoryVect_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMemoryVect_result__isset;

class CommonMessagePostService_postMemoryVect_result {
 public:

  CommonMessagePostService_postMemoryVect_result() {
  }

  virtual ~CommonMessagePostService_postMemoryVect_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMemoryVect_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postMemoryVect_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postMemoryVect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postMemoryVect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postMemoryVect_presult__isset {
  _CommonMessagePostService_postMemoryVect_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postMemoryVect_presult__isset;

class CommonMessagePostService_postMemoryVect_presult {
 public:


  virtual ~CommonMessagePostService_postMemoryVect_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postMemoryVect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postDebugVect_args__isset {
  _CommonMessagePostService_postDebugVect_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postDebugVect_args__isset;

class CommonMessagePostService_postDebugVect_args {
 public:

  CommonMessagePostService_postDebugVect_args() {
  }

  virtual ~CommonMessagePostService_postDebugVect_args() throw() {}

  DebugVect msg;

  _CommonMessagePostService_postDebugVect_args__isset __isset;

  void __set_msg(const DebugVect& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postDebugVect_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postDebugVect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postDebugVect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postDebugVect_pargs {
 public:


  virtual ~CommonMessagePostService_postDebugVect_pargs() throw() {}

  const DebugVect* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postDebugVect_result__isset {
  _CommonMessagePostService_postDebugVect_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postDebugVect_result__isset;

class CommonMessagePostService_postDebugVect_result {
 public:

  CommonMessagePostService_postDebugVect_result() {
  }

  virtual ~CommonMessagePostService_postDebugVect_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postDebugVect_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postDebugVect_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postDebugVect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postDebugVect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postDebugVect_presult__isset {
  _CommonMessagePostService_postDebugVect_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postDebugVect_presult__isset;

class CommonMessagePostService_postDebugVect_presult {
 public:


  virtual ~CommonMessagePostService_postDebugVect_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postDebugVect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postNamedValueFloat_args__isset {
  _CommonMessagePostService_postNamedValueFloat_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postNamedValueFloat_args__isset;

class CommonMessagePostService_postNamedValueFloat_args {
 public:

  CommonMessagePostService_postNamedValueFloat_args() {
  }

  virtual ~CommonMessagePostService_postNamedValueFloat_args() throw() {}

  NamedValueFloat msg;

  _CommonMessagePostService_postNamedValueFloat_args__isset __isset;

  void __set_msg(const NamedValueFloat& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postNamedValueFloat_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postNamedValueFloat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postNamedValueFloat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postNamedValueFloat_pargs {
 public:


  virtual ~CommonMessagePostService_postNamedValueFloat_pargs() throw() {}

  const NamedValueFloat* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postNamedValueFloat_result__isset {
  _CommonMessagePostService_postNamedValueFloat_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postNamedValueFloat_result__isset;

class CommonMessagePostService_postNamedValueFloat_result {
 public:

  CommonMessagePostService_postNamedValueFloat_result() {
  }

  virtual ~CommonMessagePostService_postNamedValueFloat_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postNamedValueFloat_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postNamedValueFloat_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postNamedValueFloat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postNamedValueFloat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postNamedValueFloat_presult__isset {
  _CommonMessagePostService_postNamedValueFloat_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postNamedValueFloat_presult__isset;

class CommonMessagePostService_postNamedValueFloat_presult {
 public:


  virtual ~CommonMessagePostService_postNamedValueFloat_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postNamedValueFloat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postNamedValueInt_args__isset {
  _CommonMessagePostService_postNamedValueInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postNamedValueInt_args__isset;

class CommonMessagePostService_postNamedValueInt_args {
 public:

  CommonMessagePostService_postNamedValueInt_args() {
  }

  virtual ~CommonMessagePostService_postNamedValueInt_args() throw() {}

  NamedValueInt msg;

  _CommonMessagePostService_postNamedValueInt_args__isset __isset;

  void __set_msg(const NamedValueInt& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postNamedValueInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postNamedValueInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postNamedValueInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postNamedValueInt_pargs {
 public:


  virtual ~CommonMessagePostService_postNamedValueInt_pargs() throw() {}

  const NamedValueInt* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postNamedValueInt_result__isset {
  _CommonMessagePostService_postNamedValueInt_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postNamedValueInt_result__isset;

class CommonMessagePostService_postNamedValueInt_result {
 public:

  CommonMessagePostService_postNamedValueInt_result() {
  }

  virtual ~CommonMessagePostService_postNamedValueInt_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postNamedValueInt_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postNamedValueInt_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postNamedValueInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postNamedValueInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postNamedValueInt_presult__isset {
  _CommonMessagePostService_postNamedValueInt_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postNamedValueInt_presult__isset;

class CommonMessagePostService_postNamedValueInt_presult {
 public:


  virtual ~CommonMessagePostService_postNamedValueInt_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postNamedValueInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postStatustext_args__isset {
  _CommonMessagePostService_postStatustext_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postStatustext_args__isset;

class CommonMessagePostService_postStatustext_args {
 public:

  CommonMessagePostService_postStatustext_args() {
  }

  virtual ~CommonMessagePostService_postStatustext_args() throw() {}

  Statustext msg;

  _CommonMessagePostService_postStatustext_args__isset __isset;

  void __set_msg(const Statustext& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postStatustext_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postStatustext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postStatustext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postStatustext_pargs {
 public:


  virtual ~CommonMessagePostService_postStatustext_pargs() throw() {}

  const Statustext* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postStatustext_result__isset {
  _CommonMessagePostService_postStatustext_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postStatustext_result__isset;

class CommonMessagePostService_postStatustext_result {
 public:

  CommonMessagePostService_postStatustext_result() {
  }

  virtual ~CommonMessagePostService_postStatustext_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postStatustext_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postStatustext_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postStatustext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postStatustext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postStatustext_presult__isset {
  _CommonMessagePostService_postStatustext_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postStatustext_presult__isset;

class CommonMessagePostService_postStatustext_presult {
 public:


  virtual ~CommonMessagePostService_postStatustext_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postStatustext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessagePostService_postDebug_args__isset {
  _CommonMessagePostService_postDebug_args__isset() : msg(false) {}
  bool msg;
} _CommonMessagePostService_postDebug_args__isset;

class CommonMessagePostService_postDebug_args {
 public:

  CommonMessagePostService_postDebug_args() {
  }

  virtual ~CommonMessagePostService_postDebug_args() throw() {}

  Debug msg;

  _CommonMessagePostService_postDebug_args__isset __isset;

  void __set_msg(const Debug& val) {
    msg = val;
  }

  bool operator == (const CommonMessagePostService_postDebug_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postDebug_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postDebug_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessagePostService_postDebug_pargs {
 public:


  virtual ~CommonMessagePostService_postDebug_pargs() throw() {}

  const Debug* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postDebug_result__isset {
  _CommonMessagePostService_postDebug_result__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postDebug_result__isset;

class CommonMessagePostService_postDebug_result {
 public:

  CommonMessagePostService_postDebug_result() {
  }

  virtual ~CommonMessagePostService_postDebug_result() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postDebug_result__isset __isset;

  void __set_err(const InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const CommonMessagePostService_postDebug_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const CommonMessagePostService_postDebug_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessagePostService_postDebug_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessagePostService_postDebug_presult__isset {
  _CommonMessagePostService_postDebug_presult__isset() : err(false) {}
  bool err;
} _CommonMessagePostService_postDebug_presult__isset;

class CommonMessagePostService_postDebug_presult {
 public:


  virtual ~CommonMessagePostService_postDebug_presult() throw() {}

  InvalidMavlinkMessage err;

  _CommonMessagePostService_postDebug_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CommonMessagePostServiceClient : virtual public CommonMessagePostServiceIf {
 public:
  CommonMessagePostServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CommonMessagePostServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void postHeartbeat(const Heartbeat& msg);
  void send_postHeartbeat(const Heartbeat& msg);
  void recv_postHeartbeat();
  void postSysStatus(const SysStatus& msg);
  void send_postSysStatus(const SysStatus& msg);
  void recv_postSysStatus();
  void postSystemTime(const SystemTime& msg);
  void send_postSystemTime(const SystemTime& msg);
  void recv_postSystemTime();
  void postPing(const Ping& msg);
  void send_postPing(const Ping& msg);
  void recv_postPing();
  void postChangeOperatorControl(const ChangeOperatorControl& msg);
  void send_postChangeOperatorControl(const ChangeOperatorControl& msg);
  void recv_postChangeOperatorControl();
  void postChangeOperatorControlAck(const ChangeOperatorControlAck& msg);
  void send_postChangeOperatorControlAck(const ChangeOperatorControlAck& msg);
  void recv_postChangeOperatorControlAck();
  void postAuthKey(const AuthKey& msg);
  void send_postAuthKey(const AuthKey& msg);
  void recv_postAuthKey();
  void postSetMode(const SetMode& msg);
  void send_postSetMode(const SetMode& msg);
  void recv_postSetMode();
  void postParamRequestRead(const ParamRequestRead& msg);
  void send_postParamRequestRead(const ParamRequestRead& msg);
  void recv_postParamRequestRead();
  void postParamRequestList(const ParamRequestList& msg);
  void send_postParamRequestList(const ParamRequestList& msg);
  void recv_postParamRequestList();
  void postParamValue(const ParamValue& msg);
  void send_postParamValue(const ParamValue& msg);
  void recv_postParamValue();
  void postParamSet(const ParamSet& msg);
  void send_postParamSet(const ParamSet& msg);
  void recv_postParamSet();
  void postGpsRawInt(const GpsRawInt& msg);
  void send_postGpsRawInt(const GpsRawInt& msg);
  void recv_postGpsRawInt();
  void postGpsStatus(const GpsStatus& msg);
  void send_postGpsStatus(const GpsStatus& msg);
  void recv_postGpsStatus();
  void postScaledImu(const ScaledImu& msg);
  void send_postScaledImu(const ScaledImu& msg);
  void recv_postScaledImu();
  void postRawImu(const RawImu& msg);
  void send_postRawImu(const RawImu& msg);
  void recv_postRawImu();
  void postRawPressure(const RawPressure& msg);
  void send_postRawPressure(const RawPressure& msg);
  void recv_postRawPressure();
  void postScaledPressure(const ScaledPressure& msg);
  void send_postScaledPressure(const ScaledPressure& msg);
  void recv_postScaledPressure();
  void postAttitude(const Attitude& msg);
  void send_postAttitude(const Attitude& msg);
  void recv_postAttitude();
  void postAttitudeQuaternion(const AttitudeQuaternion& msg);
  void send_postAttitudeQuaternion(const AttitudeQuaternion& msg);
  void recv_postAttitudeQuaternion();
  void postLocalPositionNed(const LocalPositionNed& msg);
  void send_postLocalPositionNed(const LocalPositionNed& msg);
  void recv_postLocalPositionNed();
  void postGlobalPositionInt(const GlobalPositionInt& msg);
  void send_postGlobalPositionInt(const GlobalPositionInt& msg);
  void recv_postGlobalPositionInt();
  void postRcChannelsScaled(const RcChannelsScaled& msg);
  void send_postRcChannelsScaled(const RcChannelsScaled& msg);
  void recv_postRcChannelsScaled();
  void postRcChannelsRaw(const RcChannelsRaw& msg);
  void send_postRcChannelsRaw(const RcChannelsRaw& msg);
  void recv_postRcChannelsRaw();
  void postServoOutputRaw(const ServoOutputRaw& msg);
  void send_postServoOutputRaw(const ServoOutputRaw& msg);
  void recv_postServoOutputRaw();
  void postMissionRequestPartialList(const MissionRequestPartialList& msg);
  void send_postMissionRequestPartialList(const MissionRequestPartialList& msg);
  void recv_postMissionRequestPartialList();
  void postMissionWritePartialList(const MissionWritePartialList& msg);
  void send_postMissionWritePartialList(const MissionWritePartialList& msg);
  void recv_postMissionWritePartialList();
  void postMissionItem(const MissionItem& msg);
  void send_postMissionItem(const MissionItem& msg);
  void recv_postMissionItem();
  void postMissionRequest(const MissionRequest& msg);
  void send_postMissionRequest(const MissionRequest& msg);
  void recv_postMissionRequest();
  void postMissionSetCurrent(const MissionSetCurrent& msg);
  void send_postMissionSetCurrent(const MissionSetCurrent& msg);
  void recv_postMissionSetCurrent();
  void postMissionCurrent(const MissionCurrent& msg);
  void send_postMissionCurrent(const MissionCurrent& msg);
  void recv_postMissionCurrent();
  void postMissionRequestList(const MissionRequestList& msg);
  void send_postMissionRequestList(const MissionRequestList& msg);
  void recv_postMissionRequestList();
  void postMissionCount(const MissionCount& msg);
  void send_postMissionCount(const MissionCount& msg);
  void recv_postMissionCount();
  void postMissionClearAll(const MissionClearAll& msg);
  void send_postMissionClearAll(const MissionClearAll& msg);
  void recv_postMissionClearAll();
  void postMissionItemReached(const MissionItemReached& msg);
  void send_postMissionItemReached(const MissionItemReached& msg);
  void recv_postMissionItemReached();
  void postMissionAck(const MissionAck& msg);
  void send_postMissionAck(const MissionAck& msg);
  void recv_postMissionAck();
  void postSetGpsGlobalOrigin(const SetGpsGlobalOrigin& msg);
  void send_postSetGpsGlobalOrigin(const SetGpsGlobalOrigin& msg);
  void recv_postSetGpsGlobalOrigin();
  void postGpsGlobalOrigin(const GpsGlobalOrigin& msg);
  void send_postGpsGlobalOrigin(const GpsGlobalOrigin& msg);
  void recv_postGpsGlobalOrigin();
  void postSetLocalPositionSetpoint(const SetLocalPositionSetpoint& msg);
  void send_postSetLocalPositionSetpoint(const SetLocalPositionSetpoint& msg);
  void recv_postSetLocalPositionSetpoint();
  void postLocalPositionSetpoint(const LocalPositionSetpoint& msg);
  void send_postLocalPositionSetpoint(const LocalPositionSetpoint& msg);
  void recv_postLocalPositionSetpoint();
  void postGlobalPositionSetpointInt(const GlobalPositionSetpointInt& msg);
  void send_postGlobalPositionSetpointInt(const GlobalPositionSetpointInt& msg);
  void recv_postGlobalPositionSetpointInt();
  void postSetGlobalPositionSetpointInt(const SetGlobalPositionSetpointInt& msg);
  void send_postSetGlobalPositionSetpointInt(const SetGlobalPositionSetpointInt& msg);
  void recv_postSetGlobalPositionSetpointInt();
  void postSafetySetAllowedArea(const SafetySetAllowedArea& msg);
  void send_postSafetySetAllowedArea(const SafetySetAllowedArea& msg);
  void recv_postSafetySetAllowedArea();
  void postSafetyAllowedArea(const SafetyAllowedArea& msg);
  void send_postSafetyAllowedArea(const SafetyAllowedArea& msg);
  void recv_postSafetyAllowedArea();
  void postSetRollPitchYawThrust(const SetRollPitchYawThrust& msg);
  void send_postSetRollPitchYawThrust(const SetRollPitchYawThrust& msg);
  void recv_postSetRollPitchYawThrust();
  void postSetRollPitchYawSpeedThrust(const SetRollPitchYawSpeedThrust& msg);
  void send_postSetRollPitchYawSpeedThrust(const SetRollPitchYawSpeedThrust& msg);
  void recv_postSetRollPitchYawSpeedThrust();
  void postRollPitchYawThrustSetpoint(const RollPitchYawThrustSetpoint& msg);
  void send_postRollPitchYawThrustSetpoint(const RollPitchYawThrustSetpoint& msg);
  void recv_postRollPitchYawThrustSetpoint();
  void postRollPitchYawSpeedThrustSetpoint(const RollPitchYawSpeedThrustSetpoint& msg);
  void send_postRollPitchYawSpeedThrustSetpoint(const RollPitchYawSpeedThrustSetpoint& msg);
  void recv_postRollPitchYawSpeedThrustSetpoint();
  void postSetQuadMotorsSetpoint(const SetQuadMotorsSetpoint& msg);
  void send_postSetQuadMotorsSetpoint(const SetQuadMotorsSetpoint& msg);
  void recv_postSetQuadMotorsSetpoint();
  void postSetQuadSwarmRollPitchYawThrust(const SetQuadSwarmRollPitchYawThrust& msg);
  void send_postSetQuadSwarmRollPitchYawThrust(const SetQuadSwarmRollPitchYawThrust& msg);
  void recv_postSetQuadSwarmRollPitchYawThrust();
  void postNavControllerOutput(const NavControllerOutput& msg);
  void send_postNavControllerOutput(const NavControllerOutput& msg);
  void recv_postNavControllerOutput();
  void postSetQuadSwarmLedRollPitchYawThrust(const SetQuadSwarmLedRollPitchYawThrust& msg);
  void send_postSetQuadSwarmLedRollPitchYawThrust(const SetQuadSwarmLedRollPitchYawThrust& msg);
  void recv_postSetQuadSwarmLedRollPitchYawThrust();
  void postStateCorrection(const StateCorrection& msg);
  void send_postStateCorrection(const StateCorrection& msg);
  void recv_postStateCorrection();
  void postRequestDataStream(const RequestDataStream& msg);
  void send_postRequestDataStream(const RequestDataStream& msg);
  void recv_postRequestDataStream();
  void postDataStream(const DataStream& msg);
  void send_postDataStream(const DataStream& msg);
  void recv_postDataStream();
  void postManualControl(const ManualControl& msg);
  void send_postManualControl(const ManualControl& msg);
  void recv_postManualControl();
  void postRcChannelsOverride(const RcChannelsOverride& msg);
  void send_postRcChannelsOverride(const RcChannelsOverride& msg);
  void recv_postRcChannelsOverride();
  void postVfrHud(const VfrHud& msg);
  void send_postVfrHud(const VfrHud& msg);
  void recv_postVfrHud();
  void postCommandLong(const CommandLong& msg);
  void send_postCommandLong(const CommandLong& msg);
  void recv_postCommandLong();
  void postCommandAck(const CommandAck& msg);
  void send_postCommandAck(const CommandAck& msg);
  void recv_postCommandAck();
  void postRollPitchYawRatesThrustSetpoint(const RollPitchYawRatesThrustSetpoint& msg);
  void send_postRollPitchYawRatesThrustSetpoint(const RollPitchYawRatesThrustSetpoint& msg);
  void recv_postRollPitchYawRatesThrustSetpoint();
  void postManualSetpoint(const ManualSetpoint& msg);
  void send_postManualSetpoint(const ManualSetpoint& msg);
  void recv_postManualSetpoint();
  void postLocalPositionNedSystemGlobalOffset(const LocalPositionNedSystemGlobalOffset& msg);
  void send_postLocalPositionNedSystemGlobalOffset(const LocalPositionNedSystemGlobalOffset& msg);
  void recv_postLocalPositionNedSystemGlobalOffset();
  void postHilState(const HilState& msg);
  void send_postHilState(const HilState& msg);
  void recv_postHilState();
  void postHilControls(const HilControls& msg);
  void send_postHilControls(const HilControls& msg);
  void recv_postHilControls();
  void postHilRcInputsRaw(const HilRcInputsRaw& msg);
  void send_postHilRcInputsRaw(const HilRcInputsRaw& msg);
  void recv_postHilRcInputsRaw();
  void postOpticalFlow(const OpticalFlow& msg);
  void send_postOpticalFlow(const OpticalFlow& msg);
  void recv_postOpticalFlow();
  void postGlobalVisionPositionEstimate(const GlobalVisionPositionEstimate& msg);
  void send_postGlobalVisionPositionEstimate(const GlobalVisionPositionEstimate& msg);
  void recv_postGlobalVisionPositionEstimate();
  void postVisionPositionEstimate(const VisionPositionEstimate& msg);
  void send_postVisionPositionEstimate(const VisionPositionEstimate& msg);
  void recv_postVisionPositionEstimate();
  void postVisionSpeedEstimate(const VisionSpeedEstimate& msg);
  void send_postVisionSpeedEstimate(const VisionSpeedEstimate& msg);
  void recv_postVisionSpeedEstimate();
  void postViconPositionEstimate(const ViconPositionEstimate& msg);
  void send_postViconPositionEstimate(const ViconPositionEstimate& msg);
  void recv_postViconPositionEstimate();
  void postHighresImu(const HighresImu& msg);
  void send_postHighresImu(const HighresImu& msg);
  void recv_postHighresImu();
  void postOmnidirectionalFlow(const OmnidirectionalFlow& msg);
  void send_postOmnidirectionalFlow(const OmnidirectionalFlow& msg);
  void recv_postOmnidirectionalFlow();
  void postFileTransferStart(const FileTransferStart& msg);
  void send_postFileTransferStart(const FileTransferStart& msg);
  void recv_postFileTransferStart();
  void postFileTransferDirList(const FileTransferDirList& msg);
  void send_postFileTransferDirList(const FileTransferDirList& msg);
  void recv_postFileTransferDirList();
  void postFileTransferRes(const FileTransferRes& msg);
  void send_postFileTransferRes(const FileTransferRes& msg);
  void recv_postFileTransferRes();
  void postBatteryStatus(const BatteryStatus& msg);
  void send_postBatteryStatus(const BatteryStatus& msg);
  void recv_postBatteryStatus();
  void postSetpoint8dof(const Setpoint8dof& msg);
  void send_postSetpoint8dof(const Setpoint8dof& msg);
  void recv_postSetpoint8dof();
  void postSetpoint6dof(const Setpoint6dof& msg);
  void send_postSetpoint6dof(const Setpoint6dof& msg);
  void recv_postSetpoint6dof();
  void postMemoryVect(const MemoryVect& msg);
  void send_postMemoryVect(const MemoryVect& msg);
  void recv_postMemoryVect();
  void postDebugVect(const DebugVect& msg);
  void send_postDebugVect(const DebugVect& msg);
  void recv_postDebugVect();
  void postNamedValueFloat(const NamedValueFloat& msg);
  void send_postNamedValueFloat(const NamedValueFloat& msg);
  void recv_postNamedValueFloat();
  void postNamedValueInt(const NamedValueInt& msg);
  void send_postNamedValueInt(const NamedValueInt& msg);
  void recv_postNamedValueInt();
  void postStatustext(const Statustext& msg);
  void send_postStatustext(const Statustext& msg);
  void recv_postStatustext();
  void postDebug(const Debug& msg);
  void send_postDebug(const Debug& msg);
  void recv_postDebug();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CommonMessagePostServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CommonMessagePostServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CommonMessagePostServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_postHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSysStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSystemTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postPing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postChangeOperatorControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postChangeOperatorControlAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postAuthKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postParamRequestRead(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postParamRequestList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postParamValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postParamSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postGpsRawInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postGpsStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postScaledImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRawImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRawPressure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postScaledPressure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postAttitude(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postAttitudeQuaternion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postLocalPositionNed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postGlobalPositionInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRcChannelsScaled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRcChannelsRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postServoOutputRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionRequestPartialList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionWritePartialList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionSetCurrent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionCurrent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionRequestList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionClearAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionItemReached(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMissionAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetGpsGlobalOrigin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postGpsGlobalOrigin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetLocalPositionSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postLocalPositionSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postGlobalPositionSetpointInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetGlobalPositionSetpointInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSafetySetAllowedArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSafetyAllowedArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetRollPitchYawSpeedThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRollPitchYawThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRollPitchYawSpeedThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetQuadMotorsSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetQuadSwarmRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postNavControllerOutput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetQuadSwarmLedRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postStateCorrection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRequestDataStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postDataStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postManualControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRcChannelsOverride(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postVfrHud(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postCommandLong(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postCommandAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRollPitchYawRatesThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postManualSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postLocalPositionNedSystemGlobalOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postHilState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postHilControls(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postHilRcInputsRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postOpticalFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postGlobalVisionPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postVisionPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postVisionSpeedEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postViconPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postHighresImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postOmnidirectionalFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postFileTransferStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postFileTransferDirList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postFileTransferRes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postBatteryStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetpoint8dof(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetpoint6dof(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMemoryVect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postDebugVect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postNamedValueFloat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postNamedValueInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postStatustext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postDebug(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CommonMessagePostServiceProcessor(boost::shared_ptr<CommonMessagePostServiceIf> iface) :
    iface_(iface) {
    processMap_["postHeartbeat"] = &CommonMessagePostServiceProcessor::process_postHeartbeat;
    processMap_["postSysStatus"] = &CommonMessagePostServiceProcessor::process_postSysStatus;
    processMap_["postSystemTime"] = &CommonMessagePostServiceProcessor::process_postSystemTime;
    processMap_["postPing"] = &CommonMessagePostServiceProcessor::process_postPing;
    processMap_["postChangeOperatorControl"] = &CommonMessagePostServiceProcessor::process_postChangeOperatorControl;
    processMap_["postChangeOperatorControlAck"] = &CommonMessagePostServiceProcessor::process_postChangeOperatorControlAck;
    processMap_["postAuthKey"] = &CommonMessagePostServiceProcessor::process_postAuthKey;
    processMap_["postSetMode"] = &CommonMessagePostServiceProcessor::process_postSetMode;
    processMap_["postParamRequestRead"] = &CommonMessagePostServiceProcessor::process_postParamRequestRead;
    processMap_["postParamRequestList"] = &CommonMessagePostServiceProcessor::process_postParamRequestList;
    processMap_["postParamValue"] = &CommonMessagePostServiceProcessor::process_postParamValue;
    processMap_["postParamSet"] = &CommonMessagePostServiceProcessor::process_postParamSet;
    processMap_["postGpsRawInt"] = &CommonMessagePostServiceProcessor::process_postGpsRawInt;
    processMap_["postGpsStatus"] = &CommonMessagePostServiceProcessor::process_postGpsStatus;
    processMap_["postScaledImu"] = &CommonMessagePostServiceProcessor::process_postScaledImu;
    processMap_["postRawImu"] = &CommonMessagePostServiceProcessor::process_postRawImu;
    processMap_["postRawPressure"] = &CommonMessagePostServiceProcessor::process_postRawPressure;
    processMap_["postScaledPressure"] = &CommonMessagePostServiceProcessor::process_postScaledPressure;
    processMap_["postAttitude"] = &CommonMessagePostServiceProcessor::process_postAttitude;
    processMap_["postAttitudeQuaternion"] = &CommonMessagePostServiceProcessor::process_postAttitudeQuaternion;
    processMap_["postLocalPositionNed"] = &CommonMessagePostServiceProcessor::process_postLocalPositionNed;
    processMap_["postGlobalPositionInt"] = &CommonMessagePostServiceProcessor::process_postGlobalPositionInt;
    processMap_["postRcChannelsScaled"] = &CommonMessagePostServiceProcessor::process_postRcChannelsScaled;
    processMap_["postRcChannelsRaw"] = &CommonMessagePostServiceProcessor::process_postRcChannelsRaw;
    processMap_["postServoOutputRaw"] = &CommonMessagePostServiceProcessor::process_postServoOutputRaw;
    processMap_["postMissionRequestPartialList"] = &CommonMessagePostServiceProcessor::process_postMissionRequestPartialList;
    processMap_["postMissionWritePartialList"] = &CommonMessagePostServiceProcessor::process_postMissionWritePartialList;
    processMap_["postMissionItem"] = &CommonMessagePostServiceProcessor::process_postMissionItem;
    processMap_["postMissionRequest"] = &CommonMessagePostServiceProcessor::process_postMissionRequest;
    processMap_["postMissionSetCurrent"] = &CommonMessagePostServiceProcessor::process_postMissionSetCurrent;
    processMap_["postMissionCurrent"] = &CommonMessagePostServiceProcessor::process_postMissionCurrent;
    processMap_["postMissionRequestList"] = &CommonMessagePostServiceProcessor::process_postMissionRequestList;
    processMap_["postMissionCount"] = &CommonMessagePostServiceProcessor::process_postMissionCount;
    processMap_["postMissionClearAll"] = &CommonMessagePostServiceProcessor::process_postMissionClearAll;
    processMap_["postMissionItemReached"] = &CommonMessagePostServiceProcessor::process_postMissionItemReached;
    processMap_["postMissionAck"] = &CommonMessagePostServiceProcessor::process_postMissionAck;
    processMap_["postSetGpsGlobalOrigin"] = &CommonMessagePostServiceProcessor::process_postSetGpsGlobalOrigin;
    processMap_["postGpsGlobalOrigin"] = &CommonMessagePostServiceProcessor::process_postGpsGlobalOrigin;
    processMap_["postSetLocalPositionSetpoint"] = &CommonMessagePostServiceProcessor::process_postSetLocalPositionSetpoint;
    processMap_["postLocalPositionSetpoint"] = &CommonMessagePostServiceProcessor::process_postLocalPositionSetpoint;
    processMap_["postGlobalPositionSetpointInt"] = &CommonMessagePostServiceProcessor::process_postGlobalPositionSetpointInt;
    processMap_["postSetGlobalPositionSetpointInt"] = &CommonMessagePostServiceProcessor::process_postSetGlobalPositionSetpointInt;
    processMap_["postSafetySetAllowedArea"] = &CommonMessagePostServiceProcessor::process_postSafetySetAllowedArea;
    processMap_["postSafetyAllowedArea"] = &CommonMessagePostServiceProcessor::process_postSafetyAllowedArea;
    processMap_["postSetRollPitchYawThrust"] = &CommonMessagePostServiceProcessor::process_postSetRollPitchYawThrust;
    processMap_["postSetRollPitchYawSpeedThrust"] = &CommonMessagePostServiceProcessor::process_postSetRollPitchYawSpeedThrust;
    processMap_["postRollPitchYawThrustSetpoint"] = &CommonMessagePostServiceProcessor::process_postRollPitchYawThrustSetpoint;
    processMap_["postRollPitchYawSpeedThrustSetpoint"] = &CommonMessagePostServiceProcessor::process_postRollPitchYawSpeedThrustSetpoint;
    processMap_["postSetQuadMotorsSetpoint"] = &CommonMessagePostServiceProcessor::process_postSetQuadMotorsSetpoint;
    processMap_["postSetQuadSwarmRollPitchYawThrust"] = &CommonMessagePostServiceProcessor::process_postSetQuadSwarmRollPitchYawThrust;
    processMap_["postNavControllerOutput"] = &CommonMessagePostServiceProcessor::process_postNavControllerOutput;
    processMap_["postSetQuadSwarmLedRollPitchYawThrust"] = &CommonMessagePostServiceProcessor::process_postSetQuadSwarmLedRollPitchYawThrust;
    processMap_["postStateCorrection"] = &CommonMessagePostServiceProcessor::process_postStateCorrection;
    processMap_["postRequestDataStream"] = &CommonMessagePostServiceProcessor::process_postRequestDataStream;
    processMap_["postDataStream"] = &CommonMessagePostServiceProcessor::process_postDataStream;
    processMap_["postManualControl"] = &CommonMessagePostServiceProcessor::process_postManualControl;
    processMap_["postRcChannelsOverride"] = &CommonMessagePostServiceProcessor::process_postRcChannelsOverride;
    processMap_["postVfrHud"] = &CommonMessagePostServiceProcessor::process_postVfrHud;
    processMap_["postCommandLong"] = &CommonMessagePostServiceProcessor::process_postCommandLong;
    processMap_["postCommandAck"] = &CommonMessagePostServiceProcessor::process_postCommandAck;
    processMap_["postRollPitchYawRatesThrustSetpoint"] = &CommonMessagePostServiceProcessor::process_postRollPitchYawRatesThrustSetpoint;
    processMap_["postManualSetpoint"] = &CommonMessagePostServiceProcessor::process_postManualSetpoint;
    processMap_["postLocalPositionNedSystemGlobalOffset"] = &CommonMessagePostServiceProcessor::process_postLocalPositionNedSystemGlobalOffset;
    processMap_["postHilState"] = &CommonMessagePostServiceProcessor::process_postHilState;
    processMap_["postHilControls"] = &CommonMessagePostServiceProcessor::process_postHilControls;
    processMap_["postHilRcInputsRaw"] = &CommonMessagePostServiceProcessor::process_postHilRcInputsRaw;
    processMap_["postOpticalFlow"] = &CommonMessagePostServiceProcessor::process_postOpticalFlow;
    processMap_["postGlobalVisionPositionEstimate"] = &CommonMessagePostServiceProcessor::process_postGlobalVisionPositionEstimate;
    processMap_["postVisionPositionEstimate"] = &CommonMessagePostServiceProcessor::process_postVisionPositionEstimate;
    processMap_["postVisionSpeedEstimate"] = &CommonMessagePostServiceProcessor::process_postVisionSpeedEstimate;
    processMap_["postViconPositionEstimate"] = &CommonMessagePostServiceProcessor::process_postViconPositionEstimate;
    processMap_["postHighresImu"] = &CommonMessagePostServiceProcessor::process_postHighresImu;
    processMap_["postOmnidirectionalFlow"] = &CommonMessagePostServiceProcessor::process_postOmnidirectionalFlow;
    processMap_["postFileTransferStart"] = &CommonMessagePostServiceProcessor::process_postFileTransferStart;
    processMap_["postFileTransferDirList"] = &CommonMessagePostServiceProcessor::process_postFileTransferDirList;
    processMap_["postFileTransferRes"] = &CommonMessagePostServiceProcessor::process_postFileTransferRes;
    processMap_["postBatteryStatus"] = &CommonMessagePostServiceProcessor::process_postBatteryStatus;
    processMap_["postSetpoint8dof"] = &CommonMessagePostServiceProcessor::process_postSetpoint8dof;
    processMap_["postSetpoint6dof"] = &CommonMessagePostServiceProcessor::process_postSetpoint6dof;
    processMap_["postMemoryVect"] = &CommonMessagePostServiceProcessor::process_postMemoryVect;
    processMap_["postDebugVect"] = &CommonMessagePostServiceProcessor::process_postDebugVect;
    processMap_["postNamedValueFloat"] = &CommonMessagePostServiceProcessor::process_postNamedValueFloat;
    processMap_["postNamedValueInt"] = &CommonMessagePostServiceProcessor::process_postNamedValueInt;
    processMap_["postStatustext"] = &CommonMessagePostServiceProcessor::process_postStatustext;
    processMap_["postDebug"] = &CommonMessagePostServiceProcessor::process_postDebug;
  }

  virtual ~CommonMessagePostServiceProcessor() {}
};

class CommonMessagePostServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CommonMessagePostServiceProcessorFactory(const ::boost::shared_ptr< CommonMessagePostServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CommonMessagePostServiceIfFactory > handlerFactory_;
};

class CommonMessagePostServiceMultiface : virtual public CommonMessagePostServiceIf {
 public:
  CommonMessagePostServiceMultiface(std::vector<boost::shared_ptr<CommonMessagePostServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CommonMessagePostServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CommonMessagePostServiceIf> > ifaces_;
  CommonMessagePostServiceMultiface() {}
  void add(boost::shared_ptr<CommonMessagePostServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void postHeartbeat(const Heartbeat& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postHeartbeat(msg);
    }
    ifaces_[i]->postHeartbeat(msg);
  }

  void postSysStatus(const SysStatus& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSysStatus(msg);
    }
    ifaces_[i]->postSysStatus(msg);
  }

  void postSystemTime(const SystemTime& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSystemTime(msg);
    }
    ifaces_[i]->postSystemTime(msg);
  }

  void postPing(const Ping& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postPing(msg);
    }
    ifaces_[i]->postPing(msg);
  }

  void postChangeOperatorControl(const ChangeOperatorControl& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postChangeOperatorControl(msg);
    }
    ifaces_[i]->postChangeOperatorControl(msg);
  }

  void postChangeOperatorControlAck(const ChangeOperatorControlAck& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postChangeOperatorControlAck(msg);
    }
    ifaces_[i]->postChangeOperatorControlAck(msg);
  }

  void postAuthKey(const AuthKey& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postAuthKey(msg);
    }
    ifaces_[i]->postAuthKey(msg);
  }

  void postSetMode(const SetMode& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetMode(msg);
    }
    ifaces_[i]->postSetMode(msg);
  }

  void postParamRequestRead(const ParamRequestRead& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postParamRequestRead(msg);
    }
    ifaces_[i]->postParamRequestRead(msg);
  }

  void postParamRequestList(const ParamRequestList& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postParamRequestList(msg);
    }
    ifaces_[i]->postParamRequestList(msg);
  }

  void postParamValue(const ParamValue& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postParamValue(msg);
    }
    ifaces_[i]->postParamValue(msg);
  }

  void postParamSet(const ParamSet& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postParamSet(msg);
    }
    ifaces_[i]->postParamSet(msg);
  }

  void postGpsRawInt(const GpsRawInt& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postGpsRawInt(msg);
    }
    ifaces_[i]->postGpsRawInt(msg);
  }

  void postGpsStatus(const GpsStatus& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postGpsStatus(msg);
    }
    ifaces_[i]->postGpsStatus(msg);
  }

  void postScaledImu(const ScaledImu& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postScaledImu(msg);
    }
    ifaces_[i]->postScaledImu(msg);
  }

  void postRawImu(const RawImu& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRawImu(msg);
    }
    ifaces_[i]->postRawImu(msg);
  }

  void postRawPressure(const RawPressure& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRawPressure(msg);
    }
    ifaces_[i]->postRawPressure(msg);
  }

  void postScaledPressure(const ScaledPressure& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postScaledPressure(msg);
    }
    ifaces_[i]->postScaledPressure(msg);
  }

  void postAttitude(const Attitude& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postAttitude(msg);
    }
    ifaces_[i]->postAttitude(msg);
  }

  void postAttitudeQuaternion(const AttitudeQuaternion& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postAttitudeQuaternion(msg);
    }
    ifaces_[i]->postAttitudeQuaternion(msg);
  }

  void postLocalPositionNed(const LocalPositionNed& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postLocalPositionNed(msg);
    }
    ifaces_[i]->postLocalPositionNed(msg);
  }

  void postGlobalPositionInt(const GlobalPositionInt& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postGlobalPositionInt(msg);
    }
    ifaces_[i]->postGlobalPositionInt(msg);
  }

  void postRcChannelsScaled(const RcChannelsScaled& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRcChannelsScaled(msg);
    }
    ifaces_[i]->postRcChannelsScaled(msg);
  }

  void postRcChannelsRaw(const RcChannelsRaw& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRcChannelsRaw(msg);
    }
    ifaces_[i]->postRcChannelsRaw(msg);
  }

  void postServoOutputRaw(const ServoOutputRaw& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postServoOutputRaw(msg);
    }
    ifaces_[i]->postServoOutputRaw(msg);
  }

  void postMissionRequestPartialList(const MissionRequestPartialList& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionRequestPartialList(msg);
    }
    ifaces_[i]->postMissionRequestPartialList(msg);
  }

  void postMissionWritePartialList(const MissionWritePartialList& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionWritePartialList(msg);
    }
    ifaces_[i]->postMissionWritePartialList(msg);
  }

  void postMissionItem(const MissionItem& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionItem(msg);
    }
    ifaces_[i]->postMissionItem(msg);
  }

  void postMissionRequest(const MissionRequest& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionRequest(msg);
    }
    ifaces_[i]->postMissionRequest(msg);
  }

  void postMissionSetCurrent(const MissionSetCurrent& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionSetCurrent(msg);
    }
    ifaces_[i]->postMissionSetCurrent(msg);
  }

  void postMissionCurrent(const MissionCurrent& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionCurrent(msg);
    }
    ifaces_[i]->postMissionCurrent(msg);
  }

  void postMissionRequestList(const MissionRequestList& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionRequestList(msg);
    }
    ifaces_[i]->postMissionRequestList(msg);
  }

  void postMissionCount(const MissionCount& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionCount(msg);
    }
    ifaces_[i]->postMissionCount(msg);
  }

  void postMissionClearAll(const MissionClearAll& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionClearAll(msg);
    }
    ifaces_[i]->postMissionClearAll(msg);
  }

  void postMissionItemReached(const MissionItemReached& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionItemReached(msg);
    }
    ifaces_[i]->postMissionItemReached(msg);
  }

  void postMissionAck(const MissionAck& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMissionAck(msg);
    }
    ifaces_[i]->postMissionAck(msg);
  }

  void postSetGpsGlobalOrigin(const SetGpsGlobalOrigin& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetGpsGlobalOrigin(msg);
    }
    ifaces_[i]->postSetGpsGlobalOrigin(msg);
  }

  void postGpsGlobalOrigin(const GpsGlobalOrigin& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postGpsGlobalOrigin(msg);
    }
    ifaces_[i]->postGpsGlobalOrigin(msg);
  }

  void postSetLocalPositionSetpoint(const SetLocalPositionSetpoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetLocalPositionSetpoint(msg);
    }
    ifaces_[i]->postSetLocalPositionSetpoint(msg);
  }

  void postLocalPositionSetpoint(const LocalPositionSetpoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postLocalPositionSetpoint(msg);
    }
    ifaces_[i]->postLocalPositionSetpoint(msg);
  }

  void postGlobalPositionSetpointInt(const GlobalPositionSetpointInt& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postGlobalPositionSetpointInt(msg);
    }
    ifaces_[i]->postGlobalPositionSetpointInt(msg);
  }

  void postSetGlobalPositionSetpointInt(const SetGlobalPositionSetpointInt& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetGlobalPositionSetpointInt(msg);
    }
    ifaces_[i]->postSetGlobalPositionSetpointInt(msg);
  }

  void postSafetySetAllowedArea(const SafetySetAllowedArea& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSafetySetAllowedArea(msg);
    }
    ifaces_[i]->postSafetySetAllowedArea(msg);
  }

  void postSafetyAllowedArea(const SafetyAllowedArea& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSafetyAllowedArea(msg);
    }
    ifaces_[i]->postSafetyAllowedArea(msg);
  }

  void postSetRollPitchYawThrust(const SetRollPitchYawThrust& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetRollPitchYawThrust(msg);
    }
    ifaces_[i]->postSetRollPitchYawThrust(msg);
  }

  void postSetRollPitchYawSpeedThrust(const SetRollPitchYawSpeedThrust& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetRollPitchYawSpeedThrust(msg);
    }
    ifaces_[i]->postSetRollPitchYawSpeedThrust(msg);
  }

  void postRollPitchYawThrustSetpoint(const RollPitchYawThrustSetpoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRollPitchYawThrustSetpoint(msg);
    }
    ifaces_[i]->postRollPitchYawThrustSetpoint(msg);
  }

  void postRollPitchYawSpeedThrustSetpoint(const RollPitchYawSpeedThrustSetpoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRollPitchYawSpeedThrustSetpoint(msg);
    }
    ifaces_[i]->postRollPitchYawSpeedThrustSetpoint(msg);
  }

  void postSetQuadMotorsSetpoint(const SetQuadMotorsSetpoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetQuadMotorsSetpoint(msg);
    }
    ifaces_[i]->postSetQuadMotorsSetpoint(msg);
  }

  void postSetQuadSwarmRollPitchYawThrust(const SetQuadSwarmRollPitchYawThrust& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetQuadSwarmRollPitchYawThrust(msg);
    }
    ifaces_[i]->postSetQuadSwarmRollPitchYawThrust(msg);
  }

  void postNavControllerOutput(const NavControllerOutput& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postNavControllerOutput(msg);
    }
    ifaces_[i]->postNavControllerOutput(msg);
  }

  void postSetQuadSwarmLedRollPitchYawThrust(const SetQuadSwarmLedRollPitchYawThrust& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetQuadSwarmLedRollPitchYawThrust(msg);
    }
    ifaces_[i]->postSetQuadSwarmLedRollPitchYawThrust(msg);
  }

  void postStateCorrection(const StateCorrection& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postStateCorrection(msg);
    }
    ifaces_[i]->postStateCorrection(msg);
  }

  void postRequestDataStream(const RequestDataStream& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRequestDataStream(msg);
    }
    ifaces_[i]->postRequestDataStream(msg);
  }

  void postDataStream(const DataStream& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postDataStream(msg);
    }
    ifaces_[i]->postDataStream(msg);
  }

  void postManualControl(const ManualControl& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postManualControl(msg);
    }
    ifaces_[i]->postManualControl(msg);
  }

  void postRcChannelsOverride(const RcChannelsOverride& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRcChannelsOverride(msg);
    }
    ifaces_[i]->postRcChannelsOverride(msg);
  }

  void postVfrHud(const VfrHud& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postVfrHud(msg);
    }
    ifaces_[i]->postVfrHud(msg);
  }

  void postCommandLong(const CommandLong& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postCommandLong(msg);
    }
    ifaces_[i]->postCommandLong(msg);
  }

  void postCommandAck(const CommandAck& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postCommandAck(msg);
    }
    ifaces_[i]->postCommandAck(msg);
  }

  void postRollPitchYawRatesThrustSetpoint(const RollPitchYawRatesThrustSetpoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRollPitchYawRatesThrustSetpoint(msg);
    }
    ifaces_[i]->postRollPitchYawRatesThrustSetpoint(msg);
  }

  void postManualSetpoint(const ManualSetpoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postManualSetpoint(msg);
    }
    ifaces_[i]->postManualSetpoint(msg);
  }

  void postLocalPositionNedSystemGlobalOffset(const LocalPositionNedSystemGlobalOffset& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postLocalPositionNedSystemGlobalOffset(msg);
    }
    ifaces_[i]->postLocalPositionNedSystemGlobalOffset(msg);
  }

  void postHilState(const HilState& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postHilState(msg);
    }
    ifaces_[i]->postHilState(msg);
  }

  void postHilControls(const HilControls& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postHilControls(msg);
    }
    ifaces_[i]->postHilControls(msg);
  }

  void postHilRcInputsRaw(const HilRcInputsRaw& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postHilRcInputsRaw(msg);
    }
    ifaces_[i]->postHilRcInputsRaw(msg);
  }

  void postOpticalFlow(const OpticalFlow& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postOpticalFlow(msg);
    }
    ifaces_[i]->postOpticalFlow(msg);
  }

  void postGlobalVisionPositionEstimate(const GlobalVisionPositionEstimate& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postGlobalVisionPositionEstimate(msg);
    }
    ifaces_[i]->postGlobalVisionPositionEstimate(msg);
  }

  void postVisionPositionEstimate(const VisionPositionEstimate& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postVisionPositionEstimate(msg);
    }
    ifaces_[i]->postVisionPositionEstimate(msg);
  }

  void postVisionSpeedEstimate(const VisionSpeedEstimate& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postVisionSpeedEstimate(msg);
    }
    ifaces_[i]->postVisionSpeedEstimate(msg);
  }

  void postViconPositionEstimate(const ViconPositionEstimate& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postViconPositionEstimate(msg);
    }
    ifaces_[i]->postViconPositionEstimate(msg);
  }

  void postHighresImu(const HighresImu& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postHighresImu(msg);
    }
    ifaces_[i]->postHighresImu(msg);
  }

  void postOmnidirectionalFlow(const OmnidirectionalFlow& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postOmnidirectionalFlow(msg);
    }
    ifaces_[i]->postOmnidirectionalFlow(msg);
  }

  void postFileTransferStart(const FileTransferStart& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postFileTransferStart(msg);
    }
    ifaces_[i]->postFileTransferStart(msg);
  }

  void postFileTransferDirList(const FileTransferDirList& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postFileTransferDirList(msg);
    }
    ifaces_[i]->postFileTransferDirList(msg);
  }

  void postFileTransferRes(const FileTransferRes& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postFileTransferRes(msg);
    }
    ifaces_[i]->postFileTransferRes(msg);
  }

  void postBatteryStatus(const BatteryStatus& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postBatteryStatus(msg);
    }
    ifaces_[i]->postBatteryStatus(msg);
  }

  void postSetpoint8dof(const Setpoint8dof& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetpoint8dof(msg);
    }
    ifaces_[i]->postSetpoint8dof(msg);
  }

  void postSetpoint6dof(const Setpoint6dof& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetpoint6dof(msg);
    }
    ifaces_[i]->postSetpoint6dof(msg);
  }

  void postMemoryVect(const MemoryVect& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMemoryVect(msg);
    }
    ifaces_[i]->postMemoryVect(msg);
  }

  void postDebugVect(const DebugVect& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postDebugVect(msg);
    }
    ifaces_[i]->postDebugVect(msg);
  }

  void postNamedValueFloat(const NamedValueFloat& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postNamedValueFloat(msg);
    }
    ifaces_[i]->postNamedValueFloat(msg);
  }

  void postNamedValueInt(const NamedValueInt& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postNamedValueInt(msg);
    }
    ifaces_[i]->postNamedValueInt(msg);
  }

  void postStatustext(const Statustext& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postStatustext(msg);
    }
    ifaces_[i]->postStatustext(msg);
  }

  void postDebug(const Debug& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postDebug(msg);
    }
    ifaces_[i]->postDebug(msg);
  }

};

}} // namespace

#endif
