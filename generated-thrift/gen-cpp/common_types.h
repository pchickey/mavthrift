/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace mavlink { namespace thrift {

struct CommonMessageTypes {
  enum type {
    HEARTBEAT = 0,
    SYS_STATUS = 1,
    SYSTEM_TIME = 2,
    PING = 3,
    CHANGE_OPERATOR_CONTROL = 4,
    CHANGE_OPERATOR_CONTROL_ACK = 5,
    AUTH_KEY = 6,
    SET_MODE = 7,
    PARAM_REQUEST_READ = 8,
    PARAM_REQUEST_LIST = 9,
    PARAM_VALUE = 10,
    PARAM_SET = 11,
    GPS_RAW_INT = 12,
    GPS_STATUS = 13,
    SCALED_IMU = 14,
    RAW_IMU = 15,
    RAW_PRESSURE = 16,
    SCALED_PRESSURE = 17,
    ATTITUDE = 18,
    ATTITUDE_QUATERNION = 19,
    LOCAL_POSITION_NED = 20,
    GLOBAL_POSITION_INT = 21,
    RC_CHANNELS_SCALED = 22,
    RC_CHANNELS_RAW = 23,
    SERVO_OUTPUT_RAW = 24,
    MISSION_REQUEST_PARTIAL_LIST = 25,
    MISSION_WRITE_PARTIAL_LIST = 26,
    MISSION_ITEM = 27,
    MISSION_REQUEST = 28,
    MISSION_SET_CURRENT = 29,
    MISSION_CURRENT = 30,
    MISSION_REQUEST_LIST = 31,
    MISSION_COUNT = 32,
    MISSION_CLEAR_ALL = 33,
    MISSION_ITEM_REACHED = 34,
    MISSION_ACK = 35,
    SET_GPS_GLOBAL_ORIGIN = 36,
    GPS_GLOBAL_ORIGIN = 37,
    SET_LOCAL_POSITION_SETPOINT = 38,
    LOCAL_POSITION_SETPOINT = 39,
    GLOBAL_POSITION_SETPOINT_INT = 40,
    SET_GLOBAL_POSITION_SETPOINT_INT = 41,
    SAFETY_SET_ALLOWED_AREA = 42,
    SAFETY_ALLOWED_AREA = 43,
    SET_ROLL_PITCH_YAW_THRUST = 44,
    SET_ROLL_PITCH_YAW_SPEED_THRUST = 45,
    ROLL_PITCH_YAW_THRUST_SETPOINT = 46,
    ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT = 47,
    SET_QUAD_MOTORS_SETPOINT = 48,
    SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST = 49,
    NAV_CONTROLLER_OUTPUT = 50,
    SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST = 51,
    STATE_CORRECTION = 52,
    REQUEST_DATA_STREAM = 53,
    DATA_STREAM = 54,
    MANUAL_CONTROL = 55,
    RC_CHANNELS_OVERRIDE = 56,
    VFR_HUD = 57,
    COMMAND_LONG = 58,
    COMMAND_ACK = 59,
    ROLL_PITCH_YAW_RATES_THRUST_SETPOINT = 60,
    MANUAL_SETPOINT = 61,
    LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = 62,
    HIL_STATE = 63,
    HIL_CONTROLS = 64,
    HIL_RC_INPUTS_RAW = 65,
    OPTICAL_FLOW = 66,
    GLOBAL_VISION_POSITION_ESTIMATE = 67,
    VISION_POSITION_ESTIMATE = 68,
    VISION_SPEED_ESTIMATE = 69,
    VICON_POSITION_ESTIMATE = 70,
    HIGHRES_IMU = 71,
    OMNIDIRECTIONAL_FLOW = 72,
    FILE_TRANSFER_START = 73,
    FILE_TRANSFER_DIR_LIST = 74,
    FILE_TRANSFER_RES = 75,
    BATTERY_STATUS = 76,
    SETPOINT_8DOF = 77,
    SETPOINT_6DOF = 78,
    MEMORY_VECT = 79,
    DEBUG_VECT = 80,
    NAMED_VALUE_FLOAT = 81,
    NAMED_VALUE_INT = 82,
    STATUSTEXT = 83,
    DEBUG = 84
  };
};

extern const std::map<int, const char*> _CommonMessageTypes_VALUES_TO_NAMES;

struct Autopilot {
  enum type {
    GENERIC = 0,
    PIXHAWK = 1,
    SLUGS = 2,
    ARDUPILOTMEGA = 3,
    OPENPILOT = 4,
    GENERIC_WAYPOINTS_ONLY = 5,
    GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6,
    GENERIC_MISSION_FULL = 7,
    INVALID = 8,
    PPZ = 9,
    UDB = 10,
    FP = 11,
    PX4 = 12,
    SMACCMPILOT = 13
  };
};

extern const std::map<int, const char*> _Autopilot_VALUES_TO_NAMES;

struct Type {
  enum type {
    GENERIC = 0,
    FIXED_WING = 1,
    QUADROTOR = 2,
    COAXIAL = 3,
    HELICOPTER = 4,
    ANTENNA_TRACKER = 5,
    GCS = 6,
    AIRSHIP = 7,
    FREE_BALLOON = 8,
    ROCKET = 9,
    GROUND_ROVER = 10,
    SURFACE_BOAT = 11,
    SUBMARINE = 12,
    HEXAROTOR = 13,
    OCTOROTOR = 14,
    TRICOPTER = 15,
    FLAPPING_WING = 16,
    KITE = 17
  };
};

extern const std::map<int, const char*> _Type_VALUES_TO_NAMES;

struct Mode_flag {
  enum type {
    CUSTOM_MODE_ENABLED = 1,
    TEST_ENABLED = 2,
    AUTO_ENABLED = 4,
    GUIDED_ENABLED = 8,
    STABILIZE_ENABLED = 16,
    HIL_ENABLED = 32,
    MANUAL_INPUT_ENABLED = 64,
    SAFETY_ARMED = 128
  };
};

extern const std::map<int, const char*> _Mode_flag_VALUES_TO_NAMES;

struct Mode_flag_decode_position {
  enum type {
    CUSTOM_MODE = 1,
    TEST = 2,
    AUTO = 4,
    GUIDED = 8,
    STABILIZE = 16,
    HIL = 32,
    MANUAL = 64,
    SAFETY = 128
  };
};

extern const std::map<int, const char*> _Mode_flag_decode_position_VALUES_TO_NAMES;

struct Goto {
  enum type {
    DO_HOLD = 0,
    DO_CONTINUE = 1,
    HOLD_AT_CURRENT_POSITION = 2,
    HOLD_AT_SPECIFIED_POSITION = 3
  };
};

extern const std::map<int, const char*> _Goto_VALUES_TO_NAMES;

struct Mode {
  enum type {
    PREFLIGHT = 0,
    MANUAL_DISARMED = 64,
    TEST_DISARMED = 66,
    STABILIZE_DISARMED = 80,
    GUIDED_DISARMED = 88,
    AUTO_DISARMED = 92,
    MANUAL_ARMED = 192,
    TEST_ARMED = 194,
    STABILIZE_ARMED = 208,
    GUIDED_ARMED = 216,
    AUTO_ARMED = 220
  };
};

extern const std::map<int, const char*> _Mode_VALUES_TO_NAMES;

struct State {
  enum type {
    UNINIT = 0,
    BOOT = 1,
    CALIBRATING = 2,
    STANDBY = 3,
    ACTIVE = 4,
    CRITICAL = 5,
    EMERGENCY = 6,
    POWEROFF = 7
  };
};

extern const std::map<int, const char*> _State_VALUES_TO_NAMES;

struct Component {
  enum type {
    ALL = 0,
    CAMERA = 100,
    SERVO1 = 140,
    SERVO2 = 141,
    SERVO3 = 142,
    SERVO4 = 143,
    SERVO5 = 144,
    SERVO6 = 145,
    SERVO7 = 146,
    SERVO8 = 147,
    SERVO9 = 148,
    SERVO10 = 149,
    SERVO11 = 150,
    SERVO12 = 151,
    SERVO13 = 152,
    SERVO14 = 153,
    MAPPER = 180,
    MISSIONPLANNER = 190,
    PATHPLANNER = 195,
    IMU = 200,
    IMU_2 = 201,
    IMU_3 = 202,
    GPS = 220,
    UDP_BRIDGE = 240,
    UART_BRIDGE = 241,
    SYSTEM_CONTROL = 250,
    MAV_COMPONENT_ENUM_END = 251
  };
};

extern const std::map<int, const char*> _Component_VALUES_TO_NAMES;

struct Frame {
  enum type {
    GLOBAL = 0,
    LOCAL_NED = 1,
    MISSION = 2,
    GLOBAL_RELATIVE_ALT = 3,
    LOCAL_ENU = 4
  };
};

extern const std::map<int, const char*> _Frame_VALUES_TO_NAMES;

struct Data_stream_type {
  enum type {
    IMG_JPEG = 1,
    IMG_BMP = 2,
    IMG_RAW8U = 3,
    IMG_RAW32U = 4,
    IMG_PGM = 5,
    IMG_PNG = 6,
    TYPE_ENUM_END = 7
  };
};

extern const std::map<int, const char*> _Data_stream_type_VALUES_TO_NAMES;

struct Data_stream {
  enum type {
    ALL = 0,
    RAW_SENSORS = 1,
    EXTENDED_STATUS = 2,
    RC_CHANNELS = 3,
    RAW_CONTROLLER = 4,
    POSITION = 6,
    EXTRA1 = 10,
    EXTRA2 = 11,
    EXTRA3 = 12
  };
};

extern const std::map<int, const char*> _Data_stream_VALUES_TO_NAMES;

struct Roi {
  enum type {
    NONE = 0,
    WPNEXT = 1,
    WPINDEX = 2,
    LOCATION = 3,
    TARGET = 4
  };
};

extern const std::map<int, const char*> _Roi_VALUES_TO_NAMES;

struct Cmd_ack {
  enum type {
    OK = 1,
    ERR_FAIL = 2,
    ERR_ACCESS_DENIED = 3,
    ERR_NOT_SUPPORTED = 4,
    ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5,
    ERR_COORDINATES_OUT_OF_RANGE = 6,
    ERR_X_LAT_OUT_OF_RANGE = 7,
    ERR_Y_LON_OUT_OF_RANGE = 8,
    ERR_Z_ALT_OUT_OF_RANGE = 9
  };
};

extern const std::map<int, const char*> _Cmd_ack_VALUES_TO_NAMES;

struct Param_type {
  enum type {
    UINT8 = 1,
    INT8 = 2,
    UINT16 = 3,
    INT16 = 4,
    UINT32 = 5,
    INT32 = 6,
    UINT64 = 7,
    INT64 = 8,
    REAL32 = 9,
    REAL64 = 10
  };
};

extern const std::map<int, const char*> _Param_type_VALUES_TO_NAMES;

struct Result {
  enum type {
    ACCEPTED = 0,
    TEMPORARILY_REJECTED = 1,
    DENIED = 2,
    UNSUPPORTED = 3,
    FAILED = 4
  };
};

extern const std::map<int, const char*> _Result_VALUES_TO_NAMES;

struct Mission_result {
  enum type {
    ACCEPTED = 0,
    ERROR = 1,
    UNSUPPORTED_FRAME = 2,
    UNSUPPORTED = 3,
    NO_SPACE = 4,
    INVALID = 5,
    INVALID_PARAM1 = 6,
    INVALID_PARAM2 = 7,
    INVALID_PARAM3 = 8,
    INVALID_PARAM4 = 9,
    INVALID_PARAM5_X = 10,
    INVALID_PARAM6_Y = 11,
    INVALID_PARAM7 = 12,
    INVALID_SEQUENCE = 13,
    DENIED = 14,
    RESULT_ENUM_END = 15
  };
};

extern const std::map<int, const char*> _Mission_result_VALUES_TO_NAMES;

struct Severity {
  enum type {
    EMERGENCY = 0,
    ALERT = 1,
    CRITICAL = 2,
    ERROR = 3,
    WARNING = 4,
    NOTICE = 5,
    INFO = 6,
    DEBUG = 7
  };
};

extern const std::map<int, const char*> _Severity_VALUES_TO_NAMES;

typedef struct _Heartbeat__isset {
  _Heartbeat__isset() : mavtype(false), autopilot(false), base_mode(false), custom_mode(false), system_status(false), mavlink_version(false) {}
  bool mavtype;
  bool autopilot;
  bool base_mode;
  bool custom_mode;
  bool system_status;
  bool mavlink_version;
} _Heartbeat__isset;

class Heartbeat {
 public:

  static const char* ascii_fingerprint; // = "0EFA8CE78DE26206DEE3AD7198927C22";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xFA,0x8C,0xE7,0x8D,0xE2,0x62,0x06,0xDE,0xE3,0xAD,0x71,0x98,0x92,0x7C,0x22};

  Heartbeat() : mavtype(0), autopilot(0), base_mode(0), custom_mode(0), system_status(0), mavlink_version(0) {
  }

  virtual ~Heartbeat() throw() {}

  int8_t mavtype;
  int8_t autopilot;
  int8_t base_mode;
  int32_t custom_mode;
  int8_t system_status;
  int8_t mavlink_version;

  _Heartbeat__isset __isset;

  void __set_mavtype(const int8_t val) {
    mavtype = val;
  }

  void __set_autopilot(const int8_t val) {
    autopilot = val;
  }

  void __set_base_mode(const int8_t val) {
    base_mode = val;
  }

  void __set_custom_mode(const int32_t val) {
    custom_mode = val;
  }

  void __set_system_status(const int8_t val) {
    system_status = val;
  }

  void __set_mavlink_version(const int8_t val) {
    mavlink_version = val;
  }

  bool operator == (const Heartbeat & rhs) const
  {
    if (!(mavtype == rhs.mavtype))
      return false;
    if (!(autopilot == rhs.autopilot))
      return false;
    if (!(base_mode == rhs.base_mode))
      return false;
    if (!(custom_mode == rhs.custom_mode))
      return false;
    if (!(system_status == rhs.system_status))
      return false;
    if (!(mavlink_version == rhs.mavlink_version))
      return false;
    return true;
  }
  bool operator != (const Heartbeat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Heartbeat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Heartbeat &a, Heartbeat &b);

typedef struct _SysStatus__isset {
  _SysStatus__isset() : onboard_control_sensors_present(false), onboard_control_sensors_enabled(false), onboard_control_sensors_health(false), load(false), voltage_battery(false), current_battery(false), battery_remaining(false), drop_rate_comm(false), errors_comm(false), errors_count1(false), errors_count2(false), errors_count3(false), errors_count4(false) {}
  bool onboard_control_sensors_present;
  bool onboard_control_sensors_enabled;
  bool onboard_control_sensors_health;
  bool load;
  bool voltage_battery;
  bool current_battery;
  bool battery_remaining;
  bool drop_rate_comm;
  bool errors_comm;
  bool errors_count1;
  bool errors_count2;
  bool errors_count3;
  bool errors_count4;
} _SysStatus__isset;

class SysStatus {
 public:

  static const char* ascii_fingerprint; // = "70ACCDF6992BFABEC03867EB6DEF0D2C";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xAC,0xCD,0xF6,0x99,0x2B,0xFA,0xBE,0xC0,0x38,0x67,0xEB,0x6D,0xEF,0x0D,0x2C};

  SysStatus() : onboard_control_sensors_present(0), onboard_control_sensors_enabled(0), onboard_control_sensors_health(0), load(0), voltage_battery(0), current_battery(0), battery_remaining(0), drop_rate_comm(0), errors_comm(0), errors_count1(0), errors_count2(0), errors_count3(0), errors_count4(0) {
  }

  virtual ~SysStatus() throw() {}

  int32_t onboard_control_sensors_present;
  int32_t onboard_control_sensors_enabled;
  int32_t onboard_control_sensors_health;
  int16_t load;
  int16_t voltage_battery;
  int16_t current_battery;
  int8_t battery_remaining;
  int16_t drop_rate_comm;
  int16_t errors_comm;
  int16_t errors_count1;
  int16_t errors_count2;
  int16_t errors_count3;
  int16_t errors_count4;

  _SysStatus__isset __isset;

  void __set_onboard_control_sensors_present(const int32_t val) {
    onboard_control_sensors_present = val;
  }

  void __set_onboard_control_sensors_enabled(const int32_t val) {
    onboard_control_sensors_enabled = val;
  }

  void __set_onboard_control_sensors_health(const int32_t val) {
    onboard_control_sensors_health = val;
  }

  void __set_load(const int16_t val) {
    load = val;
  }

  void __set_voltage_battery(const int16_t val) {
    voltage_battery = val;
  }

  void __set_current_battery(const int16_t val) {
    current_battery = val;
  }

  void __set_battery_remaining(const int8_t val) {
    battery_remaining = val;
  }

  void __set_drop_rate_comm(const int16_t val) {
    drop_rate_comm = val;
  }

  void __set_errors_comm(const int16_t val) {
    errors_comm = val;
  }

  void __set_errors_count1(const int16_t val) {
    errors_count1 = val;
  }

  void __set_errors_count2(const int16_t val) {
    errors_count2 = val;
  }

  void __set_errors_count3(const int16_t val) {
    errors_count3 = val;
  }

  void __set_errors_count4(const int16_t val) {
    errors_count4 = val;
  }

  bool operator == (const SysStatus & rhs) const
  {
    if (!(onboard_control_sensors_present == rhs.onboard_control_sensors_present))
      return false;
    if (!(onboard_control_sensors_enabled == rhs.onboard_control_sensors_enabled))
      return false;
    if (!(onboard_control_sensors_health == rhs.onboard_control_sensors_health))
      return false;
    if (!(load == rhs.load))
      return false;
    if (!(voltage_battery == rhs.voltage_battery))
      return false;
    if (!(current_battery == rhs.current_battery))
      return false;
    if (!(battery_remaining == rhs.battery_remaining))
      return false;
    if (!(drop_rate_comm == rhs.drop_rate_comm))
      return false;
    if (!(errors_comm == rhs.errors_comm))
      return false;
    if (!(errors_count1 == rhs.errors_count1))
      return false;
    if (!(errors_count2 == rhs.errors_count2))
      return false;
    if (!(errors_count3 == rhs.errors_count3))
      return false;
    if (!(errors_count4 == rhs.errors_count4))
      return false;
    return true;
  }
  bool operator != (const SysStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SysStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SysStatus &a, SysStatus &b);

typedef struct _SystemTime__isset {
  _SystemTime__isset() : time_unix_usec(false), time_boot_ms(false) {}
  bool time_unix_usec;
  bool time_boot_ms;
} _SystemTime__isset;

class SystemTime {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  SystemTime() : time_unix_usec(0), time_boot_ms(0) {
  }

  virtual ~SystemTime() throw() {}

  int64_t time_unix_usec;
  int32_t time_boot_ms;

  _SystemTime__isset __isset;

  void __set_time_unix_usec(const int64_t val) {
    time_unix_usec = val;
  }

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  bool operator == (const SystemTime & rhs) const
  {
    if (!(time_unix_usec == rhs.time_unix_usec))
      return false;
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    return true;
  }
  bool operator != (const SystemTime &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemTime & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SystemTime &a, SystemTime &b);

typedef struct _Ping__isset {
  _Ping__isset() : time_usec(false), seq(false), target_system(false), target_component(false) {}
  bool time_usec;
  bool seq;
  bool target_system;
  bool target_component;
} _Ping__isset;

class Ping {
 public:

  static const char* ascii_fingerprint; // = "7B716BB2B6AFD2DADAC99C5417812547";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x71,0x6B,0xB2,0xB6,0xAF,0xD2,0xDA,0xDA,0xC9,0x9C,0x54,0x17,0x81,0x25,0x47};

  Ping() : time_usec(0), seq(0), target_system(0), target_component(0) {
  }

  virtual ~Ping() throw() {}

  int64_t time_usec;
  int32_t seq;
  int8_t target_system;
  int8_t target_component;

  _Ping__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_seq(const int32_t val) {
    seq = val;
  }

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  bool operator == (const Ping & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    return true;
  }
  bool operator != (const Ping &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ping & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Ping &a, Ping &b);

typedef struct _ChangeOperatorControl__isset {
  _ChangeOperatorControl__isset() : target_system(false), control_request(false), version(false), passkey(false) {}
  bool target_system;
  bool control_request;
  bool version;
  bool passkey;
} _ChangeOperatorControl__isset;

class ChangeOperatorControl {
 public:

  static const char* ascii_fingerprint; // = "056FC51AB3B69C0EDF24812BEF44985C";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0x6F,0xC5,0x1A,0xB3,0xB6,0x9C,0x0E,0xDF,0x24,0x81,0x2B,0xEF,0x44,0x98,0x5C};

  ChangeOperatorControl() : target_system(0), control_request(0), version(0) {
  }

  virtual ~ChangeOperatorControl() throw() {}

  int8_t target_system;
  int8_t control_request;
  int8_t version;
  std::vector<int8_t>  passkey;

  _ChangeOperatorControl__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_control_request(const int8_t val) {
    control_request = val;
  }

  void __set_version(const int8_t val) {
    version = val;
  }

  void __set_passkey(const std::vector<int8_t> & val) {
    passkey = val;
  }

  bool operator == (const ChangeOperatorControl & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(control_request == rhs.control_request))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(passkey == rhs.passkey))
      return false;
    return true;
  }
  bool operator != (const ChangeOperatorControl &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeOperatorControl & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangeOperatorControl &a, ChangeOperatorControl &b);

typedef struct _ChangeOperatorControlAck__isset {
  _ChangeOperatorControlAck__isset() : gcs_system_id(false), control_request(false), ack(false) {}
  bool gcs_system_id;
  bool control_request;
  bool ack;
} _ChangeOperatorControlAck__isset;

class ChangeOperatorControlAck {
 public:

  static const char* ascii_fingerprint; // = "0A77C25C826CC107FD266A55D263629B";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x77,0xC2,0x5C,0x82,0x6C,0xC1,0x07,0xFD,0x26,0x6A,0x55,0xD2,0x63,0x62,0x9B};

  ChangeOperatorControlAck() : gcs_system_id(0), control_request(0), ack(0) {
  }

  virtual ~ChangeOperatorControlAck() throw() {}

  int8_t gcs_system_id;
  int8_t control_request;
  int8_t ack;

  _ChangeOperatorControlAck__isset __isset;

  void __set_gcs_system_id(const int8_t val) {
    gcs_system_id = val;
  }

  void __set_control_request(const int8_t val) {
    control_request = val;
  }

  void __set_ack(const int8_t val) {
    ack = val;
  }

  bool operator == (const ChangeOperatorControlAck & rhs) const
  {
    if (!(gcs_system_id == rhs.gcs_system_id))
      return false;
    if (!(control_request == rhs.control_request))
      return false;
    if (!(ack == rhs.ack))
      return false;
    return true;
  }
  bool operator != (const ChangeOperatorControlAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeOperatorControlAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangeOperatorControlAck &a, ChangeOperatorControlAck &b);

typedef struct _AuthKey__isset {
  _AuthKey__isset() : key(false) {}
  bool key;
} _AuthKey__isset;

class AuthKey {
 public:

  static const char* ascii_fingerprint; // = "1F71178153FA37316E045C21ACA93767";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x71,0x17,0x81,0x53,0xFA,0x37,0x31,0x6E,0x04,0x5C,0x21,0xAC,0xA9,0x37,0x67};

  AuthKey() {
  }

  virtual ~AuthKey() throw() {}

  std::vector<int8_t>  key;

  _AuthKey__isset __isset;

  void __set_key(const std::vector<int8_t> & val) {
    key = val;
  }

  bool operator == (const AuthKey & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const AuthKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AuthKey &a, AuthKey &b);

typedef struct _SetMode__isset {
  _SetMode__isset() : target_system(false), base_mode(false), custom_mode(false) {}
  bool target_system;
  bool base_mode;
  bool custom_mode;
} _SetMode__isset;

class SetMode {
 public:

  static const char* ascii_fingerprint; // = "B6124282B924F6CAC4316822D6D840E8";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x12,0x42,0x82,0xB9,0x24,0xF6,0xCA,0xC4,0x31,0x68,0x22,0xD6,0xD8,0x40,0xE8};

  SetMode() : target_system(0), base_mode(0), custom_mode(0) {
  }

  virtual ~SetMode() throw() {}

  int8_t target_system;
  int8_t base_mode;
  int32_t custom_mode;

  _SetMode__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_base_mode(const int8_t val) {
    base_mode = val;
  }

  void __set_custom_mode(const int32_t val) {
    custom_mode = val;
  }

  bool operator == (const SetMode & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(base_mode == rhs.base_mode))
      return false;
    if (!(custom_mode == rhs.custom_mode))
      return false;
    return true;
  }
  bool operator != (const SetMode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetMode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetMode &a, SetMode &b);

typedef struct _ParamRequestRead__isset {
  _ParamRequestRead__isset() : target_system(false), target_component(false), param_id(false), param_index(false) {}
  bool target_system;
  bool target_component;
  bool param_id;
  bool param_index;
} _ParamRequestRead__isset;

class ParamRequestRead {
 public:

  static const char* ascii_fingerprint; // = "C8F5A1A506430C6992993DC79F6DFC9B";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0xF5,0xA1,0xA5,0x06,0x43,0x0C,0x69,0x92,0x99,0x3D,0xC7,0x9F,0x6D,0xFC,0x9B};

  ParamRequestRead() : target_system(0), target_component(0), param_index(0) {
  }

  virtual ~ParamRequestRead() throw() {}

  int8_t target_system;
  int8_t target_component;
  std::vector<int8_t>  param_id;
  int16_t param_index;

  _ParamRequestRead__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_param_id(const std::vector<int8_t> & val) {
    param_id = val;
  }

  void __set_param_index(const int16_t val) {
    param_index = val;
  }

  bool operator == (const ParamRequestRead & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(param_id == rhs.param_id))
      return false;
    if (!(param_index == rhs.param_index))
      return false;
    return true;
  }
  bool operator != (const ParamRequestRead &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamRequestRead & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ParamRequestRead &a, ParamRequestRead &b);

typedef struct _ParamRequestList__isset {
  _ParamRequestList__isset() : target_system(false), target_component(false) {}
  bool target_system;
  bool target_component;
} _ParamRequestList__isset;

class ParamRequestList {
 public:

  static const char* ascii_fingerprint; // = "D3B91891CF1F31392E7E70F167226591";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0xB9,0x18,0x91,0xCF,0x1F,0x31,0x39,0x2E,0x7E,0x70,0xF1,0x67,0x22,0x65,0x91};

  ParamRequestList() : target_system(0), target_component(0) {
  }

  virtual ~ParamRequestList() throw() {}

  int8_t target_system;
  int8_t target_component;

  _ParamRequestList__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  bool operator == (const ParamRequestList & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    return true;
  }
  bool operator != (const ParamRequestList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamRequestList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ParamRequestList &a, ParamRequestList &b);

typedef struct _ParamValue__isset {
  _ParamValue__isset() : param_id(false), param_value(false), param_type(false), param_count(false), param_index(false) {}
  bool param_id;
  bool param_value;
  bool param_type;
  bool param_count;
  bool param_index;
} _ParamValue__isset;

class ParamValue {
 public:

  static const char* ascii_fingerprint; // = "62F3116A9EF68AB3A103AED362199C31";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xF3,0x11,0x6A,0x9E,0xF6,0x8A,0xB3,0xA1,0x03,0xAE,0xD3,0x62,0x19,0x9C,0x31};

  ParamValue() : param_value(0), param_type(0), param_count(0), param_index(0) {
  }

  virtual ~ParamValue() throw() {}

  std::vector<int8_t>  param_id;
  double param_value;
  int8_t param_type;
  int16_t param_count;
  int16_t param_index;

  _ParamValue__isset __isset;

  void __set_param_id(const std::vector<int8_t> & val) {
    param_id = val;
  }

  void __set_param_value(const double val) {
    param_value = val;
  }

  void __set_param_type(const int8_t val) {
    param_type = val;
  }

  void __set_param_count(const int16_t val) {
    param_count = val;
  }

  void __set_param_index(const int16_t val) {
    param_index = val;
  }

  bool operator == (const ParamValue & rhs) const
  {
    if (!(param_id == rhs.param_id))
      return false;
    if (!(param_value == rhs.param_value))
      return false;
    if (!(param_type == rhs.param_type))
      return false;
    if (!(param_count == rhs.param_count))
      return false;
    if (!(param_index == rhs.param_index))
      return false;
    return true;
  }
  bool operator != (const ParamValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ParamValue &a, ParamValue &b);

typedef struct _ParamSet__isset {
  _ParamSet__isset() : target_system(false), target_component(false), param_id(false), param_value(false), param_type(false) {}
  bool target_system;
  bool target_component;
  bool param_id;
  bool param_value;
  bool param_type;
} _ParamSet__isset;

class ParamSet {
 public:

  static const char* ascii_fingerprint; // = "E9F3952D9A67072DAC86034590550C9D";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0xF3,0x95,0x2D,0x9A,0x67,0x07,0x2D,0xAC,0x86,0x03,0x45,0x90,0x55,0x0C,0x9D};

  ParamSet() : target_system(0), target_component(0), param_value(0), param_type(0) {
  }

  virtual ~ParamSet() throw() {}

  int8_t target_system;
  int8_t target_component;
  std::vector<int8_t>  param_id;
  double param_value;
  int8_t param_type;

  _ParamSet__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_param_id(const std::vector<int8_t> & val) {
    param_id = val;
  }

  void __set_param_value(const double val) {
    param_value = val;
  }

  void __set_param_type(const int8_t val) {
    param_type = val;
  }

  bool operator == (const ParamSet & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(param_id == rhs.param_id))
      return false;
    if (!(param_value == rhs.param_value))
      return false;
    if (!(param_type == rhs.param_type))
      return false;
    return true;
  }
  bool operator != (const ParamSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ParamSet &a, ParamSet &b);

typedef struct _GpsRawInt__isset {
  _GpsRawInt__isset() : time_usec(false), fix_type(false), lat(false), lon(false), alt(false), eph(false), epv(false), vel(false), cog(false), satellites_visible(false) {}
  bool time_usec;
  bool fix_type;
  bool lat;
  bool lon;
  bool alt;
  bool eph;
  bool epv;
  bool vel;
  bool cog;
  bool satellites_visible;
} _GpsRawInt__isset;

class GpsRawInt {
 public:

  static const char* ascii_fingerprint; // = "0AC4E3E45DFB1F4FF4AF2BBFDF7F9FA0";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xC4,0xE3,0xE4,0x5D,0xFB,0x1F,0x4F,0xF4,0xAF,0x2B,0xBF,0xDF,0x7F,0x9F,0xA0};

  GpsRawInt() : time_usec(0), fix_type(0), lat(0), lon(0), alt(0), eph(0), epv(0), vel(0), cog(0), satellites_visible(0) {
  }

  virtual ~GpsRawInt() throw() {}

  int64_t time_usec;
  int8_t fix_type;
  int32_t lat;
  int32_t lon;
  int32_t alt;
  int16_t eph;
  int16_t epv;
  int16_t vel;
  int16_t cog;
  int8_t satellites_visible;

  _GpsRawInt__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_fix_type(const int8_t val) {
    fix_type = val;
  }

  void __set_lat(const int32_t val) {
    lat = val;
  }

  void __set_lon(const int32_t val) {
    lon = val;
  }

  void __set_alt(const int32_t val) {
    alt = val;
  }

  void __set_eph(const int16_t val) {
    eph = val;
  }

  void __set_epv(const int16_t val) {
    epv = val;
  }

  void __set_vel(const int16_t val) {
    vel = val;
  }

  void __set_cog(const int16_t val) {
    cog = val;
  }

  void __set_satellites_visible(const int8_t val) {
    satellites_visible = val;
  }

  bool operator == (const GpsRawInt & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(fix_type == rhs.fix_type))
      return false;
    if (!(lat == rhs.lat))
      return false;
    if (!(lon == rhs.lon))
      return false;
    if (!(alt == rhs.alt))
      return false;
    if (!(eph == rhs.eph))
      return false;
    if (!(epv == rhs.epv))
      return false;
    if (!(vel == rhs.vel))
      return false;
    if (!(cog == rhs.cog))
      return false;
    if (!(satellites_visible == rhs.satellites_visible))
      return false;
    return true;
  }
  bool operator != (const GpsRawInt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GpsRawInt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GpsRawInt &a, GpsRawInt &b);

typedef struct _GpsStatus__isset {
  _GpsStatus__isset() : satellites_visible(false), satellite_prn(false), satellite_used(false), satellite_elevation(false), satellite_azimuth(false), satellite_snr(false) {}
  bool satellites_visible;
  bool satellite_prn;
  bool satellite_used;
  bool satellite_elevation;
  bool satellite_azimuth;
  bool satellite_snr;
} _GpsStatus__isset;

class GpsStatus {
 public:

  static const char* ascii_fingerprint; // = "2FFFD2FEA4CBC75BFAD62FF43F8E53C3";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0xFF,0xD2,0xFE,0xA4,0xCB,0xC7,0x5B,0xFA,0xD6,0x2F,0xF4,0x3F,0x8E,0x53,0xC3};

  GpsStatus() : satellites_visible(0) {
  }

  virtual ~GpsStatus() throw() {}

  int8_t satellites_visible;
  std::vector<int8_t>  satellite_prn;
  std::vector<int8_t>  satellite_used;
  std::vector<int8_t>  satellite_elevation;
  std::vector<int8_t>  satellite_azimuth;
  std::vector<int8_t>  satellite_snr;

  _GpsStatus__isset __isset;

  void __set_satellites_visible(const int8_t val) {
    satellites_visible = val;
  }

  void __set_satellite_prn(const std::vector<int8_t> & val) {
    satellite_prn = val;
  }

  void __set_satellite_used(const std::vector<int8_t> & val) {
    satellite_used = val;
  }

  void __set_satellite_elevation(const std::vector<int8_t> & val) {
    satellite_elevation = val;
  }

  void __set_satellite_azimuth(const std::vector<int8_t> & val) {
    satellite_azimuth = val;
  }

  void __set_satellite_snr(const std::vector<int8_t> & val) {
    satellite_snr = val;
  }

  bool operator == (const GpsStatus & rhs) const
  {
    if (!(satellites_visible == rhs.satellites_visible))
      return false;
    if (!(satellite_prn == rhs.satellite_prn))
      return false;
    if (!(satellite_used == rhs.satellite_used))
      return false;
    if (!(satellite_elevation == rhs.satellite_elevation))
      return false;
    if (!(satellite_azimuth == rhs.satellite_azimuth))
      return false;
    if (!(satellite_snr == rhs.satellite_snr))
      return false;
    return true;
  }
  bool operator != (const GpsStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GpsStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GpsStatus &a, GpsStatus &b);

typedef struct _ScaledImu__isset {
  _ScaledImu__isset() : time_boot_ms(false), xacc(false), yacc(false), zacc(false), xgyro(false), ygyro(false), zgyro(false), xmag(false), ymag(false), zmag(false) {}
  bool time_boot_ms;
  bool xacc;
  bool yacc;
  bool zacc;
  bool xgyro;
  bool ygyro;
  bool zgyro;
  bool xmag;
  bool ymag;
  bool zmag;
} _ScaledImu__isset;

class ScaledImu {
 public:

  static const char* ascii_fingerprint; // = "5DF0B7420E726FB539ACD486B69D4110";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xF0,0xB7,0x42,0x0E,0x72,0x6F,0xB5,0x39,0xAC,0xD4,0x86,0xB6,0x9D,0x41,0x10};

  ScaledImu() : time_boot_ms(0), xacc(0), yacc(0), zacc(0), xgyro(0), ygyro(0), zgyro(0), xmag(0), ymag(0), zmag(0) {
  }

  virtual ~ScaledImu() throw() {}

  int32_t time_boot_ms;
  int16_t xacc;
  int16_t yacc;
  int16_t zacc;
  int16_t xgyro;
  int16_t ygyro;
  int16_t zgyro;
  int16_t xmag;
  int16_t ymag;
  int16_t zmag;

  _ScaledImu__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_xacc(const int16_t val) {
    xacc = val;
  }

  void __set_yacc(const int16_t val) {
    yacc = val;
  }

  void __set_zacc(const int16_t val) {
    zacc = val;
  }

  void __set_xgyro(const int16_t val) {
    xgyro = val;
  }

  void __set_ygyro(const int16_t val) {
    ygyro = val;
  }

  void __set_zgyro(const int16_t val) {
    zgyro = val;
  }

  void __set_xmag(const int16_t val) {
    xmag = val;
  }

  void __set_ymag(const int16_t val) {
    ymag = val;
  }

  void __set_zmag(const int16_t val) {
    zmag = val;
  }

  bool operator == (const ScaledImu & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(xacc == rhs.xacc))
      return false;
    if (!(yacc == rhs.yacc))
      return false;
    if (!(zacc == rhs.zacc))
      return false;
    if (!(xgyro == rhs.xgyro))
      return false;
    if (!(ygyro == rhs.ygyro))
      return false;
    if (!(zgyro == rhs.zgyro))
      return false;
    if (!(xmag == rhs.xmag))
      return false;
    if (!(ymag == rhs.ymag))
      return false;
    if (!(zmag == rhs.zmag))
      return false;
    return true;
  }
  bool operator != (const ScaledImu &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScaledImu & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScaledImu &a, ScaledImu &b);

typedef struct _RawImu__isset {
  _RawImu__isset() : time_usec(false), xacc(false), yacc(false), zacc(false), xgyro(false), ygyro(false), zgyro(false), xmag(false), ymag(false), zmag(false) {}
  bool time_usec;
  bool xacc;
  bool yacc;
  bool zacc;
  bool xgyro;
  bool ygyro;
  bool zgyro;
  bool xmag;
  bool ymag;
  bool zmag;
} _RawImu__isset;

class RawImu {
 public:

  static const char* ascii_fingerprint; // = "04639A19E5410060C3591D392E953544";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x63,0x9A,0x19,0xE5,0x41,0x00,0x60,0xC3,0x59,0x1D,0x39,0x2E,0x95,0x35,0x44};

  RawImu() : time_usec(0), xacc(0), yacc(0), zacc(0), xgyro(0), ygyro(0), zgyro(0), xmag(0), ymag(0), zmag(0) {
  }

  virtual ~RawImu() throw() {}

  int64_t time_usec;
  int16_t xacc;
  int16_t yacc;
  int16_t zacc;
  int16_t xgyro;
  int16_t ygyro;
  int16_t zgyro;
  int16_t xmag;
  int16_t ymag;
  int16_t zmag;

  _RawImu__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_xacc(const int16_t val) {
    xacc = val;
  }

  void __set_yacc(const int16_t val) {
    yacc = val;
  }

  void __set_zacc(const int16_t val) {
    zacc = val;
  }

  void __set_xgyro(const int16_t val) {
    xgyro = val;
  }

  void __set_ygyro(const int16_t val) {
    ygyro = val;
  }

  void __set_zgyro(const int16_t val) {
    zgyro = val;
  }

  void __set_xmag(const int16_t val) {
    xmag = val;
  }

  void __set_ymag(const int16_t val) {
    ymag = val;
  }

  void __set_zmag(const int16_t val) {
    zmag = val;
  }

  bool operator == (const RawImu & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(xacc == rhs.xacc))
      return false;
    if (!(yacc == rhs.yacc))
      return false;
    if (!(zacc == rhs.zacc))
      return false;
    if (!(xgyro == rhs.xgyro))
      return false;
    if (!(ygyro == rhs.ygyro))
      return false;
    if (!(zgyro == rhs.zgyro))
      return false;
    if (!(xmag == rhs.xmag))
      return false;
    if (!(ymag == rhs.ymag))
      return false;
    if (!(zmag == rhs.zmag))
      return false;
    return true;
  }
  bool operator != (const RawImu &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawImu & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RawImu &a, RawImu &b);

typedef struct _RawPressure__isset {
  _RawPressure__isset() : time_usec(false), press_abs(false), press_diff1(false), press_diff2(false), temperature(false) {}
  bool time_usec;
  bool press_abs;
  bool press_diff1;
  bool press_diff2;
  bool temperature;
} _RawPressure__isset;

class RawPressure {
 public:

  static const char* ascii_fingerprint; // = "9EF42FB72D252D265813F0D2F51C0D06";
  static const uint8_t binary_fingerprint[16]; // = {0x9E,0xF4,0x2F,0xB7,0x2D,0x25,0x2D,0x26,0x58,0x13,0xF0,0xD2,0xF5,0x1C,0x0D,0x06};

  RawPressure() : time_usec(0), press_abs(0), press_diff1(0), press_diff2(0), temperature(0) {
  }

  virtual ~RawPressure() throw() {}

  int64_t time_usec;
  int16_t press_abs;
  int16_t press_diff1;
  int16_t press_diff2;
  int16_t temperature;

  _RawPressure__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_press_abs(const int16_t val) {
    press_abs = val;
  }

  void __set_press_diff1(const int16_t val) {
    press_diff1 = val;
  }

  void __set_press_diff2(const int16_t val) {
    press_diff2 = val;
  }

  void __set_temperature(const int16_t val) {
    temperature = val;
  }

  bool operator == (const RawPressure & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(press_abs == rhs.press_abs))
      return false;
    if (!(press_diff1 == rhs.press_diff1))
      return false;
    if (!(press_diff2 == rhs.press_diff2))
      return false;
    if (!(temperature == rhs.temperature))
      return false;
    return true;
  }
  bool operator != (const RawPressure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawPressure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RawPressure &a, RawPressure &b);

typedef struct _ScaledPressure__isset {
  _ScaledPressure__isset() : time_boot_ms(false), press_abs(false), press_diff(false), temperature(false) {}
  bool time_boot_ms;
  bool press_abs;
  bool press_diff;
  bool temperature;
} _ScaledPressure__isset;

class ScaledPressure {
 public:

  static const char* ascii_fingerprint; // = "6FF044B591DEBDA86FD5D9CF56121E65";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0xF0,0x44,0xB5,0x91,0xDE,0xBD,0xA8,0x6F,0xD5,0xD9,0xCF,0x56,0x12,0x1E,0x65};

  ScaledPressure() : time_boot_ms(0), press_abs(0), press_diff(0), temperature(0) {
  }

  virtual ~ScaledPressure() throw() {}

  int32_t time_boot_ms;
  double press_abs;
  double press_diff;
  int16_t temperature;

  _ScaledPressure__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_press_abs(const double val) {
    press_abs = val;
  }

  void __set_press_diff(const double val) {
    press_diff = val;
  }

  void __set_temperature(const int16_t val) {
    temperature = val;
  }

  bool operator == (const ScaledPressure & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(press_abs == rhs.press_abs))
      return false;
    if (!(press_diff == rhs.press_diff))
      return false;
    if (!(temperature == rhs.temperature))
      return false;
    return true;
  }
  bool operator != (const ScaledPressure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScaledPressure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScaledPressure &a, ScaledPressure &b);

typedef struct _Attitude__isset {
  _Attitude__isset() : time_boot_ms(false), roll(false), pitch(false), yaw(false), rollspeed(false), pitchspeed(false), yawspeed(false) {}
  bool time_boot_ms;
  bool roll;
  bool pitch;
  bool yaw;
  bool rollspeed;
  bool pitchspeed;
  bool yawspeed;
} _Attitude__isset;

class Attitude {
 public:

  static const char* ascii_fingerprint; // = "BCF089261F2F269C2747661248BE94C6";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xF0,0x89,0x26,0x1F,0x2F,0x26,0x9C,0x27,0x47,0x66,0x12,0x48,0xBE,0x94,0xC6};

  Attitude() : time_boot_ms(0), roll(0), pitch(0), yaw(0), rollspeed(0), pitchspeed(0), yawspeed(0) {
  }

  virtual ~Attitude() throw() {}

  int32_t time_boot_ms;
  double roll;
  double pitch;
  double yaw;
  double rollspeed;
  double pitchspeed;
  double yawspeed;

  _Attitude__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  void __set_rollspeed(const double val) {
    rollspeed = val;
  }

  void __set_pitchspeed(const double val) {
    pitchspeed = val;
  }

  void __set_yawspeed(const double val) {
    yawspeed = val;
  }

  bool operator == (const Attitude & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    if (!(rollspeed == rhs.rollspeed))
      return false;
    if (!(pitchspeed == rhs.pitchspeed))
      return false;
    if (!(yawspeed == rhs.yawspeed))
      return false;
    return true;
  }
  bool operator != (const Attitude &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Attitude & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Attitude &a, Attitude &b);

typedef struct _AttitudeQuaternion__isset {
  _AttitudeQuaternion__isset() : time_boot_ms(false), q1(false), q2(false), q3(false), q4(false), rollspeed(false), pitchspeed(false), yawspeed(false) {}
  bool time_boot_ms;
  bool q1;
  bool q2;
  bool q3;
  bool q4;
  bool rollspeed;
  bool pitchspeed;
  bool yawspeed;
} _AttitudeQuaternion__isset;

class AttitudeQuaternion {
 public:

  static const char* ascii_fingerprint; // = "EBCBA126BDEA349D28A66E473B272E6E";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0xCB,0xA1,0x26,0xBD,0xEA,0x34,0x9D,0x28,0xA6,0x6E,0x47,0x3B,0x27,0x2E,0x6E};

  AttitudeQuaternion() : time_boot_ms(0), q1(0), q2(0), q3(0), q4(0), rollspeed(0), pitchspeed(0), yawspeed(0) {
  }

  virtual ~AttitudeQuaternion() throw() {}

  int32_t time_boot_ms;
  double q1;
  double q2;
  double q3;
  double q4;
  double rollspeed;
  double pitchspeed;
  double yawspeed;

  _AttitudeQuaternion__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_q1(const double val) {
    q1 = val;
  }

  void __set_q2(const double val) {
    q2 = val;
  }

  void __set_q3(const double val) {
    q3 = val;
  }

  void __set_q4(const double val) {
    q4 = val;
  }

  void __set_rollspeed(const double val) {
    rollspeed = val;
  }

  void __set_pitchspeed(const double val) {
    pitchspeed = val;
  }

  void __set_yawspeed(const double val) {
    yawspeed = val;
  }

  bool operator == (const AttitudeQuaternion & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(q1 == rhs.q1))
      return false;
    if (!(q2 == rhs.q2))
      return false;
    if (!(q3 == rhs.q3))
      return false;
    if (!(q4 == rhs.q4))
      return false;
    if (!(rollspeed == rhs.rollspeed))
      return false;
    if (!(pitchspeed == rhs.pitchspeed))
      return false;
    if (!(yawspeed == rhs.yawspeed))
      return false;
    return true;
  }
  bool operator != (const AttitudeQuaternion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttitudeQuaternion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AttitudeQuaternion &a, AttitudeQuaternion &b);

typedef struct _LocalPositionNed__isset {
  _LocalPositionNed__isset() : time_boot_ms(false), x(false), y(false), z(false), vx(false), vy(false), vz(false) {}
  bool time_boot_ms;
  bool x;
  bool y;
  bool z;
  bool vx;
  bool vy;
  bool vz;
} _LocalPositionNed__isset;

class LocalPositionNed {
 public:

  static const char* ascii_fingerprint; // = "BCF089261F2F269C2747661248BE94C6";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xF0,0x89,0x26,0x1F,0x2F,0x26,0x9C,0x27,0x47,0x66,0x12,0x48,0xBE,0x94,0xC6};

  LocalPositionNed() : time_boot_ms(0), x(0), y(0), z(0), vx(0), vy(0), vz(0) {
  }

  virtual ~LocalPositionNed() throw() {}

  int32_t time_boot_ms;
  double x;
  double y;
  double z;
  double vx;
  double vy;
  double vz;

  _LocalPositionNed__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_vx(const double val) {
    vx = val;
  }

  void __set_vy(const double val) {
    vy = val;
  }

  void __set_vz(const double val) {
    vz = val;
  }

  bool operator == (const LocalPositionNed & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(vx == rhs.vx))
      return false;
    if (!(vy == rhs.vy))
      return false;
    if (!(vz == rhs.vz))
      return false;
    return true;
  }
  bool operator != (const LocalPositionNed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalPositionNed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LocalPositionNed &a, LocalPositionNed &b);

typedef struct _GlobalPositionInt__isset {
  _GlobalPositionInt__isset() : time_boot_ms(false), lat(false), lon(false), alt(false), relative_alt(false), vx(false), vy(false), vz(false), hdg(false) {}
  bool time_boot_ms;
  bool lat;
  bool lon;
  bool alt;
  bool relative_alt;
  bool vx;
  bool vy;
  bool vz;
  bool hdg;
} _GlobalPositionInt__isset;

class GlobalPositionInt {
 public:

  static const char* ascii_fingerprint; // = "D5207DC933C21AF5FC5B16DD17854F3F";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x20,0x7D,0xC9,0x33,0xC2,0x1A,0xF5,0xFC,0x5B,0x16,0xDD,0x17,0x85,0x4F,0x3F};

  GlobalPositionInt() : time_boot_ms(0), lat(0), lon(0), alt(0), relative_alt(0), vx(0), vy(0), vz(0), hdg(0) {
  }

  virtual ~GlobalPositionInt() throw() {}

  int32_t time_boot_ms;
  int32_t lat;
  int32_t lon;
  int32_t alt;
  int32_t relative_alt;
  int16_t vx;
  int16_t vy;
  int16_t vz;
  int16_t hdg;

  _GlobalPositionInt__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_lat(const int32_t val) {
    lat = val;
  }

  void __set_lon(const int32_t val) {
    lon = val;
  }

  void __set_alt(const int32_t val) {
    alt = val;
  }

  void __set_relative_alt(const int32_t val) {
    relative_alt = val;
  }

  void __set_vx(const int16_t val) {
    vx = val;
  }

  void __set_vy(const int16_t val) {
    vy = val;
  }

  void __set_vz(const int16_t val) {
    vz = val;
  }

  void __set_hdg(const int16_t val) {
    hdg = val;
  }

  bool operator == (const GlobalPositionInt & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(lat == rhs.lat))
      return false;
    if (!(lon == rhs.lon))
      return false;
    if (!(alt == rhs.alt))
      return false;
    if (!(relative_alt == rhs.relative_alt))
      return false;
    if (!(vx == rhs.vx))
      return false;
    if (!(vy == rhs.vy))
      return false;
    if (!(vz == rhs.vz))
      return false;
    if (!(hdg == rhs.hdg))
      return false;
    return true;
  }
  bool operator != (const GlobalPositionInt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GlobalPositionInt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GlobalPositionInt &a, GlobalPositionInt &b);

typedef struct _RcChannelsScaled__isset {
  _RcChannelsScaled__isset() : time_boot_ms(false), port(false), chan1_scaled(false), chan2_scaled(false), chan3_scaled(false), chan4_scaled(false), chan5_scaled(false), chan6_scaled(false), chan7_scaled(false), chan8_scaled(false), rssi(false) {}
  bool time_boot_ms;
  bool port;
  bool chan1_scaled;
  bool chan2_scaled;
  bool chan3_scaled;
  bool chan4_scaled;
  bool chan5_scaled;
  bool chan6_scaled;
  bool chan7_scaled;
  bool chan8_scaled;
  bool rssi;
} _RcChannelsScaled__isset;

class RcChannelsScaled {
 public:

  static const char* ascii_fingerprint; // = "83D9CC168D71611E4BCE2A973C1B7814";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xD9,0xCC,0x16,0x8D,0x71,0x61,0x1E,0x4B,0xCE,0x2A,0x97,0x3C,0x1B,0x78,0x14};

  RcChannelsScaled() : time_boot_ms(0), port(0), chan1_scaled(0), chan2_scaled(0), chan3_scaled(0), chan4_scaled(0), chan5_scaled(0), chan6_scaled(0), chan7_scaled(0), chan8_scaled(0), rssi(0) {
  }

  virtual ~RcChannelsScaled() throw() {}

  int32_t time_boot_ms;
  int8_t port;
  int16_t chan1_scaled;
  int16_t chan2_scaled;
  int16_t chan3_scaled;
  int16_t chan4_scaled;
  int16_t chan5_scaled;
  int16_t chan6_scaled;
  int16_t chan7_scaled;
  int16_t chan8_scaled;
  int8_t rssi;

  _RcChannelsScaled__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_port(const int8_t val) {
    port = val;
  }

  void __set_chan1_scaled(const int16_t val) {
    chan1_scaled = val;
  }

  void __set_chan2_scaled(const int16_t val) {
    chan2_scaled = val;
  }

  void __set_chan3_scaled(const int16_t val) {
    chan3_scaled = val;
  }

  void __set_chan4_scaled(const int16_t val) {
    chan4_scaled = val;
  }

  void __set_chan5_scaled(const int16_t val) {
    chan5_scaled = val;
  }

  void __set_chan6_scaled(const int16_t val) {
    chan6_scaled = val;
  }

  void __set_chan7_scaled(const int16_t val) {
    chan7_scaled = val;
  }

  void __set_chan8_scaled(const int16_t val) {
    chan8_scaled = val;
  }

  void __set_rssi(const int8_t val) {
    rssi = val;
  }

  bool operator == (const RcChannelsScaled & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(chan1_scaled == rhs.chan1_scaled))
      return false;
    if (!(chan2_scaled == rhs.chan2_scaled))
      return false;
    if (!(chan3_scaled == rhs.chan3_scaled))
      return false;
    if (!(chan4_scaled == rhs.chan4_scaled))
      return false;
    if (!(chan5_scaled == rhs.chan5_scaled))
      return false;
    if (!(chan6_scaled == rhs.chan6_scaled))
      return false;
    if (!(chan7_scaled == rhs.chan7_scaled))
      return false;
    if (!(chan8_scaled == rhs.chan8_scaled))
      return false;
    if (!(rssi == rhs.rssi))
      return false;
    return true;
  }
  bool operator != (const RcChannelsScaled &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RcChannelsScaled & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RcChannelsScaled &a, RcChannelsScaled &b);

typedef struct _RcChannelsRaw__isset {
  _RcChannelsRaw__isset() : time_boot_ms(false), port(false), chan1_raw(false), chan2_raw(false), chan3_raw(false), chan4_raw(false), chan5_raw(false), chan6_raw(false), chan7_raw(false), chan8_raw(false), rssi(false) {}
  bool time_boot_ms;
  bool port;
  bool chan1_raw;
  bool chan2_raw;
  bool chan3_raw;
  bool chan4_raw;
  bool chan5_raw;
  bool chan6_raw;
  bool chan7_raw;
  bool chan8_raw;
  bool rssi;
} _RcChannelsRaw__isset;

class RcChannelsRaw {
 public:

  static const char* ascii_fingerprint; // = "83D9CC168D71611E4BCE2A973C1B7814";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xD9,0xCC,0x16,0x8D,0x71,0x61,0x1E,0x4B,0xCE,0x2A,0x97,0x3C,0x1B,0x78,0x14};

  RcChannelsRaw() : time_boot_ms(0), port(0), chan1_raw(0), chan2_raw(0), chan3_raw(0), chan4_raw(0), chan5_raw(0), chan6_raw(0), chan7_raw(0), chan8_raw(0), rssi(0) {
  }

  virtual ~RcChannelsRaw() throw() {}

  int32_t time_boot_ms;
  int8_t port;
  int16_t chan1_raw;
  int16_t chan2_raw;
  int16_t chan3_raw;
  int16_t chan4_raw;
  int16_t chan5_raw;
  int16_t chan6_raw;
  int16_t chan7_raw;
  int16_t chan8_raw;
  int8_t rssi;

  _RcChannelsRaw__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_port(const int8_t val) {
    port = val;
  }

  void __set_chan1_raw(const int16_t val) {
    chan1_raw = val;
  }

  void __set_chan2_raw(const int16_t val) {
    chan2_raw = val;
  }

  void __set_chan3_raw(const int16_t val) {
    chan3_raw = val;
  }

  void __set_chan4_raw(const int16_t val) {
    chan4_raw = val;
  }

  void __set_chan5_raw(const int16_t val) {
    chan5_raw = val;
  }

  void __set_chan6_raw(const int16_t val) {
    chan6_raw = val;
  }

  void __set_chan7_raw(const int16_t val) {
    chan7_raw = val;
  }

  void __set_chan8_raw(const int16_t val) {
    chan8_raw = val;
  }

  void __set_rssi(const int8_t val) {
    rssi = val;
  }

  bool operator == (const RcChannelsRaw & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(chan1_raw == rhs.chan1_raw))
      return false;
    if (!(chan2_raw == rhs.chan2_raw))
      return false;
    if (!(chan3_raw == rhs.chan3_raw))
      return false;
    if (!(chan4_raw == rhs.chan4_raw))
      return false;
    if (!(chan5_raw == rhs.chan5_raw))
      return false;
    if (!(chan6_raw == rhs.chan6_raw))
      return false;
    if (!(chan7_raw == rhs.chan7_raw))
      return false;
    if (!(chan8_raw == rhs.chan8_raw))
      return false;
    if (!(rssi == rhs.rssi))
      return false;
    return true;
  }
  bool operator != (const RcChannelsRaw &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RcChannelsRaw & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RcChannelsRaw &a, RcChannelsRaw &b);

typedef struct _ServoOutputRaw__isset {
  _ServoOutputRaw__isset() : time_usec(false), port(false), servo1_raw(false), servo2_raw(false), servo3_raw(false), servo4_raw(false), servo5_raw(false), servo6_raw(false), servo7_raw(false), servo8_raw(false) {}
  bool time_usec;
  bool port;
  bool servo1_raw;
  bool servo2_raw;
  bool servo3_raw;
  bool servo4_raw;
  bool servo5_raw;
  bool servo6_raw;
  bool servo7_raw;
  bool servo8_raw;
} _ServoOutputRaw__isset;

class ServoOutputRaw {
 public:

  static const char* ascii_fingerprint; // = "BEE20D18A1C00484F723E4EA5410BE99";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xE2,0x0D,0x18,0xA1,0xC0,0x04,0x84,0xF7,0x23,0xE4,0xEA,0x54,0x10,0xBE,0x99};

  ServoOutputRaw() : time_usec(0), port(0), servo1_raw(0), servo2_raw(0), servo3_raw(0), servo4_raw(0), servo5_raw(0), servo6_raw(0), servo7_raw(0), servo8_raw(0) {
  }

  virtual ~ServoOutputRaw() throw() {}

  int32_t time_usec;
  int8_t port;
  int16_t servo1_raw;
  int16_t servo2_raw;
  int16_t servo3_raw;
  int16_t servo4_raw;
  int16_t servo5_raw;
  int16_t servo6_raw;
  int16_t servo7_raw;
  int16_t servo8_raw;

  _ServoOutputRaw__isset __isset;

  void __set_time_usec(const int32_t val) {
    time_usec = val;
  }

  void __set_port(const int8_t val) {
    port = val;
  }

  void __set_servo1_raw(const int16_t val) {
    servo1_raw = val;
  }

  void __set_servo2_raw(const int16_t val) {
    servo2_raw = val;
  }

  void __set_servo3_raw(const int16_t val) {
    servo3_raw = val;
  }

  void __set_servo4_raw(const int16_t val) {
    servo4_raw = val;
  }

  void __set_servo5_raw(const int16_t val) {
    servo5_raw = val;
  }

  void __set_servo6_raw(const int16_t val) {
    servo6_raw = val;
  }

  void __set_servo7_raw(const int16_t val) {
    servo7_raw = val;
  }

  void __set_servo8_raw(const int16_t val) {
    servo8_raw = val;
  }

  bool operator == (const ServoOutputRaw & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(servo1_raw == rhs.servo1_raw))
      return false;
    if (!(servo2_raw == rhs.servo2_raw))
      return false;
    if (!(servo3_raw == rhs.servo3_raw))
      return false;
    if (!(servo4_raw == rhs.servo4_raw))
      return false;
    if (!(servo5_raw == rhs.servo5_raw))
      return false;
    if (!(servo6_raw == rhs.servo6_raw))
      return false;
    if (!(servo7_raw == rhs.servo7_raw))
      return false;
    if (!(servo8_raw == rhs.servo8_raw))
      return false;
    return true;
  }
  bool operator != (const ServoOutputRaw &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServoOutputRaw & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServoOutputRaw &a, ServoOutputRaw &b);

typedef struct _MissionRequestPartialList__isset {
  _MissionRequestPartialList__isset() : target_system(false), target_component(false), start_index(false), end_index(false) {}
  bool target_system;
  bool target_component;
  bool start_index;
  bool end_index;
} _MissionRequestPartialList__isset;

class MissionRequestPartialList {
 public:

  static const char* ascii_fingerprint; // = "C96E80C010B7BE2664803F7467E4E767";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x6E,0x80,0xC0,0x10,0xB7,0xBE,0x26,0x64,0x80,0x3F,0x74,0x67,0xE4,0xE7,0x67};

  MissionRequestPartialList() : target_system(0), target_component(0), start_index(0), end_index(0) {
  }

  virtual ~MissionRequestPartialList() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t start_index;
  int16_t end_index;

  _MissionRequestPartialList__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_start_index(const int16_t val) {
    start_index = val;
  }

  void __set_end_index(const int16_t val) {
    end_index = val;
  }

  bool operator == (const MissionRequestPartialList & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(start_index == rhs.start_index))
      return false;
    if (!(end_index == rhs.end_index))
      return false;
    return true;
  }
  bool operator != (const MissionRequestPartialList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionRequestPartialList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionRequestPartialList &a, MissionRequestPartialList &b);

typedef struct _MissionWritePartialList__isset {
  _MissionWritePartialList__isset() : target_system(false), target_component(false), start_index(false), end_index(false) {}
  bool target_system;
  bool target_component;
  bool start_index;
  bool end_index;
} _MissionWritePartialList__isset;

class MissionWritePartialList {
 public:

  static const char* ascii_fingerprint; // = "C96E80C010B7BE2664803F7467E4E767";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x6E,0x80,0xC0,0x10,0xB7,0xBE,0x26,0x64,0x80,0x3F,0x74,0x67,0xE4,0xE7,0x67};

  MissionWritePartialList() : target_system(0), target_component(0), start_index(0), end_index(0) {
  }

  virtual ~MissionWritePartialList() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t start_index;
  int16_t end_index;

  _MissionWritePartialList__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_start_index(const int16_t val) {
    start_index = val;
  }

  void __set_end_index(const int16_t val) {
    end_index = val;
  }

  bool operator == (const MissionWritePartialList & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(start_index == rhs.start_index))
      return false;
    if (!(end_index == rhs.end_index))
      return false;
    return true;
  }
  bool operator != (const MissionWritePartialList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionWritePartialList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionWritePartialList &a, MissionWritePartialList &b);

typedef struct _MissionItem__isset {
  _MissionItem__isset() : target_system(false), target_component(false), seq(false), frame(false), command(false), current(false), autocontinue(false), param1(false), param2(false), param3(false), param4(false), x(false), y(false), z(false) {}
  bool target_system;
  bool target_component;
  bool seq;
  bool frame;
  bool command;
  bool current;
  bool autocontinue;
  bool param1;
  bool param2;
  bool param3;
  bool param4;
  bool x;
  bool y;
  bool z;
} _MissionItem__isset;

class MissionItem {
 public:

  static const char* ascii_fingerprint; // = "3A612DEE4A6E484EE7E38CC061C48337";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x61,0x2D,0xEE,0x4A,0x6E,0x48,0x4E,0xE7,0xE3,0x8C,0xC0,0x61,0xC4,0x83,0x37};

  MissionItem() : target_system(0), target_component(0), seq(0), frame(0), command(0), current(0), autocontinue(0), param1(0), param2(0), param3(0), param4(0), x(0), y(0), z(0) {
  }

  virtual ~MissionItem() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t seq;
  int8_t frame;
  int16_t command;
  int8_t current;
  int8_t autocontinue;
  double param1;
  double param2;
  double param3;
  double param4;
  double x;
  double y;
  double z;

  _MissionItem__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_seq(const int16_t val) {
    seq = val;
  }

  void __set_frame(const int8_t val) {
    frame = val;
  }

  void __set_command(const int16_t val) {
    command = val;
  }

  void __set_current(const int8_t val) {
    current = val;
  }

  void __set_autocontinue(const int8_t val) {
    autocontinue = val;
  }

  void __set_param1(const double val) {
    param1 = val;
  }

  void __set_param2(const double val) {
    param2 = val;
  }

  void __set_param3(const double val) {
    param3 = val;
  }

  void __set_param4(const double val) {
    param4 = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  bool operator == (const MissionItem & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(seq == rhs.seq))
      return false;
    if (!(frame == rhs.frame))
      return false;
    if (!(command == rhs.command))
      return false;
    if (!(current == rhs.current))
      return false;
    if (!(autocontinue == rhs.autocontinue))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(param4 == rhs.param4))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const MissionItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionItem &a, MissionItem &b);

typedef struct _MissionRequest__isset {
  _MissionRequest__isset() : target_system(false), target_component(false), seq(false) {}
  bool target_system;
  bool target_component;
  bool seq;
} _MissionRequest__isset;

class MissionRequest {
 public:

  static const char* ascii_fingerprint; // = "0ADFD9F821347143D588B15689D01279";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xDF,0xD9,0xF8,0x21,0x34,0x71,0x43,0xD5,0x88,0xB1,0x56,0x89,0xD0,0x12,0x79};

  MissionRequest() : target_system(0), target_component(0), seq(0) {
  }

  virtual ~MissionRequest() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t seq;

  _MissionRequest__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_seq(const int16_t val) {
    seq = val;
  }

  bool operator == (const MissionRequest & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(seq == rhs.seq))
      return false;
    return true;
  }
  bool operator != (const MissionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionRequest &a, MissionRequest &b);

typedef struct _MissionSetCurrent__isset {
  _MissionSetCurrent__isset() : target_system(false), target_component(false), seq(false) {}
  bool target_system;
  bool target_component;
  bool seq;
} _MissionSetCurrent__isset;

class MissionSetCurrent {
 public:

  static const char* ascii_fingerprint; // = "0ADFD9F821347143D588B15689D01279";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xDF,0xD9,0xF8,0x21,0x34,0x71,0x43,0xD5,0x88,0xB1,0x56,0x89,0xD0,0x12,0x79};

  MissionSetCurrent() : target_system(0), target_component(0), seq(0) {
  }

  virtual ~MissionSetCurrent() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t seq;

  _MissionSetCurrent__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_seq(const int16_t val) {
    seq = val;
  }

  bool operator == (const MissionSetCurrent & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(seq == rhs.seq))
      return false;
    return true;
  }
  bool operator != (const MissionSetCurrent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionSetCurrent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionSetCurrent &a, MissionSetCurrent &b);

typedef struct _MissionCurrent__isset {
  _MissionCurrent__isset() : seq(false) {}
  bool seq;
} _MissionCurrent__isset;

class MissionCurrent {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  MissionCurrent() : seq(0) {
  }

  virtual ~MissionCurrent() throw() {}

  int16_t seq;

  _MissionCurrent__isset __isset;

  void __set_seq(const int16_t val) {
    seq = val;
  }

  bool operator == (const MissionCurrent & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    return true;
  }
  bool operator != (const MissionCurrent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionCurrent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionCurrent &a, MissionCurrent &b);

typedef struct _MissionRequestList__isset {
  _MissionRequestList__isset() : target_system(false), target_component(false) {}
  bool target_system;
  bool target_component;
} _MissionRequestList__isset;

class MissionRequestList {
 public:

  static const char* ascii_fingerprint; // = "D3B91891CF1F31392E7E70F167226591";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0xB9,0x18,0x91,0xCF,0x1F,0x31,0x39,0x2E,0x7E,0x70,0xF1,0x67,0x22,0x65,0x91};

  MissionRequestList() : target_system(0), target_component(0) {
  }

  virtual ~MissionRequestList() throw() {}

  int8_t target_system;
  int8_t target_component;

  _MissionRequestList__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  bool operator == (const MissionRequestList & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    return true;
  }
  bool operator != (const MissionRequestList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionRequestList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionRequestList &a, MissionRequestList &b);

typedef struct _MissionCount__isset {
  _MissionCount__isset() : target_system(false), target_component(false), count(false) {}
  bool target_system;
  bool target_component;
  bool count;
} _MissionCount__isset;

class MissionCount {
 public:

  static const char* ascii_fingerprint; // = "0ADFD9F821347143D588B15689D01279";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xDF,0xD9,0xF8,0x21,0x34,0x71,0x43,0xD5,0x88,0xB1,0x56,0x89,0xD0,0x12,0x79};

  MissionCount() : target_system(0), target_component(0), count(0) {
  }

  virtual ~MissionCount() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t count;

  _MissionCount__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_count(const int16_t val) {
    count = val;
  }

  bool operator == (const MissionCount & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const MissionCount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionCount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionCount &a, MissionCount &b);

typedef struct _MissionClearAll__isset {
  _MissionClearAll__isset() : target_system(false), target_component(false) {}
  bool target_system;
  bool target_component;
} _MissionClearAll__isset;

class MissionClearAll {
 public:

  static const char* ascii_fingerprint; // = "D3B91891CF1F31392E7E70F167226591";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0xB9,0x18,0x91,0xCF,0x1F,0x31,0x39,0x2E,0x7E,0x70,0xF1,0x67,0x22,0x65,0x91};

  MissionClearAll() : target_system(0), target_component(0) {
  }

  virtual ~MissionClearAll() throw() {}

  int8_t target_system;
  int8_t target_component;

  _MissionClearAll__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  bool operator == (const MissionClearAll & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    return true;
  }
  bool operator != (const MissionClearAll &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionClearAll & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionClearAll &a, MissionClearAll &b);

typedef struct _MissionItemReached__isset {
  _MissionItemReached__isset() : seq(false) {}
  bool seq;
} _MissionItemReached__isset;

class MissionItemReached {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  MissionItemReached() : seq(0) {
  }

  virtual ~MissionItemReached() throw() {}

  int16_t seq;

  _MissionItemReached__isset __isset;

  void __set_seq(const int16_t val) {
    seq = val;
  }

  bool operator == (const MissionItemReached & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    return true;
  }
  bool operator != (const MissionItemReached &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionItemReached & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionItemReached &a, MissionItemReached &b);

typedef struct _MissionAck__isset {
  _MissionAck__isset() : target_system(false), target_component(false), mission_ack_type(false) {}
  bool target_system;
  bool target_component;
  bool mission_ack_type;
} _MissionAck__isset;

class MissionAck {
 public:

  static const char* ascii_fingerprint; // = "0A77C25C826CC107FD266A55D263629B";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x77,0xC2,0x5C,0x82,0x6C,0xC1,0x07,0xFD,0x26,0x6A,0x55,0xD2,0x63,0x62,0x9B};

  MissionAck() : target_system(0), target_component(0), mission_ack_type(0) {
  }

  virtual ~MissionAck() throw() {}

  int8_t target_system;
  int8_t target_component;
  int8_t mission_ack_type;

  _MissionAck__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_mission_ack_type(const int8_t val) {
    mission_ack_type = val;
  }

  bool operator == (const MissionAck & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(mission_ack_type == rhs.mission_ack_type))
      return false;
    return true;
  }
  bool operator != (const MissionAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MissionAck &a, MissionAck &b);

typedef struct _SetGpsGlobalOrigin__isset {
  _SetGpsGlobalOrigin__isset() : target_system(false), latitude(false), longitude(false), altitude(false) {}
  bool target_system;
  bool latitude;
  bool longitude;
  bool altitude;
} _SetGpsGlobalOrigin__isset;

class SetGpsGlobalOrigin {
 public:

  static const char* ascii_fingerprint; // = "88A5B4E5163BAD6268A818F033B05B0A";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0xA5,0xB4,0xE5,0x16,0x3B,0xAD,0x62,0x68,0xA8,0x18,0xF0,0x33,0xB0,0x5B,0x0A};

  SetGpsGlobalOrigin() : target_system(0), latitude(0), longitude(0), altitude(0) {
  }

  virtual ~SetGpsGlobalOrigin() throw() {}

  int8_t target_system;
  int32_t latitude;
  int32_t longitude;
  int32_t altitude;

  _SetGpsGlobalOrigin__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_latitude(const int32_t val) {
    latitude = val;
  }

  void __set_longitude(const int32_t val) {
    longitude = val;
  }

  void __set_altitude(const int32_t val) {
    altitude = val;
  }

  bool operator == (const SetGpsGlobalOrigin & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(altitude == rhs.altitude))
      return false;
    return true;
  }
  bool operator != (const SetGpsGlobalOrigin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetGpsGlobalOrigin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetGpsGlobalOrigin &a, SetGpsGlobalOrigin &b);

typedef struct _GpsGlobalOrigin__isset {
  _GpsGlobalOrigin__isset() : latitude(false), longitude(false), altitude(false) {}
  bool latitude;
  bool longitude;
  bool altitude;
} _GpsGlobalOrigin__isset;

class GpsGlobalOrigin {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  GpsGlobalOrigin() : latitude(0), longitude(0), altitude(0) {
  }

  virtual ~GpsGlobalOrigin() throw() {}

  int32_t latitude;
  int32_t longitude;
  int32_t altitude;

  _GpsGlobalOrigin__isset __isset;

  void __set_latitude(const int32_t val) {
    latitude = val;
  }

  void __set_longitude(const int32_t val) {
    longitude = val;
  }

  void __set_altitude(const int32_t val) {
    altitude = val;
  }

  bool operator == (const GpsGlobalOrigin & rhs) const
  {
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(altitude == rhs.altitude))
      return false;
    return true;
  }
  bool operator != (const GpsGlobalOrigin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GpsGlobalOrigin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GpsGlobalOrigin &a, GpsGlobalOrigin &b);

typedef struct _SetLocalPositionSetpoint__isset {
  _SetLocalPositionSetpoint__isset() : target_system(false), target_component(false), coordinate_frame(false), x(false), y(false), z(false), yaw(false) {}
  bool target_system;
  bool target_component;
  bool coordinate_frame;
  bool x;
  bool y;
  bool z;
  bool yaw;
} _SetLocalPositionSetpoint__isset;

class SetLocalPositionSetpoint {
 public:

  static const char* ascii_fingerprint; // = "1BC6F9B7D66440F78A873FB30E5A6141";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xC6,0xF9,0xB7,0xD6,0x64,0x40,0xF7,0x8A,0x87,0x3F,0xB3,0x0E,0x5A,0x61,0x41};

  SetLocalPositionSetpoint() : target_system(0), target_component(0), coordinate_frame(0), x(0), y(0), z(0), yaw(0) {
  }

  virtual ~SetLocalPositionSetpoint() throw() {}

  int8_t target_system;
  int8_t target_component;
  int8_t coordinate_frame;
  double x;
  double y;
  double z;
  double yaw;

  _SetLocalPositionSetpoint__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_coordinate_frame(const int8_t val) {
    coordinate_frame = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  bool operator == (const SetLocalPositionSetpoint & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(coordinate_frame == rhs.coordinate_frame))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const SetLocalPositionSetpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetLocalPositionSetpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetLocalPositionSetpoint &a, SetLocalPositionSetpoint &b);

typedef struct _LocalPositionSetpoint__isset {
  _LocalPositionSetpoint__isset() : coordinate_frame(false), x(false), y(false), z(false), yaw(false) {}
  bool coordinate_frame;
  bool x;
  bool y;
  bool z;
  bool yaw;
} _LocalPositionSetpoint__isset;

class LocalPositionSetpoint {
 public:

  static const char* ascii_fingerprint; // = "ECA02A9087E272883A5567E6237C0F7D";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0xA0,0x2A,0x90,0x87,0xE2,0x72,0x88,0x3A,0x55,0x67,0xE6,0x23,0x7C,0x0F,0x7D};

  LocalPositionSetpoint() : coordinate_frame(0), x(0), y(0), z(0), yaw(0) {
  }

  virtual ~LocalPositionSetpoint() throw() {}

  int8_t coordinate_frame;
  double x;
  double y;
  double z;
  double yaw;

  _LocalPositionSetpoint__isset __isset;

  void __set_coordinate_frame(const int8_t val) {
    coordinate_frame = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  bool operator == (const LocalPositionSetpoint & rhs) const
  {
    if (!(coordinate_frame == rhs.coordinate_frame))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const LocalPositionSetpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalPositionSetpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LocalPositionSetpoint &a, LocalPositionSetpoint &b);

typedef struct _GlobalPositionSetpointInt__isset {
  _GlobalPositionSetpointInt__isset() : coordinate_frame(false), latitude(false), longitude(false), altitude(false), yaw(false) {}
  bool coordinate_frame;
  bool latitude;
  bool longitude;
  bool altitude;
  bool yaw;
} _GlobalPositionSetpointInt__isset;

class GlobalPositionSetpointInt {
 public:

  static const char* ascii_fingerprint; // = "6E5537CE9ED8F608456F2B8C07EB67FE";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x55,0x37,0xCE,0x9E,0xD8,0xF6,0x08,0x45,0x6F,0x2B,0x8C,0x07,0xEB,0x67,0xFE};

  GlobalPositionSetpointInt() : coordinate_frame(0), latitude(0), longitude(0), altitude(0), yaw(0) {
  }

  virtual ~GlobalPositionSetpointInt() throw() {}

  int8_t coordinate_frame;
  int32_t latitude;
  int32_t longitude;
  int32_t altitude;
  int16_t yaw;

  _GlobalPositionSetpointInt__isset __isset;

  void __set_coordinate_frame(const int8_t val) {
    coordinate_frame = val;
  }

  void __set_latitude(const int32_t val) {
    latitude = val;
  }

  void __set_longitude(const int32_t val) {
    longitude = val;
  }

  void __set_altitude(const int32_t val) {
    altitude = val;
  }

  void __set_yaw(const int16_t val) {
    yaw = val;
  }

  bool operator == (const GlobalPositionSetpointInt & rhs) const
  {
    if (!(coordinate_frame == rhs.coordinate_frame))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(altitude == rhs.altitude))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const GlobalPositionSetpointInt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GlobalPositionSetpointInt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GlobalPositionSetpointInt &a, GlobalPositionSetpointInt &b);

typedef struct _SetGlobalPositionSetpointInt__isset {
  _SetGlobalPositionSetpointInt__isset() : coordinate_frame(false), latitude(false), longitude(false), altitude(false), yaw(false) {}
  bool coordinate_frame;
  bool latitude;
  bool longitude;
  bool altitude;
  bool yaw;
} _SetGlobalPositionSetpointInt__isset;

class SetGlobalPositionSetpointInt {
 public:

  static const char* ascii_fingerprint; // = "6E5537CE9ED8F608456F2B8C07EB67FE";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x55,0x37,0xCE,0x9E,0xD8,0xF6,0x08,0x45,0x6F,0x2B,0x8C,0x07,0xEB,0x67,0xFE};

  SetGlobalPositionSetpointInt() : coordinate_frame(0), latitude(0), longitude(0), altitude(0), yaw(0) {
  }

  virtual ~SetGlobalPositionSetpointInt() throw() {}

  int8_t coordinate_frame;
  int32_t latitude;
  int32_t longitude;
  int32_t altitude;
  int16_t yaw;

  _SetGlobalPositionSetpointInt__isset __isset;

  void __set_coordinate_frame(const int8_t val) {
    coordinate_frame = val;
  }

  void __set_latitude(const int32_t val) {
    latitude = val;
  }

  void __set_longitude(const int32_t val) {
    longitude = val;
  }

  void __set_altitude(const int32_t val) {
    altitude = val;
  }

  void __set_yaw(const int16_t val) {
    yaw = val;
  }

  bool operator == (const SetGlobalPositionSetpointInt & rhs) const
  {
    if (!(coordinate_frame == rhs.coordinate_frame))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(altitude == rhs.altitude))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const SetGlobalPositionSetpointInt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetGlobalPositionSetpointInt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetGlobalPositionSetpointInt &a, SetGlobalPositionSetpointInt &b);

typedef struct _SafetySetAllowedArea__isset {
  _SafetySetAllowedArea__isset() : target_system(false), target_component(false), frame(false), p1x(false), p1y(false), p1z(false), p2x(false), p2y(false), p2z(false) {}
  bool target_system;
  bool target_component;
  bool frame;
  bool p1x;
  bool p1y;
  bool p1z;
  bool p2x;
  bool p2y;
  bool p2z;
} _SafetySetAllowedArea__isset;

class SafetySetAllowedArea {
 public:

  static const char* ascii_fingerprint; // = "51C3D3C7D59E89EC860D802F4BF11D5D";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0xC3,0xD3,0xC7,0xD5,0x9E,0x89,0xEC,0x86,0x0D,0x80,0x2F,0x4B,0xF1,0x1D,0x5D};

  SafetySetAllowedArea() : target_system(0), target_component(0), frame(0), p1x(0), p1y(0), p1z(0), p2x(0), p2y(0), p2z(0) {
  }

  virtual ~SafetySetAllowedArea() throw() {}

  int8_t target_system;
  int8_t target_component;
  int8_t frame;
  double p1x;
  double p1y;
  double p1z;
  double p2x;
  double p2y;
  double p2z;

  _SafetySetAllowedArea__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_frame(const int8_t val) {
    frame = val;
  }

  void __set_p1x(const double val) {
    p1x = val;
  }

  void __set_p1y(const double val) {
    p1y = val;
  }

  void __set_p1z(const double val) {
    p1z = val;
  }

  void __set_p2x(const double val) {
    p2x = val;
  }

  void __set_p2y(const double val) {
    p2y = val;
  }

  void __set_p2z(const double val) {
    p2z = val;
  }

  bool operator == (const SafetySetAllowedArea & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(frame == rhs.frame))
      return false;
    if (!(p1x == rhs.p1x))
      return false;
    if (!(p1y == rhs.p1y))
      return false;
    if (!(p1z == rhs.p1z))
      return false;
    if (!(p2x == rhs.p2x))
      return false;
    if (!(p2y == rhs.p2y))
      return false;
    if (!(p2z == rhs.p2z))
      return false;
    return true;
  }
  bool operator != (const SafetySetAllowedArea &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SafetySetAllowedArea & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SafetySetAllowedArea &a, SafetySetAllowedArea &b);

typedef struct _SafetyAllowedArea__isset {
  _SafetyAllowedArea__isset() : frame(false), p1x(false), p1y(false), p1z(false), p2x(false), p2y(false), p2z(false) {}
  bool frame;
  bool p1x;
  bool p1y;
  bool p1z;
  bool p2x;
  bool p2y;
  bool p2z;
} _SafetyAllowedArea__isset;

class SafetyAllowedArea {
 public:

  static const char* ascii_fingerprint; // = "BA7B956FBEA27492A64DE2BB21B3B98A";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x7B,0x95,0x6F,0xBE,0xA2,0x74,0x92,0xA6,0x4D,0xE2,0xBB,0x21,0xB3,0xB9,0x8A};

  SafetyAllowedArea() : frame(0), p1x(0), p1y(0), p1z(0), p2x(0), p2y(0), p2z(0) {
  }

  virtual ~SafetyAllowedArea() throw() {}

  int8_t frame;
  double p1x;
  double p1y;
  double p1z;
  double p2x;
  double p2y;
  double p2z;

  _SafetyAllowedArea__isset __isset;

  void __set_frame(const int8_t val) {
    frame = val;
  }

  void __set_p1x(const double val) {
    p1x = val;
  }

  void __set_p1y(const double val) {
    p1y = val;
  }

  void __set_p1z(const double val) {
    p1z = val;
  }

  void __set_p2x(const double val) {
    p2x = val;
  }

  void __set_p2y(const double val) {
    p2y = val;
  }

  void __set_p2z(const double val) {
    p2z = val;
  }

  bool operator == (const SafetyAllowedArea & rhs) const
  {
    if (!(frame == rhs.frame))
      return false;
    if (!(p1x == rhs.p1x))
      return false;
    if (!(p1y == rhs.p1y))
      return false;
    if (!(p1z == rhs.p1z))
      return false;
    if (!(p2x == rhs.p2x))
      return false;
    if (!(p2y == rhs.p2y))
      return false;
    if (!(p2z == rhs.p2z))
      return false;
    return true;
  }
  bool operator != (const SafetyAllowedArea &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SafetyAllowedArea & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SafetyAllowedArea &a, SafetyAllowedArea &b);

typedef struct _SetRollPitchYawThrust__isset {
  _SetRollPitchYawThrust__isset() : target_system(false), target_component(false), roll(false), pitch(false), yaw(false), thrust(false) {}
  bool target_system;
  bool target_component;
  bool roll;
  bool pitch;
  bool yaw;
  bool thrust;
} _SetRollPitchYawThrust__isset;

class SetRollPitchYawThrust {
 public:

  static const char* ascii_fingerprint; // = "913187295B2062A4346BB692A6DAB797";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x31,0x87,0x29,0x5B,0x20,0x62,0xA4,0x34,0x6B,0xB6,0x92,0xA6,0xDA,0xB7,0x97};

  SetRollPitchYawThrust() : target_system(0), target_component(0), roll(0), pitch(0), yaw(0), thrust(0) {
  }

  virtual ~SetRollPitchYawThrust() throw() {}

  int8_t target_system;
  int8_t target_component;
  double roll;
  double pitch;
  double yaw;
  double thrust;

  _SetRollPitchYawThrust__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  void __set_thrust(const double val) {
    thrust = val;
  }

  bool operator == (const SetRollPitchYawThrust & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    return true;
  }
  bool operator != (const SetRollPitchYawThrust &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetRollPitchYawThrust & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetRollPitchYawThrust &a, SetRollPitchYawThrust &b);

typedef struct _SetRollPitchYawSpeedThrust__isset {
  _SetRollPitchYawSpeedThrust__isset() : target_system(false), target_component(false), roll_speed(false), pitch_speed(false), yaw_speed(false), thrust(false) {}
  bool target_system;
  bool target_component;
  bool roll_speed;
  bool pitch_speed;
  bool yaw_speed;
  bool thrust;
} _SetRollPitchYawSpeedThrust__isset;

class SetRollPitchYawSpeedThrust {
 public:

  static const char* ascii_fingerprint; // = "913187295B2062A4346BB692A6DAB797";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x31,0x87,0x29,0x5B,0x20,0x62,0xA4,0x34,0x6B,0xB6,0x92,0xA6,0xDA,0xB7,0x97};

  SetRollPitchYawSpeedThrust() : target_system(0), target_component(0), roll_speed(0), pitch_speed(0), yaw_speed(0), thrust(0) {
  }

  virtual ~SetRollPitchYawSpeedThrust() throw() {}

  int8_t target_system;
  int8_t target_component;
  double roll_speed;
  double pitch_speed;
  double yaw_speed;
  double thrust;

  _SetRollPitchYawSpeedThrust__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_roll_speed(const double val) {
    roll_speed = val;
  }

  void __set_pitch_speed(const double val) {
    pitch_speed = val;
  }

  void __set_yaw_speed(const double val) {
    yaw_speed = val;
  }

  void __set_thrust(const double val) {
    thrust = val;
  }

  bool operator == (const SetRollPitchYawSpeedThrust & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(roll_speed == rhs.roll_speed))
      return false;
    if (!(pitch_speed == rhs.pitch_speed))
      return false;
    if (!(yaw_speed == rhs.yaw_speed))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    return true;
  }
  bool operator != (const SetRollPitchYawSpeedThrust &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetRollPitchYawSpeedThrust & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetRollPitchYawSpeedThrust &a, SetRollPitchYawSpeedThrust &b);

typedef struct _RollPitchYawThrustSetpoint__isset {
  _RollPitchYawThrustSetpoint__isset() : time_boot_ms(false), roll(false), pitch(false), yaw(false), thrust(false) {}
  bool time_boot_ms;
  bool roll;
  bool pitch;
  bool yaw;
  bool thrust;
} _RollPitchYawThrustSetpoint__isset;

class RollPitchYawThrustSetpoint {
 public:

  static const char* ascii_fingerprint; // = "5472C7414D3514110BC82AEEAA7E60C6";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x72,0xC7,0x41,0x4D,0x35,0x14,0x11,0x0B,0xC8,0x2A,0xEE,0xAA,0x7E,0x60,0xC6};

  RollPitchYawThrustSetpoint() : time_boot_ms(0), roll(0), pitch(0), yaw(0), thrust(0) {
  }

  virtual ~RollPitchYawThrustSetpoint() throw() {}

  int32_t time_boot_ms;
  double roll;
  double pitch;
  double yaw;
  double thrust;

  _RollPitchYawThrustSetpoint__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  void __set_thrust(const double val) {
    thrust = val;
  }

  bool operator == (const RollPitchYawThrustSetpoint & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    return true;
  }
  bool operator != (const RollPitchYawThrustSetpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RollPitchYawThrustSetpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RollPitchYawThrustSetpoint &a, RollPitchYawThrustSetpoint &b);

typedef struct _RollPitchYawSpeedThrustSetpoint__isset {
  _RollPitchYawSpeedThrustSetpoint__isset() : time_boot_ms(false), roll_speed(false), pitch_speed(false), yaw_speed(false), thrust(false) {}
  bool time_boot_ms;
  bool roll_speed;
  bool pitch_speed;
  bool yaw_speed;
  bool thrust;
} _RollPitchYawSpeedThrustSetpoint__isset;

class RollPitchYawSpeedThrustSetpoint {
 public:

  static const char* ascii_fingerprint; // = "5472C7414D3514110BC82AEEAA7E60C6";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x72,0xC7,0x41,0x4D,0x35,0x14,0x11,0x0B,0xC8,0x2A,0xEE,0xAA,0x7E,0x60,0xC6};

  RollPitchYawSpeedThrustSetpoint() : time_boot_ms(0), roll_speed(0), pitch_speed(0), yaw_speed(0), thrust(0) {
  }

  virtual ~RollPitchYawSpeedThrustSetpoint() throw() {}

  int32_t time_boot_ms;
  double roll_speed;
  double pitch_speed;
  double yaw_speed;
  double thrust;

  _RollPitchYawSpeedThrustSetpoint__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_roll_speed(const double val) {
    roll_speed = val;
  }

  void __set_pitch_speed(const double val) {
    pitch_speed = val;
  }

  void __set_yaw_speed(const double val) {
    yaw_speed = val;
  }

  void __set_thrust(const double val) {
    thrust = val;
  }

  bool operator == (const RollPitchYawSpeedThrustSetpoint & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(roll_speed == rhs.roll_speed))
      return false;
    if (!(pitch_speed == rhs.pitch_speed))
      return false;
    if (!(yaw_speed == rhs.yaw_speed))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    return true;
  }
  bool operator != (const RollPitchYawSpeedThrustSetpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RollPitchYawSpeedThrustSetpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RollPitchYawSpeedThrustSetpoint &a, RollPitchYawSpeedThrustSetpoint &b);

typedef struct _SetQuadMotorsSetpoint__isset {
  _SetQuadMotorsSetpoint__isset() : target_system(false), motor_front_nw(false), motor_right_ne(false), motor_back_se(false), motor_left_sw(false) {}
  bool target_system;
  bool motor_front_nw;
  bool motor_right_ne;
  bool motor_back_se;
  bool motor_left_sw;
} _SetQuadMotorsSetpoint__isset;

class SetQuadMotorsSetpoint {
 public:

  static const char* ascii_fingerprint; // = "30F7E37580048A7C5EEC5CE27D4BDBDE";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0xF7,0xE3,0x75,0x80,0x04,0x8A,0x7C,0x5E,0xEC,0x5C,0xE2,0x7D,0x4B,0xDB,0xDE};

  SetQuadMotorsSetpoint() : target_system(0), motor_front_nw(0), motor_right_ne(0), motor_back_se(0), motor_left_sw(0) {
  }

  virtual ~SetQuadMotorsSetpoint() throw() {}

  int8_t target_system;
  int16_t motor_front_nw;
  int16_t motor_right_ne;
  int16_t motor_back_se;
  int16_t motor_left_sw;

  _SetQuadMotorsSetpoint__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_motor_front_nw(const int16_t val) {
    motor_front_nw = val;
  }

  void __set_motor_right_ne(const int16_t val) {
    motor_right_ne = val;
  }

  void __set_motor_back_se(const int16_t val) {
    motor_back_se = val;
  }

  void __set_motor_left_sw(const int16_t val) {
    motor_left_sw = val;
  }

  bool operator == (const SetQuadMotorsSetpoint & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(motor_front_nw == rhs.motor_front_nw))
      return false;
    if (!(motor_right_ne == rhs.motor_right_ne))
      return false;
    if (!(motor_back_se == rhs.motor_back_se))
      return false;
    if (!(motor_left_sw == rhs.motor_left_sw))
      return false;
    return true;
  }
  bool operator != (const SetQuadMotorsSetpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQuadMotorsSetpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetQuadMotorsSetpoint &a, SetQuadMotorsSetpoint &b);

typedef struct _SetQuadSwarmRollPitchYawThrust__isset {
  _SetQuadSwarmRollPitchYawThrust__isset() : group(false), mode(false), roll(false), pitch(false), yaw(false), thrust(false) {}
  bool group;
  bool mode;
  bool roll;
  bool pitch;
  bool yaw;
  bool thrust;
} _SetQuadSwarmRollPitchYawThrust__isset;

class SetQuadSwarmRollPitchYawThrust {
 public:

  static const char* ascii_fingerprint; // = "411B13F49F5E544DEF19517286AC2875";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0x1B,0x13,0xF4,0x9F,0x5E,0x54,0x4D,0xEF,0x19,0x51,0x72,0x86,0xAC,0x28,0x75};

  SetQuadSwarmRollPitchYawThrust() : group(0), mode(0) {
  }

  virtual ~SetQuadSwarmRollPitchYawThrust() throw() {}

  int8_t group;
  int8_t mode;
  std::vector<int16_t>  roll;
  std::vector<int16_t>  pitch;
  std::vector<int16_t>  yaw;
  std::vector<int16_t>  thrust;

  _SetQuadSwarmRollPitchYawThrust__isset __isset;

  void __set_group(const int8_t val) {
    group = val;
  }

  void __set_mode(const int8_t val) {
    mode = val;
  }

  void __set_roll(const std::vector<int16_t> & val) {
    roll = val;
  }

  void __set_pitch(const std::vector<int16_t> & val) {
    pitch = val;
  }

  void __set_yaw(const std::vector<int16_t> & val) {
    yaw = val;
  }

  void __set_thrust(const std::vector<int16_t> & val) {
    thrust = val;
  }

  bool operator == (const SetQuadSwarmRollPitchYawThrust & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    return true;
  }
  bool operator != (const SetQuadSwarmRollPitchYawThrust &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQuadSwarmRollPitchYawThrust & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetQuadSwarmRollPitchYawThrust &a, SetQuadSwarmRollPitchYawThrust &b);

typedef struct _NavControllerOutput__isset {
  _NavControllerOutput__isset() : nav_roll(false), nav_pitch(false), nav_bearing(false), target_bearing(false), wp_dist(false), alt_error(false), aspd_error(false), xtrack_error(false) {}
  bool nav_roll;
  bool nav_pitch;
  bool nav_bearing;
  bool target_bearing;
  bool wp_dist;
  bool alt_error;
  bool aspd_error;
  bool xtrack_error;
} _NavControllerOutput__isset;

class NavControllerOutput {
 public:

  static const char* ascii_fingerprint; // = "C589C260CB5FB938AA327D8B9751325F";
  static const uint8_t binary_fingerprint[16]; // = {0xC5,0x89,0xC2,0x60,0xCB,0x5F,0xB9,0x38,0xAA,0x32,0x7D,0x8B,0x97,0x51,0x32,0x5F};

  NavControllerOutput() : nav_roll(0), nav_pitch(0), nav_bearing(0), target_bearing(0), wp_dist(0), alt_error(0), aspd_error(0), xtrack_error(0) {
  }

  virtual ~NavControllerOutput() throw() {}

  double nav_roll;
  double nav_pitch;
  int16_t nav_bearing;
  int16_t target_bearing;
  int16_t wp_dist;
  double alt_error;
  double aspd_error;
  double xtrack_error;

  _NavControllerOutput__isset __isset;

  void __set_nav_roll(const double val) {
    nav_roll = val;
  }

  void __set_nav_pitch(const double val) {
    nav_pitch = val;
  }

  void __set_nav_bearing(const int16_t val) {
    nav_bearing = val;
  }

  void __set_target_bearing(const int16_t val) {
    target_bearing = val;
  }

  void __set_wp_dist(const int16_t val) {
    wp_dist = val;
  }

  void __set_alt_error(const double val) {
    alt_error = val;
  }

  void __set_aspd_error(const double val) {
    aspd_error = val;
  }

  void __set_xtrack_error(const double val) {
    xtrack_error = val;
  }

  bool operator == (const NavControllerOutput & rhs) const
  {
    if (!(nav_roll == rhs.nav_roll))
      return false;
    if (!(nav_pitch == rhs.nav_pitch))
      return false;
    if (!(nav_bearing == rhs.nav_bearing))
      return false;
    if (!(target_bearing == rhs.target_bearing))
      return false;
    if (!(wp_dist == rhs.wp_dist))
      return false;
    if (!(alt_error == rhs.alt_error))
      return false;
    if (!(aspd_error == rhs.aspd_error))
      return false;
    if (!(xtrack_error == rhs.xtrack_error))
      return false;
    return true;
  }
  bool operator != (const NavControllerOutput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NavControllerOutput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NavControllerOutput &a, NavControllerOutput &b);

typedef struct _SetQuadSwarmLedRollPitchYawThrust__isset {
  _SetQuadSwarmLedRollPitchYawThrust__isset() : group(false), mode(false), led_red(false), led_blue(false), led_green(false), roll(false), pitch(false), yaw(false), thrust(false) {}
  bool group;
  bool mode;
  bool led_red;
  bool led_blue;
  bool led_green;
  bool roll;
  bool pitch;
  bool yaw;
  bool thrust;
} _SetQuadSwarmLedRollPitchYawThrust__isset;

class SetQuadSwarmLedRollPitchYawThrust {
 public:

  static const char* ascii_fingerprint; // = "A41D00A87C3F98C728DC2A12351B9E5B";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0x1D,0x00,0xA8,0x7C,0x3F,0x98,0xC7,0x28,0xDC,0x2A,0x12,0x35,0x1B,0x9E,0x5B};

  SetQuadSwarmLedRollPitchYawThrust() : group(0), mode(0) {
  }

  virtual ~SetQuadSwarmLedRollPitchYawThrust() throw() {}

  int8_t group;
  int8_t mode;
  std::vector<int8_t>  led_red;
  std::vector<int8_t>  led_blue;
  std::vector<int8_t>  led_green;
  std::vector<int16_t>  roll;
  std::vector<int16_t>  pitch;
  std::vector<int16_t>  yaw;
  std::vector<int16_t>  thrust;

  _SetQuadSwarmLedRollPitchYawThrust__isset __isset;

  void __set_group(const int8_t val) {
    group = val;
  }

  void __set_mode(const int8_t val) {
    mode = val;
  }

  void __set_led_red(const std::vector<int8_t> & val) {
    led_red = val;
  }

  void __set_led_blue(const std::vector<int8_t> & val) {
    led_blue = val;
  }

  void __set_led_green(const std::vector<int8_t> & val) {
    led_green = val;
  }

  void __set_roll(const std::vector<int16_t> & val) {
    roll = val;
  }

  void __set_pitch(const std::vector<int16_t> & val) {
    pitch = val;
  }

  void __set_yaw(const std::vector<int16_t> & val) {
    yaw = val;
  }

  void __set_thrust(const std::vector<int16_t> & val) {
    thrust = val;
  }

  bool operator == (const SetQuadSwarmLedRollPitchYawThrust & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(led_red == rhs.led_red))
      return false;
    if (!(led_blue == rhs.led_blue))
      return false;
    if (!(led_green == rhs.led_green))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    return true;
  }
  bool operator != (const SetQuadSwarmLedRollPitchYawThrust &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQuadSwarmLedRollPitchYawThrust & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetQuadSwarmLedRollPitchYawThrust &a, SetQuadSwarmLedRollPitchYawThrust &b);

typedef struct _StateCorrection__isset {
  _StateCorrection__isset() : xErr(false), yErr(false), zErr(false), rollErr(false), pitchErr(false), yawErr(false), vxErr(false), vyErr(false), vzErr(false) {}
  bool xErr;
  bool yErr;
  bool zErr;
  bool rollErr;
  bool pitchErr;
  bool yawErr;
  bool vxErr;
  bool vyErr;
  bool vzErr;
} _StateCorrection__isset;

class StateCorrection {
 public:

  static const char* ascii_fingerprint; // = "71D8B991AC9207B805F9D84764BB0E68";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0xD8,0xB9,0x91,0xAC,0x92,0x07,0xB8,0x05,0xF9,0xD8,0x47,0x64,0xBB,0x0E,0x68};

  StateCorrection() : xErr(0), yErr(0), zErr(0), rollErr(0), pitchErr(0), yawErr(0), vxErr(0), vyErr(0), vzErr(0) {
  }

  virtual ~StateCorrection() throw() {}

  double xErr;
  double yErr;
  double zErr;
  double rollErr;
  double pitchErr;
  double yawErr;
  double vxErr;
  double vyErr;
  double vzErr;

  _StateCorrection__isset __isset;

  void __set_xErr(const double val) {
    xErr = val;
  }

  void __set_yErr(const double val) {
    yErr = val;
  }

  void __set_zErr(const double val) {
    zErr = val;
  }

  void __set_rollErr(const double val) {
    rollErr = val;
  }

  void __set_pitchErr(const double val) {
    pitchErr = val;
  }

  void __set_yawErr(const double val) {
    yawErr = val;
  }

  void __set_vxErr(const double val) {
    vxErr = val;
  }

  void __set_vyErr(const double val) {
    vyErr = val;
  }

  void __set_vzErr(const double val) {
    vzErr = val;
  }

  bool operator == (const StateCorrection & rhs) const
  {
    if (!(xErr == rhs.xErr))
      return false;
    if (!(yErr == rhs.yErr))
      return false;
    if (!(zErr == rhs.zErr))
      return false;
    if (!(rollErr == rhs.rollErr))
      return false;
    if (!(pitchErr == rhs.pitchErr))
      return false;
    if (!(yawErr == rhs.yawErr))
      return false;
    if (!(vxErr == rhs.vxErr))
      return false;
    if (!(vyErr == rhs.vyErr))
      return false;
    if (!(vzErr == rhs.vzErr))
      return false;
    return true;
  }
  bool operator != (const StateCorrection &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateCorrection & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StateCorrection &a, StateCorrection &b);

typedef struct _RequestDataStream__isset {
  _RequestDataStream__isset() : target_system(false), target_component(false), req_stream_id(false), req_message_rate(false), start_stop(false) {}
  bool target_system;
  bool target_component;
  bool req_stream_id;
  bool req_message_rate;
  bool start_stop;
} _RequestDataStream__isset;

class RequestDataStream {
 public:

  static const char* ascii_fingerprint; // = "869A88041B79929E7E093D6667848354";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x9A,0x88,0x04,0x1B,0x79,0x92,0x9E,0x7E,0x09,0x3D,0x66,0x67,0x84,0x83,0x54};

  RequestDataStream() : target_system(0), target_component(0), req_stream_id(0), req_message_rate(0), start_stop(0) {
  }

  virtual ~RequestDataStream() throw() {}

  int8_t target_system;
  int8_t target_component;
  int8_t req_stream_id;
  int16_t req_message_rate;
  int8_t start_stop;

  _RequestDataStream__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_req_stream_id(const int8_t val) {
    req_stream_id = val;
  }

  void __set_req_message_rate(const int16_t val) {
    req_message_rate = val;
  }

  void __set_start_stop(const int8_t val) {
    start_stop = val;
  }

  bool operator == (const RequestDataStream & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(req_stream_id == rhs.req_stream_id))
      return false;
    if (!(req_message_rate == rhs.req_message_rate))
      return false;
    if (!(start_stop == rhs.start_stop))
      return false;
    return true;
  }
  bool operator != (const RequestDataStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestDataStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestDataStream &a, RequestDataStream &b);

typedef struct _DataStream__isset {
  _DataStream__isset() : stream_id(false), message_rate(false), on_off(false) {}
  bool stream_id;
  bool message_rate;
  bool on_off;
} _DataStream__isset;

class DataStream {
 public:

  static const char* ascii_fingerprint; // = "FB1FAB615C84081B2F0752975CCF8746";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x1F,0xAB,0x61,0x5C,0x84,0x08,0x1B,0x2F,0x07,0x52,0x97,0x5C,0xCF,0x87,0x46};

  DataStream() : stream_id(0), message_rate(0), on_off(0) {
  }

  virtual ~DataStream() throw() {}

  int8_t stream_id;
  int16_t message_rate;
  int8_t on_off;

  _DataStream__isset __isset;

  void __set_stream_id(const int8_t val) {
    stream_id = val;
  }

  void __set_message_rate(const int16_t val) {
    message_rate = val;
  }

  void __set_on_off(const int8_t val) {
    on_off = val;
  }

  bool operator == (const DataStream & rhs) const
  {
    if (!(stream_id == rhs.stream_id))
      return false;
    if (!(message_rate == rhs.message_rate))
      return false;
    if (!(on_off == rhs.on_off))
      return false;
    return true;
  }
  bool operator != (const DataStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DataStream &a, DataStream &b);

typedef struct _ManualControl__isset {
  _ManualControl__isset() : target(false), x(false), y(false), z(false), r(false), buttons(false) {}
  bool target;
  bool x;
  bool y;
  bool z;
  bool r;
  bool buttons;
} _ManualControl__isset;

class ManualControl {
 public:

  static const char* ascii_fingerprint; // = "F3D80AAEB967643D6C52A6F0AB966EC1";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0xD8,0x0A,0xAE,0xB9,0x67,0x64,0x3D,0x6C,0x52,0xA6,0xF0,0xAB,0x96,0x6E,0xC1};

  ManualControl() : target(0), x(0), y(0), z(0), r(0), buttons(0) {
  }

  virtual ~ManualControl() throw() {}

  int8_t target;
  int16_t x;
  int16_t y;
  int16_t z;
  int16_t r;
  int16_t buttons;

  _ManualControl__isset __isset;

  void __set_target(const int8_t val) {
    target = val;
  }

  void __set_x(const int16_t val) {
    x = val;
  }

  void __set_y(const int16_t val) {
    y = val;
  }

  void __set_z(const int16_t val) {
    z = val;
  }

  void __set_r(const int16_t val) {
    r = val;
  }

  void __set_buttons(const int16_t val) {
    buttons = val;
  }

  bool operator == (const ManualControl & rhs) const
  {
    if (!(target == rhs.target))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(r == rhs.r))
      return false;
    if (!(buttons == rhs.buttons))
      return false;
    return true;
  }
  bool operator != (const ManualControl &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ManualControl & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ManualControl &a, ManualControl &b);

typedef struct _RcChannelsOverride__isset {
  _RcChannelsOverride__isset() : target_system(false), target_component(false), chan1_raw(false), chan2_raw(false), chan3_raw(false), chan4_raw(false), chan5_raw(false), chan6_raw(false), chan7_raw(false), chan8_raw(false) {}
  bool target_system;
  bool target_component;
  bool chan1_raw;
  bool chan2_raw;
  bool chan3_raw;
  bool chan4_raw;
  bool chan5_raw;
  bool chan6_raw;
  bool chan7_raw;
  bool chan8_raw;
} _RcChannelsOverride__isset;

class RcChannelsOverride {
 public:

  static const char* ascii_fingerprint; // = "1606DA5B326A3045FE4383C796E0C2F7";
  static const uint8_t binary_fingerprint[16]; // = {0x16,0x06,0xDA,0x5B,0x32,0x6A,0x30,0x45,0xFE,0x43,0x83,0xC7,0x96,0xE0,0xC2,0xF7};

  RcChannelsOverride() : target_system(0), target_component(0), chan1_raw(0), chan2_raw(0), chan3_raw(0), chan4_raw(0), chan5_raw(0), chan6_raw(0), chan7_raw(0), chan8_raw(0) {
  }

  virtual ~RcChannelsOverride() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t chan1_raw;
  int16_t chan2_raw;
  int16_t chan3_raw;
  int16_t chan4_raw;
  int16_t chan5_raw;
  int16_t chan6_raw;
  int16_t chan7_raw;
  int16_t chan8_raw;

  _RcChannelsOverride__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_chan1_raw(const int16_t val) {
    chan1_raw = val;
  }

  void __set_chan2_raw(const int16_t val) {
    chan2_raw = val;
  }

  void __set_chan3_raw(const int16_t val) {
    chan3_raw = val;
  }

  void __set_chan4_raw(const int16_t val) {
    chan4_raw = val;
  }

  void __set_chan5_raw(const int16_t val) {
    chan5_raw = val;
  }

  void __set_chan6_raw(const int16_t val) {
    chan6_raw = val;
  }

  void __set_chan7_raw(const int16_t val) {
    chan7_raw = val;
  }

  void __set_chan8_raw(const int16_t val) {
    chan8_raw = val;
  }

  bool operator == (const RcChannelsOverride & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(chan1_raw == rhs.chan1_raw))
      return false;
    if (!(chan2_raw == rhs.chan2_raw))
      return false;
    if (!(chan3_raw == rhs.chan3_raw))
      return false;
    if (!(chan4_raw == rhs.chan4_raw))
      return false;
    if (!(chan5_raw == rhs.chan5_raw))
      return false;
    if (!(chan6_raw == rhs.chan6_raw))
      return false;
    if (!(chan7_raw == rhs.chan7_raw))
      return false;
    if (!(chan8_raw == rhs.chan8_raw))
      return false;
    return true;
  }
  bool operator != (const RcChannelsOverride &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RcChannelsOverride & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RcChannelsOverride &a, RcChannelsOverride &b);

typedef struct _VfrHud__isset {
  _VfrHud__isset() : airspeed(false), groundspeed(false), heading(false), throttle(false), alt(false), climb(false) {}
  bool airspeed;
  bool groundspeed;
  bool heading;
  bool throttle;
  bool alt;
  bool climb;
} _VfrHud__isset;

class VfrHud {
 public:

  static const char* ascii_fingerprint; // = "BF1643060821656F87F9C4B6E1F1D385";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x16,0x43,0x06,0x08,0x21,0x65,0x6F,0x87,0xF9,0xC4,0xB6,0xE1,0xF1,0xD3,0x85};

  VfrHud() : airspeed(0), groundspeed(0), heading(0), throttle(0), alt(0), climb(0) {
  }

  virtual ~VfrHud() throw() {}

  double airspeed;
  double groundspeed;
  int16_t heading;
  int16_t throttle;
  double alt;
  double climb;

  _VfrHud__isset __isset;

  void __set_airspeed(const double val) {
    airspeed = val;
  }

  void __set_groundspeed(const double val) {
    groundspeed = val;
  }

  void __set_heading(const int16_t val) {
    heading = val;
  }

  void __set_throttle(const int16_t val) {
    throttle = val;
  }

  void __set_alt(const double val) {
    alt = val;
  }

  void __set_climb(const double val) {
    climb = val;
  }

  bool operator == (const VfrHud & rhs) const
  {
    if (!(airspeed == rhs.airspeed))
      return false;
    if (!(groundspeed == rhs.groundspeed))
      return false;
    if (!(heading == rhs.heading))
      return false;
    if (!(throttle == rhs.throttle))
      return false;
    if (!(alt == rhs.alt))
      return false;
    if (!(climb == rhs.climb))
      return false;
    return true;
  }
  bool operator != (const VfrHud &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VfrHud & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VfrHud &a, VfrHud &b);

typedef struct _CommandLong__isset {
  _CommandLong__isset() : target_system(false), target_component(false), command(false), confirmation(false), param1(false), param2(false), param3(false), param4(false), param5(false), param6(false), param7(false) {}
  bool target_system;
  bool target_component;
  bool command;
  bool confirmation;
  bool param1;
  bool param2;
  bool param3;
  bool param4;
  bool param5;
  bool param6;
  bool param7;
} _CommandLong__isset;

class CommandLong {
 public:

  static const char* ascii_fingerprint; // = "2323F9FCD85C8BE9CA44A17A83443EE4";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0x23,0xF9,0xFC,0xD8,0x5C,0x8B,0xE9,0xCA,0x44,0xA1,0x7A,0x83,0x44,0x3E,0xE4};

  CommandLong() : target_system(0), target_component(0), command(0), confirmation(0), param1(0), param2(0), param3(0), param4(0), param5(0), param6(0), param7(0) {
  }

  virtual ~CommandLong() throw() {}

  int8_t target_system;
  int8_t target_component;
  int16_t command;
  int8_t confirmation;
  double param1;
  double param2;
  double param3;
  double param4;
  double param5;
  double param6;
  double param7;

  _CommandLong__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_target_component(const int8_t val) {
    target_component = val;
  }

  void __set_command(const int16_t val) {
    command = val;
  }

  void __set_confirmation(const int8_t val) {
    confirmation = val;
  }

  void __set_param1(const double val) {
    param1 = val;
  }

  void __set_param2(const double val) {
    param2 = val;
  }

  void __set_param3(const double val) {
    param3 = val;
  }

  void __set_param4(const double val) {
    param4 = val;
  }

  void __set_param5(const double val) {
    param5 = val;
  }

  void __set_param6(const double val) {
    param6 = val;
  }

  void __set_param7(const double val) {
    param7 = val;
  }

  bool operator == (const CommandLong & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(target_component == rhs.target_component))
      return false;
    if (!(command == rhs.command))
      return false;
    if (!(confirmation == rhs.confirmation))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(param4 == rhs.param4))
      return false;
    if (!(param5 == rhs.param5))
      return false;
    if (!(param6 == rhs.param6))
      return false;
    if (!(param7 == rhs.param7))
      return false;
    return true;
  }
  bool operator != (const CommandLong &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandLong & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommandLong &a, CommandLong &b);

typedef struct _CommandAck__isset {
  _CommandAck__isset() : command(false), result(false) {}
  bool command;
  bool result;
} _CommandAck__isset;

class CommandAck {
 public:

  static const char* ascii_fingerprint; // = "2F32B8B152B4427223DB9D670291659B";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

  CommandAck() : command(0), result(0) {
  }

  virtual ~CommandAck() throw() {}

  int16_t command;
  int8_t result;

  _CommandAck__isset __isset;

  void __set_command(const int16_t val) {
    command = val;
  }

  void __set_result(const int8_t val) {
    result = val;
  }

  bool operator == (const CommandAck & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const CommandAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommandAck &a, CommandAck &b);

typedef struct _RollPitchYawRatesThrustSetpoint__isset {
  _RollPitchYawRatesThrustSetpoint__isset() : time_boot_ms(false), roll_rate(false), pitch_rate(false), yaw_rate(false), thrust(false) {}
  bool time_boot_ms;
  bool roll_rate;
  bool pitch_rate;
  bool yaw_rate;
  bool thrust;
} _RollPitchYawRatesThrustSetpoint__isset;

class RollPitchYawRatesThrustSetpoint {
 public:

  static const char* ascii_fingerprint; // = "5472C7414D3514110BC82AEEAA7E60C6";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x72,0xC7,0x41,0x4D,0x35,0x14,0x11,0x0B,0xC8,0x2A,0xEE,0xAA,0x7E,0x60,0xC6};

  RollPitchYawRatesThrustSetpoint() : time_boot_ms(0), roll_rate(0), pitch_rate(0), yaw_rate(0), thrust(0) {
  }

  virtual ~RollPitchYawRatesThrustSetpoint() throw() {}

  int32_t time_boot_ms;
  double roll_rate;
  double pitch_rate;
  double yaw_rate;
  double thrust;

  _RollPitchYawRatesThrustSetpoint__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_roll_rate(const double val) {
    roll_rate = val;
  }

  void __set_pitch_rate(const double val) {
    pitch_rate = val;
  }

  void __set_yaw_rate(const double val) {
    yaw_rate = val;
  }

  void __set_thrust(const double val) {
    thrust = val;
  }

  bool operator == (const RollPitchYawRatesThrustSetpoint & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(roll_rate == rhs.roll_rate))
      return false;
    if (!(pitch_rate == rhs.pitch_rate))
      return false;
    if (!(yaw_rate == rhs.yaw_rate))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    return true;
  }
  bool operator != (const RollPitchYawRatesThrustSetpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RollPitchYawRatesThrustSetpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RollPitchYawRatesThrustSetpoint &a, RollPitchYawRatesThrustSetpoint &b);

typedef struct _ManualSetpoint__isset {
  _ManualSetpoint__isset() : time_boot_ms(false), roll(false), pitch(false), yaw(false), thrust(false), mode_switch(false), manual_override_switch(false) {}
  bool time_boot_ms;
  bool roll;
  bool pitch;
  bool yaw;
  bool thrust;
  bool mode_switch;
  bool manual_override_switch;
} _ManualSetpoint__isset;

class ManualSetpoint {
 public:

  static const char* ascii_fingerprint; // = "6F2614A6D9999EC4C27EC924CF9DA8BC";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x26,0x14,0xA6,0xD9,0x99,0x9E,0xC4,0xC2,0x7E,0xC9,0x24,0xCF,0x9D,0xA8,0xBC};

  ManualSetpoint() : time_boot_ms(0), roll(0), pitch(0), yaw(0), thrust(0), mode_switch(0), manual_override_switch(0) {
  }

  virtual ~ManualSetpoint() throw() {}

  int32_t time_boot_ms;
  double roll;
  double pitch;
  double yaw;
  double thrust;
  int8_t mode_switch;
  int8_t manual_override_switch;

  _ManualSetpoint__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  void __set_thrust(const double val) {
    thrust = val;
  }

  void __set_mode_switch(const int8_t val) {
    mode_switch = val;
  }

  void __set_manual_override_switch(const int8_t val) {
    manual_override_switch = val;
  }

  bool operator == (const ManualSetpoint & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    if (!(thrust == rhs.thrust))
      return false;
    if (!(mode_switch == rhs.mode_switch))
      return false;
    if (!(manual_override_switch == rhs.manual_override_switch))
      return false;
    return true;
  }
  bool operator != (const ManualSetpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ManualSetpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ManualSetpoint &a, ManualSetpoint &b);

typedef struct _LocalPositionNedSystemGlobalOffset__isset {
  _LocalPositionNedSystemGlobalOffset__isset() : time_boot_ms(false), x(false), y(false), z(false), roll(false), pitch(false), yaw(false) {}
  bool time_boot_ms;
  bool x;
  bool y;
  bool z;
  bool roll;
  bool pitch;
  bool yaw;
} _LocalPositionNedSystemGlobalOffset__isset;

class LocalPositionNedSystemGlobalOffset {
 public:

  static const char* ascii_fingerprint; // = "BCF089261F2F269C2747661248BE94C6";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xF0,0x89,0x26,0x1F,0x2F,0x26,0x9C,0x27,0x47,0x66,0x12,0x48,0xBE,0x94,0xC6};

  LocalPositionNedSystemGlobalOffset() : time_boot_ms(0), x(0), y(0), z(0), roll(0), pitch(0), yaw(0) {
  }

  virtual ~LocalPositionNedSystemGlobalOffset() throw() {}

  int32_t time_boot_ms;
  double x;
  double y;
  double z;
  double roll;
  double pitch;
  double yaw;

  _LocalPositionNedSystemGlobalOffset__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  bool operator == (const LocalPositionNedSystemGlobalOffset & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const LocalPositionNedSystemGlobalOffset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalPositionNedSystemGlobalOffset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LocalPositionNedSystemGlobalOffset &a, LocalPositionNedSystemGlobalOffset &b);

typedef struct _HilState__isset {
  _HilState__isset() : time_usec(false), roll(false), pitch(false), yaw(false), rollspeed(false), pitchspeed(false), yawspeed(false), lat(false), lon(false), alt(false), vx(false), vy(false), vz(false), xacc(false), yacc(false), zacc(false) {}
  bool time_usec;
  bool roll;
  bool pitch;
  bool yaw;
  bool rollspeed;
  bool pitchspeed;
  bool yawspeed;
  bool lat;
  bool lon;
  bool alt;
  bool vx;
  bool vy;
  bool vz;
  bool xacc;
  bool yacc;
  bool zacc;
} _HilState__isset;

class HilState {
 public:

  static const char* ascii_fingerprint; // = "CEA05959278AC53F3CEA1F134B333ED4";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0xA0,0x59,0x59,0x27,0x8A,0xC5,0x3F,0x3C,0xEA,0x1F,0x13,0x4B,0x33,0x3E,0xD4};

  HilState() : time_usec(0), roll(0), pitch(0), yaw(0), rollspeed(0), pitchspeed(0), yawspeed(0), lat(0), lon(0), alt(0), vx(0), vy(0), vz(0), xacc(0), yacc(0), zacc(0) {
  }

  virtual ~HilState() throw() {}

  int64_t time_usec;
  double roll;
  double pitch;
  double yaw;
  double rollspeed;
  double pitchspeed;
  double yawspeed;
  int32_t lat;
  int32_t lon;
  int32_t alt;
  int16_t vx;
  int16_t vy;
  int16_t vz;
  int16_t xacc;
  int16_t yacc;
  int16_t zacc;

  _HilState__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  void __set_rollspeed(const double val) {
    rollspeed = val;
  }

  void __set_pitchspeed(const double val) {
    pitchspeed = val;
  }

  void __set_yawspeed(const double val) {
    yawspeed = val;
  }

  void __set_lat(const int32_t val) {
    lat = val;
  }

  void __set_lon(const int32_t val) {
    lon = val;
  }

  void __set_alt(const int32_t val) {
    alt = val;
  }

  void __set_vx(const int16_t val) {
    vx = val;
  }

  void __set_vy(const int16_t val) {
    vy = val;
  }

  void __set_vz(const int16_t val) {
    vz = val;
  }

  void __set_xacc(const int16_t val) {
    xacc = val;
  }

  void __set_yacc(const int16_t val) {
    yacc = val;
  }

  void __set_zacc(const int16_t val) {
    zacc = val;
  }

  bool operator == (const HilState & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    if (!(rollspeed == rhs.rollspeed))
      return false;
    if (!(pitchspeed == rhs.pitchspeed))
      return false;
    if (!(yawspeed == rhs.yawspeed))
      return false;
    if (!(lat == rhs.lat))
      return false;
    if (!(lon == rhs.lon))
      return false;
    if (!(alt == rhs.alt))
      return false;
    if (!(vx == rhs.vx))
      return false;
    if (!(vy == rhs.vy))
      return false;
    if (!(vz == rhs.vz))
      return false;
    if (!(xacc == rhs.xacc))
      return false;
    if (!(yacc == rhs.yacc))
      return false;
    if (!(zacc == rhs.zacc))
      return false;
    return true;
  }
  bool operator != (const HilState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HilState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HilState &a, HilState &b);

typedef struct _HilControls__isset {
  _HilControls__isset() : time_usec(false), roll_ailerons(false), pitch_elevator(false), yaw_rudder(false), throttle(false), aux1(false), aux2(false), aux3(false), aux4(false), mode(false), nav_mode(false) {}
  bool time_usec;
  bool roll_ailerons;
  bool pitch_elevator;
  bool yaw_rudder;
  bool throttle;
  bool aux1;
  bool aux2;
  bool aux3;
  bool aux4;
  bool mode;
  bool nav_mode;
} _HilControls__isset;

class HilControls {
 public:

  static const char* ascii_fingerprint; // = "D7457EF27B9A3030D5B2A3FB1D42866A";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x45,0x7E,0xF2,0x7B,0x9A,0x30,0x30,0xD5,0xB2,0xA3,0xFB,0x1D,0x42,0x86,0x6A};

  HilControls() : time_usec(0), roll_ailerons(0), pitch_elevator(0), yaw_rudder(0), throttle(0), aux1(0), aux2(0), aux3(0), aux4(0), mode(0), nav_mode(0) {
  }

  virtual ~HilControls() throw() {}

  int64_t time_usec;
  double roll_ailerons;
  double pitch_elevator;
  double yaw_rudder;
  double throttle;
  double aux1;
  double aux2;
  double aux3;
  double aux4;
  int8_t mode;
  int8_t nav_mode;

  _HilControls__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_roll_ailerons(const double val) {
    roll_ailerons = val;
  }

  void __set_pitch_elevator(const double val) {
    pitch_elevator = val;
  }

  void __set_yaw_rudder(const double val) {
    yaw_rudder = val;
  }

  void __set_throttle(const double val) {
    throttle = val;
  }

  void __set_aux1(const double val) {
    aux1 = val;
  }

  void __set_aux2(const double val) {
    aux2 = val;
  }

  void __set_aux3(const double val) {
    aux3 = val;
  }

  void __set_aux4(const double val) {
    aux4 = val;
  }

  void __set_mode(const int8_t val) {
    mode = val;
  }

  void __set_nav_mode(const int8_t val) {
    nav_mode = val;
  }

  bool operator == (const HilControls & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(roll_ailerons == rhs.roll_ailerons))
      return false;
    if (!(pitch_elevator == rhs.pitch_elevator))
      return false;
    if (!(yaw_rudder == rhs.yaw_rudder))
      return false;
    if (!(throttle == rhs.throttle))
      return false;
    if (!(aux1 == rhs.aux1))
      return false;
    if (!(aux2 == rhs.aux2))
      return false;
    if (!(aux3 == rhs.aux3))
      return false;
    if (!(aux4 == rhs.aux4))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(nav_mode == rhs.nav_mode))
      return false;
    return true;
  }
  bool operator != (const HilControls &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HilControls & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HilControls &a, HilControls &b);

typedef struct _HilRcInputsRaw__isset {
  _HilRcInputsRaw__isset() : time_usec(false), chan1_raw(false), chan2_raw(false), chan3_raw(false), chan4_raw(false), chan5_raw(false), chan6_raw(false), chan7_raw(false), chan8_raw(false), chan9_raw(false), chan10_raw(false), chan11_raw(false), chan12_raw(false), rssi(false) {}
  bool time_usec;
  bool chan1_raw;
  bool chan2_raw;
  bool chan3_raw;
  bool chan4_raw;
  bool chan5_raw;
  bool chan6_raw;
  bool chan7_raw;
  bool chan8_raw;
  bool chan9_raw;
  bool chan10_raw;
  bool chan11_raw;
  bool chan12_raw;
  bool rssi;
} _HilRcInputsRaw__isset;

class HilRcInputsRaw {
 public:

  static const char* ascii_fingerprint; // = "80FD4DE0AE43F1958475E3D8D253B720";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0xFD,0x4D,0xE0,0xAE,0x43,0xF1,0x95,0x84,0x75,0xE3,0xD8,0xD2,0x53,0xB7,0x20};

  HilRcInputsRaw() : time_usec(0), chan1_raw(0), chan2_raw(0), chan3_raw(0), chan4_raw(0), chan5_raw(0), chan6_raw(0), chan7_raw(0), chan8_raw(0), chan9_raw(0), chan10_raw(0), chan11_raw(0), chan12_raw(0), rssi(0) {
  }

  virtual ~HilRcInputsRaw() throw() {}

  int64_t time_usec;
  int16_t chan1_raw;
  int16_t chan2_raw;
  int16_t chan3_raw;
  int16_t chan4_raw;
  int16_t chan5_raw;
  int16_t chan6_raw;
  int16_t chan7_raw;
  int16_t chan8_raw;
  int16_t chan9_raw;
  int16_t chan10_raw;
  int16_t chan11_raw;
  int16_t chan12_raw;
  int8_t rssi;

  _HilRcInputsRaw__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_chan1_raw(const int16_t val) {
    chan1_raw = val;
  }

  void __set_chan2_raw(const int16_t val) {
    chan2_raw = val;
  }

  void __set_chan3_raw(const int16_t val) {
    chan3_raw = val;
  }

  void __set_chan4_raw(const int16_t val) {
    chan4_raw = val;
  }

  void __set_chan5_raw(const int16_t val) {
    chan5_raw = val;
  }

  void __set_chan6_raw(const int16_t val) {
    chan6_raw = val;
  }

  void __set_chan7_raw(const int16_t val) {
    chan7_raw = val;
  }

  void __set_chan8_raw(const int16_t val) {
    chan8_raw = val;
  }

  void __set_chan9_raw(const int16_t val) {
    chan9_raw = val;
  }

  void __set_chan10_raw(const int16_t val) {
    chan10_raw = val;
  }

  void __set_chan11_raw(const int16_t val) {
    chan11_raw = val;
  }

  void __set_chan12_raw(const int16_t val) {
    chan12_raw = val;
  }

  void __set_rssi(const int8_t val) {
    rssi = val;
  }

  bool operator == (const HilRcInputsRaw & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(chan1_raw == rhs.chan1_raw))
      return false;
    if (!(chan2_raw == rhs.chan2_raw))
      return false;
    if (!(chan3_raw == rhs.chan3_raw))
      return false;
    if (!(chan4_raw == rhs.chan4_raw))
      return false;
    if (!(chan5_raw == rhs.chan5_raw))
      return false;
    if (!(chan6_raw == rhs.chan6_raw))
      return false;
    if (!(chan7_raw == rhs.chan7_raw))
      return false;
    if (!(chan8_raw == rhs.chan8_raw))
      return false;
    if (!(chan9_raw == rhs.chan9_raw))
      return false;
    if (!(chan10_raw == rhs.chan10_raw))
      return false;
    if (!(chan11_raw == rhs.chan11_raw))
      return false;
    if (!(chan12_raw == rhs.chan12_raw))
      return false;
    if (!(rssi == rhs.rssi))
      return false;
    return true;
  }
  bool operator != (const HilRcInputsRaw &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HilRcInputsRaw & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HilRcInputsRaw &a, HilRcInputsRaw &b);

typedef struct _OpticalFlow__isset {
  _OpticalFlow__isset() : time_usec(false), sensor_id(false), flow_x(false), flow_y(false), flow_comp_m_x(false), flow_comp_m_y(false), quality(false), ground_distance(false) {}
  bool time_usec;
  bool sensor_id;
  bool flow_x;
  bool flow_y;
  bool flow_comp_m_x;
  bool flow_comp_m_y;
  bool quality;
  bool ground_distance;
} _OpticalFlow__isset;

class OpticalFlow {
 public:

  static const char* ascii_fingerprint; // = "18FFFFA25516B3097146285E51B0D97E";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xFF,0xFF,0xA2,0x55,0x16,0xB3,0x09,0x71,0x46,0x28,0x5E,0x51,0xB0,0xD9,0x7E};

  OpticalFlow() : time_usec(0), sensor_id(0), flow_x(0), flow_y(0), flow_comp_m_x(0), flow_comp_m_y(0), quality(0), ground_distance(0) {
  }

  virtual ~OpticalFlow() throw() {}

  int64_t time_usec;
  int8_t sensor_id;
  int16_t flow_x;
  int16_t flow_y;
  double flow_comp_m_x;
  double flow_comp_m_y;
  int8_t quality;
  double ground_distance;

  _OpticalFlow__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_sensor_id(const int8_t val) {
    sensor_id = val;
  }

  void __set_flow_x(const int16_t val) {
    flow_x = val;
  }

  void __set_flow_y(const int16_t val) {
    flow_y = val;
  }

  void __set_flow_comp_m_x(const double val) {
    flow_comp_m_x = val;
  }

  void __set_flow_comp_m_y(const double val) {
    flow_comp_m_y = val;
  }

  void __set_quality(const int8_t val) {
    quality = val;
  }

  void __set_ground_distance(const double val) {
    ground_distance = val;
  }

  bool operator == (const OpticalFlow & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(sensor_id == rhs.sensor_id))
      return false;
    if (!(flow_x == rhs.flow_x))
      return false;
    if (!(flow_y == rhs.flow_y))
      return false;
    if (!(flow_comp_m_x == rhs.flow_comp_m_x))
      return false;
    if (!(flow_comp_m_y == rhs.flow_comp_m_y))
      return false;
    if (!(quality == rhs.quality))
      return false;
    if (!(ground_distance == rhs.ground_distance))
      return false;
    return true;
  }
  bool operator != (const OpticalFlow &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OpticalFlow & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OpticalFlow &a, OpticalFlow &b);

typedef struct _GlobalVisionPositionEstimate__isset {
  _GlobalVisionPositionEstimate__isset() : usec(false), x(false), y(false), z(false), roll(false), pitch(false), yaw(false) {}
  bool usec;
  bool x;
  bool y;
  bool z;
  bool roll;
  bool pitch;
  bool yaw;
} _GlobalVisionPositionEstimate__isset;

class GlobalVisionPositionEstimate {
 public:

  static const char* ascii_fingerprint; // = "09E2FBB9B1569ACA80DA61E1963D99CF";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xE2,0xFB,0xB9,0xB1,0x56,0x9A,0xCA,0x80,0xDA,0x61,0xE1,0x96,0x3D,0x99,0xCF};

  GlobalVisionPositionEstimate() : usec(0), x(0), y(0), z(0), roll(0), pitch(0), yaw(0) {
  }

  virtual ~GlobalVisionPositionEstimate() throw() {}

  int64_t usec;
  double x;
  double y;
  double z;
  double roll;
  double pitch;
  double yaw;

  _GlobalVisionPositionEstimate__isset __isset;

  void __set_usec(const int64_t val) {
    usec = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  bool operator == (const GlobalVisionPositionEstimate & rhs) const
  {
    if (!(usec == rhs.usec))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const GlobalVisionPositionEstimate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GlobalVisionPositionEstimate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GlobalVisionPositionEstimate &a, GlobalVisionPositionEstimate &b);

typedef struct _VisionPositionEstimate__isset {
  _VisionPositionEstimate__isset() : usec(false), x(false), y(false), z(false), roll(false), pitch(false), yaw(false) {}
  bool usec;
  bool x;
  bool y;
  bool z;
  bool roll;
  bool pitch;
  bool yaw;
} _VisionPositionEstimate__isset;

class VisionPositionEstimate {
 public:

  static const char* ascii_fingerprint; // = "09E2FBB9B1569ACA80DA61E1963D99CF";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xE2,0xFB,0xB9,0xB1,0x56,0x9A,0xCA,0x80,0xDA,0x61,0xE1,0x96,0x3D,0x99,0xCF};

  VisionPositionEstimate() : usec(0), x(0), y(0), z(0), roll(0), pitch(0), yaw(0) {
  }

  virtual ~VisionPositionEstimate() throw() {}

  int64_t usec;
  double x;
  double y;
  double z;
  double roll;
  double pitch;
  double yaw;

  _VisionPositionEstimate__isset __isset;

  void __set_usec(const int64_t val) {
    usec = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  bool operator == (const VisionPositionEstimate & rhs) const
  {
    if (!(usec == rhs.usec))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const VisionPositionEstimate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VisionPositionEstimate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VisionPositionEstimate &a, VisionPositionEstimate &b);

typedef struct _VisionSpeedEstimate__isset {
  _VisionSpeedEstimate__isset() : usec(false), x(false), y(false), z(false) {}
  bool usec;
  bool x;
  bool y;
  bool z;
} _VisionSpeedEstimate__isset;

class VisionSpeedEstimate {
 public:

  static const char* ascii_fingerprint; // = "3BC5E6ABCC6C77829F8D2E02BF3E7711";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xC5,0xE6,0xAB,0xCC,0x6C,0x77,0x82,0x9F,0x8D,0x2E,0x02,0xBF,0x3E,0x77,0x11};

  VisionSpeedEstimate() : usec(0), x(0), y(0), z(0) {
  }

  virtual ~VisionSpeedEstimate() throw() {}

  int64_t usec;
  double x;
  double y;
  double z;

  _VisionSpeedEstimate__isset __isset;

  void __set_usec(const int64_t val) {
    usec = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  bool operator == (const VisionSpeedEstimate & rhs) const
  {
    if (!(usec == rhs.usec))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const VisionSpeedEstimate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VisionSpeedEstimate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VisionSpeedEstimate &a, VisionSpeedEstimate &b);

typedef struct _ViconPositionEstimate__isset {
  _ViconPositionEstimate__isset() : usec(false), x(false), y(false), z(false), roll(false), pitch(false), yaw(false) {}
  bool usec;
  bool x;
  bool y;
  bool z;
  bool roll;
  bool pitch;
  bool yaw;
} _ViconPositionEstimate__isset;

class ViconPositionEstimate {
 public:

  static const char* ascii_fingerprint; // = "09E2FBB9B1569ACA80DA61E1963D99CF";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xE2,0xFB,0xB9,0xB1,0x56,0x9A,0xCA,0x80,0xDA,0x61,0xE1,0x96,0x3D,0x99,0xCF};

  ViconPositionEstimate() : usec(0), x(0), y(0), z(0), roll(0), pitch(0), yaw(0) {
  }

  virtual ~ViconPositionEstimate() throw() {}

  int64_t usec;
  double x;
  double y;
  double z;
  double roll;
  double pitch;
  double yaw;

  _ViconPositionEstimate__isset __isset;

  void __set_usec(const int64_t val) {
    usec = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  void __set_roll(const double val) {
    roll = val;
  }

  void __set_pitch(const double val) {
    pitch = val;
  }

  void __set_yaw(const double val) {
    yaw = val;
  }

  bool operator == (const ViconPositionEstimate & rhs) const
  {
    if (!(usec == rhs.usec))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const ViconPositionEstimate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViconPositionEstimate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ViconPositionEstimate &a, ViconPositionEstimate &b);

typedef struct _HighresImu__isset {
  _HighresImu__isset() : time_usec(false), xacc(false), yacc(false), zacc(false), xgyro(false), ygyro(false), zgyro(false), xmag(false), ymag(false), zmag(false), abs_pressure(false), diff_pressure(false), pressure_alt(false), temperature(false), fields_updated(false) {}
  bool time_usec;
  bool xacc;
  bool yacc;
  bool zacc;
  bool xgyro;
  bool ygyro;
  bool zgyro;
  bool xmag;
  bool ymag;
  bool zmag;
  bool abs_pressure;
  bool diff_pressure;
  bool pressure_alt;
  bool temperature;
  bool fields_updated;
} _HighresImu__isset;

class HighresImu {
 public:

  static const char* ascii_fingerprint; // = "47E47037DB75031BE89DC8DCA26DB5E0";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xE4,0x70,0x37,0xDB,0x75,0x03,0x1B,0xE8,0x9D,0xC8,0xDC,0xA2,0x6D,0xB5,0xE0};

  HighresImu() : time_usec(0), xacc(0), yacc(0), zacc(0), xgyro(0), ygyro(0), zgyro(0), xmag(0), ymag(0), zmag(0), abs_pressure(0), diff_pressure(0), pressure_alt(0), temperature(0), fields_updated(0) {
  }

  virtual ~HighresImu() throw() {}

  int64_t time_usec;
  double xacc;
  double yacc;
  double zacc;
  double xgyro;
  double ygyro;
  double zgyro;
  double xmag;
  double ymag;
  double zmag;
  double abs_pressure;
  double diff_pressure;
  double pressure_alt;
  double temperature;
  int16_t fields_updated;

  _HighresImu__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_xacc(const double val) {
    xacc = val;
  }

  void __set_yacc(const double val) {
    yacc = val;
  }

  void __set_zacc(const double val) {
    zacc = val;
  }

  void __set_xgyro(const double val) {
    xgyro = val;
  }

  void __set_ygyro(const double val) {
    ygyro = val;
  }

  void __set_zgyro(const double val) {
    zgyro = val;
  }

  void __set_xmag(const double val) {
    xmag = val;
  }

  void __set_ymag(const double val) {
    ymag = val;
  }

  void __set_zmag(const double val) {
    zmag = val;
  }

  void __set_abs_pressure(const double val) {
    abs_pressure = val;
  }

  void __set_diff_pressure(const double val) {
    diff_pressure = val;
  }

  void __set_pressure_alt(const double val) {
    pressure_alt = val;
  }

  void __set_temperature(const double val) {
    temperature = val;
  }

  void __set_fields_updated(const int16_t val) {
    fields_updated = val;
  }

  bool operator == (const HighresImu & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(xacc == rhs.xacc))
      return false;
    if (!(yacc == rhs.yacc))
      return false;
    if (!(zacc == rhs.zacc))
      return false;
    if (!(xgyro == rhs.xgyro))
      return false;
    if (!(ygyro == rhs.ygyro))
      return false;
    if (!(zgyro == rhs.zgyro))
      return false;
    if (!(xmag == rhs.xmag))
      return false;
    if (!(ymag == rhs.ymag))
      return false;
    if (!(zmag == rhs.zmag))
      return false;
    if (!(abs_pressure == rhs.abs_pressure))
      return false;
    if (!(diff_pressure == rhs.diff_pressure))
      return false;
    if (!(pressure_alt == rhs.pressure_alt))
      return false;
    if (!(temperature == rhs.temperature))
      return false;
    if (!(fields_updated == rhs.fields_updated))
      return false;
    return true;
  }
  bool operator != (const HighresImu &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HighresImu & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HighresImu &a, HighresImu &b);

typedef struct _OmnidirectionalFlow__isset {
  _OmnidirectionalFlow__isset() : time_usec(false), sensor_id(false), left(false), right(false), quality(false), front_distance_m(false) {}
  bool time_usec;
  bool sensor_id;
  bool left;
  bool right;
  bool quality;
  bool front_distance_m;
} _OmnidirectionalFlow__isset;

class OmnidirectionalFlow {
 public:

  static const char* ascii_fingerprint; // = "7FDB4FC72528BD2930DB8A0FA316DF8F";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0xDB,0x4F,0xC7,0x25,0x28,0xBD,0x29,0x30,0xDB,0x8A,0x0F,0xA3,0x16,0xDF,0x8F};

  OmnidirectionalFlow() : time_usec(0), sensor_id(0), quality(0), front_distance_m(0) {
  }

  virtual ~OmnidirectionalFlow() throw() {}

  int64_t time_usec;
  int8_t sensor_id;
  std::vector<int16_t>  left;
  std::vector<int16_t>  right;
  int8_t quality;
  double front_distance_m;

  _OmnidirectionalFlow__isset __isset;

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_sensor_id(const int8_t val) {
    sensor_id = val;
  }

  void __set_left(const std::vector<int16_t> & val) {
    left = val;
  }

  void __set_right(const std::vector<int16_t> & val) {
    right = val;
  }

  void __set_quality(const int8_t val) {
    quality = val;
  }

  void __set_front_distance_m(const double val) {
    front_distance_m = val;
  }

  bool operator == (const OmnidirectionalFlow & rhs) const
  {
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(sensor_id == rhs.sensor_id))
      return false;
    if (!(left == rhs.left))
      return false;
    if (!(right == rhs.right))
      return false;
    if (!(quality == rhs.quality))
      return false;
    if (!(front_distance_m == rhs.front_distance_m))
      return false;
    return true;
  }
  bool operator != (const OmnidirectionalFlow &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmnidirectionalFlow & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OmnidirectionalFlow &a, OmnidirectionalFlow &b);

typedef struct _FileTransferStart__isset {
  _FileTransferStart__isset() : transfer_uid(false), dest_path(false), direction(false), file_size(false), flags(false) {}
  bool transfer_uid;
  bool dest_path;
  bool direction;
  bool file_size;
  bool flags;
} _FileTransferStart__isset;

class FileTransferStart {
 public:

  static const char* ascii_fingerprint; // = "6D9B3457F71F3ABC21CA92B1AC8C5B21";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x9B,0x34,0x57,0xF7,0x1F,0x3A,0xBC,0x21,0xCA,0x92,0xB1,0xAC,0x8C,0x5B,0x21};

  FileTransferStart() : transfer_uid(0), direction(0), file_size(0), flags(0) {
  }

  virtual ~FileTransferStart() throw() {}

  int64_t transfer_uid;
  std::vector<int8_t>  dest_path;
  int8_t direction;
  int32_t file_size;
  int8_t flags;

  _FileTransferStart__isset __isset;

  void __set_transfer_uid(const int64_t val) {
    transfer_uid = val;
  }

  void __set_dest_path(const std::vector<int8_t> & val) {
    dest_path = val;
  }

  void __set_direction(const int8_t val) {
    direction = val;
  }

  void __set_file_size(const int32_t val) {
    file_size = val;
  }

  void __set_flags(const int8_t val) {
    flags = val;
  }

  bool operator == (const FileTransferStart & rhs) const
  {
    if (!(transfer_uid == rhs.transfer_uid))
      return false;
    if (!(dest_path == rhs.dest_path))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(file_size == rhs.file_size))
      return false;
    if (!(flags == rhs.flags))
      return false;
    return true;
  }
  bool operator != (const FileTransferStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileTransferStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileTransferStart &a, FileTransferStart &b);

typedef struct _FileTransferDirList__isset {
  _FileTransferDirList__isset() : transfer_uid(false), dir_path(false), flags(false) {}
  bool transfer_uid;
  bool dir_path;
  bool flags;
} _FileTransferDirList__isset;

class FileTransferDirList {
 public:

  static const char* ascii_fingerprint; // = "1CA74480F3BF0DBB8DEC7F301A4DEEC6";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xA7,0x44,0x80,0xF3,0xBF,0x0D,0xBB,0x8D,0xEC,0x7F,0x30,0x1A,0x4D,0xEE,0xC6};

  FileTransferDirList() : transfer_uid(0), flags(0) {
  }

  virtual ~FileTransferDirList() throw() {}

  int64_t transfer_uid;
  std::vector<int8_t>  dir_path;
  int8_t flags;

  _FileTransferDirList__isset __isset;

  void __set_transfer_uid(const int64_t val) {
    transfer_uid = val;
  }

  void __set_dir_path(const std::vector<int8_t> & val) {
    dir_path = val;
  }

  void __set_flags(const int8_t val) {
    flags = val;
  }

  bool operator == (const FileTransferDirList & rhs) const
  {
    if (!(transfer_uid == rhs.transfer_uid))
      return false;
    if (!(dir_path == rhs.dir_path))
      return false;
    if (!(flags == rhs.flags))
      return false;
    return true;
  }
  bool operator != (const FileTransferDirList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileTransferDirList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileTransferDirList &a, FileTransferDirList &b);

typedef struct _FileTransferRes__isset {
  _FileTransferRes__isset() : transfer_uid(false), result(false) {}
  bool transfer_uid;
  bool result;
} _FileTransferRes__isset;

class FileTransferRes {
 public:

  static const char* ascii_fingerprint; // = "DDB540D232DEE4BB76F25D4DAA0FC261";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0xB5,0x40,0xD2,0x32,0xDE,0xE4,0xBB,0x76,0xF2,0x5D,0x4D,0xAA,0x0F,0xC2,0x61};

  FileTransferRes() : transfer_uid(0), result(0) {
  }

  virtual ~FileTransferRes() throw() {}

  int64_t transfer_uid;
  int8_t result;

  _FileTransferRes__isset __isset;

  void __set_transfer_uid(const int64_t val) {
    transfer_uid = val;
  }

  void __set_result(const int8_t val) {
    result = val;
  }

  bool operator == (const FileTransferRes & rhs) const
  {
    if (!(transfer_uid == rhs.transfer_uid))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const FileTransferRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileTransferRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileTransferRes &a, FileTransferRes &b);

typedef struct _BatteryStatus__isset {
  _BatteryStatus__isset() : accu_id(false), voltage_cell_1(false), voltage_cell_2(false), voltage_cell_3(false), voltage_cell_4(false), voltage_cell_5(false), voltage_cell_6(false), current_battery(false), battery_remaining(false) {}
  bool accu_id;
  bool voltage_cell_1;
  bool voltage_cell_2;
  bool voltage_cell_3;
  bool voltage_cell_4;
  bool voltage_cell_5;
  bool voltage_cell_6;
  bool current_battery;
  bool battery_remaining;
} _BatteryStatus__isset;

class BatteryStatus {
 public:

  static const char* ascii_fingerprint; // = "9B102BE97B8697BBFB8F545593B49836";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x10,0x2B,0xE9,0x7B,0x86,0x97,0xBB,0xFB,0x8F,0x54,0x55,0x93,0xB4,0x98,0x36};

  BatteryStatus() : accu_id(0), voltage_cell_1(0), voltage_cell_2(0), voltage_cell_3(0), voltage_cell_4(0), voltage_cell_5(0), voltage_cell_6(0), current_battery(0), battery_remaining(0) {
  }

  virtual ~BatteryStatus() throw() {}

  int8_t accu_id;
  int16_t voltage_cell_1;
  int16_t voltage_cell_2;
  int16_t voltage_cell_3;
  int16_t voltage_cell_4;
  int16_t voltage_cell_5;
  int16_t voltage_cell_6;
  int16_t current_battery;
  int8_t battery_remaining;

  _BatteryStatus__isset __isset;

  void __set_accu_id(const int8_t val) {
    accu_id = val;
  }

  void __set_voltage_cell_1(const int16_t val) {
    voltage_cell_1 = val;
  }

  void __set_voltage_cell_2(const int16_t val) {
    voltage_cell_2 = val;
  }

  void __set_voltage_cell_3(const int16_t val) {
    voltage_cell_3 = val;
  }

  void __set_voltage_cell_4(const int16_t val) {
    voltage_cell_4 = val;
  }

  void __set_voltage_cell_5(const int16_t val) {
    voltage_cell_5 = val;
  }

  void __set_voltage_cell_6(const int16_t val) {
    voltage_cell_6 = val;
  }

  void __set_current_battery(const int16_t val) {
    current_battery = val;
  }

  void __set_battery_remaining(const int8_t val) {
    battery_remaining = val;
  }

  bool operator == (const BatteryStatus & rhs) const
  {
    if (!(accu_id == rhs.accu_id))
      return false;
    if (!(voltage_cell_1 == rhs.voltage_cell_1))
      return false;
    if (!(voltage_cell_2 == rhs.voltage_cell_2))
      return false;
    if (!(voltage_cell_3 == rhs.voltage_cell_3))
      return false;
    if (!(voltage_cell_4 == rhs.voltage_cell_4))
      return false;
    if (!(voltage_cell_5 == rhs.voltage_cell_5))
      return false;
    if (!(voltage_cell_6 == rhs.voltage_cell_6))
      return false;
    if (!(current_battery == rhs.current_battery))
      return false;
    if (!(battery_remaining == rhs.battery_remaining))
      return false;
    return true;
  }
  bool operator != (const BatteryStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatteryStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BatteryStatus &a, BatteryStatus &b);

typedef struct _Setpoint8dof__isset {
  _Setpoint8dof__isset() : target_system(false), val1(false), val2(false), val3(false), val4(false), val5(false), val6(false), val7(false), val8(false) {}
  bool target_system;
  bool val1;
  bool val2;
  bool val3;
  bool val4;
  bool val5;
  bool val6;
  bool val7;
  bool val8;
} _Setpoint8dof__isset;

class Setpoint8dof {
 public:

  static const char* ascii_fingerprint; // = "FCE03E723E278A0326670327766854BB";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0xE0,0x3E,0x72,0x3E,0x27,0x8A,0x03,0x26,0x67,0x03,0x27,0x76,0x68,0x54,0xBB};

  Setpoint8dof() : target_system(0), val1(0), val2(0), val3(0), val4(0), val5(0), val6(0), val7(0), val8(0) {
  }

  virtual ~Setpoint8dof() throw() {}

  int8_t target_system;
  double val1;
  double val2;
  double val3;
  double val4;
  double val5;
  double val6;
  double val7;
  double val8;

  _Setpoint8dof__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_val1(const double val) {
    val1 = val;
  }

  void __set_val2(const double val) {
    val2 = val;
  }

  void __set_val3(const double val) {
    val3 = val;
  }

  void __set_val4(const double val) {
    val4 = val;
  }

  void __set_val5(const double val) {
    val5 = val;
  }

  void __set_val6(const double val) {
    val6 = val;
  }

  void __set_val7(const double val) {
    val7 = val;
  }

  void __set_val8(const double val) {
    val8 = val;
  }

  bool operator == (const Setpoint8dof & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(val1 == rhs.val1))
      return false;
    if (!(val2 == rhs.val2))
      return false;
    if (!(val3 == rhs.val3))
      return false;
    if (!(val4 == rhs.val4))
      return false;
    if (!(val5 == rhs.val5))
      return false;
    if (!(val6 == rhs.val6))
      return false;
    if (!(val7 == rhs.val7))
      return false;
    if (!(val8 == rhs.val8))
      return false;
    return true;
  }
  bool operator != (const Setpoint8dof &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Setpoint8dof & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Setpoint8dof &a, Setpoint8dof &b);

typedef struct _Setpoint6dof__isset {
  _Setpoint6dof__isset() : target_system(false), trans_x(false), trans_y(false), trans_z(false), rot_x(false), rot_y(false), rot_z(false) {}
  bool target_system;
  bool trans_x;
  bool trans_y;
  bool trans_z;
  bool rot_x;
  bool rot_y;
  bool rot_z;
} _Setpoint6dof__isset;

class Setpoint6dof {
 public:

  static const char* ascii_fingerprint; // = "BA7B956FBEA27492A64DE2BB21B3B98A";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x7B,0x95,0x6F,0xBE,0xA2,0x74,0x92,0xA6,0x4D,0xE2,0xBB,0x21,0xB3,0xB9,0x8A};

  Setpoint6dof() : target_system(0), trans_x(0), trans_y(0), trans_z(0), rot_x(0), rot_y(0), rot_z(0) {
  }

  virtual ~Setpoint6dof() throw() {}

  int8_t target_system;
  double trans_x;
  double trans_y;
  double trans_z;
  double rot_x;
  double rot_y;
  double rot_z;

  _Setpoint6dof__isset __isset;

  void __set_target_system(const int8_t val) {
    target_system = val;
  }

  void __set_trans_x(const double val) {
    trans_x = val;
  }

  void __set_trans_y(const double val) {
    trans_y = val;
  }

  void __set_trans_z(const double val) {
    trans_z = val;
  }

  void __set_rot_x(const double val) {
    rot_x = val;
  }

  void __set_rot_y(const double val) {
    rot_y = val;
  }

  void __set_rot_z(const double val) {
    rot_z = val;
  }

  bool operator == (const Setpoint6dof & rhs) const
  {
    if (!(target_system == rhs.target_system))
      return false;
    if (!(trans_x == rhs.trans_x))
      return false;
    if (!(trans_y == rhs.trans_y))
      return false;
    if (!(trans_z == rhs.trans_z))
      return false;
    if (!(rot_x == rhs.rot_x))
      return false;
    if (!(rot_y == rhs.rot_y))
      return false;
    if (!(rot_z == rhs.rot_z))
      return false;
    return true;
  }
  bool operator != (const Setpoint6dof &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Setpoint6dof & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Setpoint6dof &a, Setpoint6dof &b);

typedef struct _MemoryVect__isset {
  _MemoryVect__isset() : address(false), ver(false), memory_vect_type(false), value(false) {}
  bool address;
  bool ver;
  bool memory_vect_type;
  bool value;
} _MemoryVect__isset;

class MemoryVect {
 public:

  static const char* ascii_fingerprint; // = "AE3301A5C869546BB16905483C90D848";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x33,0x01,0xA5,0xC8,0x69,0x54,0x6B,0xB1,0x69,0x05,0x48,0x3C,0x90,0xD8,0x48};

  MemoryVect() : address(0), ver(0), memory_vect_type(0) {
  }

  virtual ~MemoryVect() throw() {}

  int16_t address;
  int8_t ver;
  int8_t memory_vect_type;
  std::vector<int8_t>  value;

  _MemoryVect__isset __isset;

  void __set_address(const int16_t val) {
    address = val;
  }

  void __set_ver(const int8_t val) {
    ver = val;
  }

  void __set_memory_vect_type(const int8_t val) {
    memory_vect_type = val;
  }

  void __set_value(const std::vector<int8_t> & val) {
    value = val;
  }

  bool operator == (const MemoryVect & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(ver == rhs.ver))
      return false;
    if (!(memory_vect_type == rhs.memory_vect_type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MemoryVect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MemoryVect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MemoryVect &a, MemoryVect &b);

typedef struct _DebugVect__isset {
  _DebugVect__isset() : name(false), time_usec(false), x(false), y(false), z(false) {}
  bool name;
  bool time_usec;
  bool x;
  bool y;
  bool z;
} _DebugVect__isset;

class DebugVect {
 public:

  static const char* ascii_fingerprint; // = "4DD2782FD63B07D8E4023A808605C19C";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xD2,0x78,0x2F,0xD6,0x3B,0x07,0xD8,0xE4,0x02,0x3A,0x80,0x86,0x05,0xC1,0x9C};

  DebugVect() : time_usec(0), x(0), y(0), z(0) {
  }

  virtual ~DebugVect() throw() {}

  std::vector<int8_t>  name;
  int64_t time_usec;
  double x;
  double y;
  double z;

  _DebugVect__isset __isset;

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  void __set_time_usec(const int64_t val) {
    time_usec = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  bool operator == (const DebugVect & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(time_usec == rhs.time_usec))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const DebugVect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DebugVect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DebugVect &a, DebugVect &b);

typedef struct _NamedValueFloat__isset {
  _NamedValueFloat__isset() : time_boot_ms(false), name(false), value(false) {}
  bool time_boot_ms;
  bool name;
  bool value;
} _NamedValueFloat__isset;

class NamedValueFloat {
 public:

  static const char* ascii_fingerprint; // = "D6FBE570AD2F8D817CA223A8EEFC368B";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFB,0xE5,0x70,0xAD,0x2F,0x8D,0x81,0x7C,0xA2,0x23,0xA8,0xEE,0xFC,0x36,0x8B};

  NamedValueFloat() : time_boot_ms(0), value(0) {
  }

  virtual ~NamedValueFloat() throw() {}

  int32_t time_boot_ms;
  std::vector<int8_t>  name;
  double value;

  _NamedValueFloat__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const NamedValueFloat & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const NamedValueFloat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamedValueFloat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NamedValueFloat &a, NamedValueFloat &b);

typedef struct _NamedValueInt__isset {
  _NamedValueInt__isset() : time_boot_ms(false), name(false), value(false) {}
  bool time_boot_ms;
  bool name;
  bool value;
} _NamedValueInt__isset;

class NamedValueInt {
 public:

  static const char* ascii_fingerprint; // = "47F99142CD9D4B7B7FA9A7A119D699E2";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xF9,0x91,0x42,0xCD,0x9D,0x4B,0x7B,0x7F,0xA9,0xA7,0xA1,0x19,0xD6,0x99,0xE2};

  NamedValueInt() : time_boot_ms(0), value(0) {
  }

  virtual ~NamedValueInt() throw() {}

  int32_t time_boot_ms;
  std::vector<int8_t>  name;
  int32_t value;

  _NamedValueInt__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_name(const std::vector<int8_t> & val) {
    name = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const NamedValueInt & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const NamedValueInt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamedValueInt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NamedValueInt &a, NamedValueInt &b);

typedef struct _Statustext__isset {
  _Statustext__isset() : severity(false), text(false) {}
  bool severity;
  bool text;
} _Statustext__isset;

class Statustext {
 public:

  static const char* ascii_fingerprint; // = "E9315D11ED9B3ADE4F14971EFD87F639";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x31,0x5D,0x11,0xED,0x9B,0x3A,0xDE,0x4F,0x14,0x97,0x1E,0xFD,0x87,0xF6,0x39};

  Statustext() : severity(0) {
  }

  virtual ~Statustext() throw() {}

  int8_t severity;
  std::vector<int8_t>  text;

  _Statustext__isset __isset;

  void __set_severity(const int8_t val) {
    severity = val;
  }

  void __set_text(const std::vector<int8_t> & val) {
    text = val;
  }

  bool operator == (const Statustext & rhs) const
  {
    if (!(severity == rhs.severity))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const Statustext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Statustext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Statustext &a, Statustext &b);

typedef struct _Debug__isset {
  _Debug__isset() : time_boot_ms(false), ind(false), value(false) {}
  bool time_boot_ms;
  bool ind;
  bool value;
} _Debug__isset;

class Debug {
 public:

  static const char* ascii_fingerprint; // = "968A23453A7428AD56957ED8500D496E";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x8A,0x23,0x45,0x3A,0x74,0x28,0xAD,0x56,0x95,0x7E,0xD8,0x50,0x0D,0x49,0x6E};

  Debug() : time_boot_ms(0), ind(0), value(0) {
  }

  virtual ~Debug() throw() {}

  int32_t time_boot_ms;
  int8_t ind;
  double value;

  _Debug__isset __isset;

  void __set_time_boot_ms(const int32_t val) {
    time_boot_ms = val;
  }

  void __set_ind(const int8_t val) {
    ind = val;
  }

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const Debug & rhs) const
  {
    if (!(time_boot_ms == rhs.time_boot_ms))
      return false;
    if (!(ind == rhs.ind))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Debug &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Debug & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Debug &a, Debug &b);

typedef struct _InvalidMavlinkMessage__isset {
  _InvalidMavlinkMessage__isset() : error(false) {}
  bool error;
} _InvalidMavlinkMessage__isset;

class InvalidMavlinkMessage : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  InvalidMavlinkMessage() : error() {
  }

  virtual ~InvalidMavlinkMessage() throw() {}

  std::string error;

  _InvalidMavlinkMessage__isset __isset;

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const InvalidMavlinkMessage & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const InvalidMavlinkMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidMavlinkMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InvalidMavlinkMessage &a, InvalidMavlinkMessage &b);

}} // namespace

#endif
