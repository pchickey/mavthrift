/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CommonMessageFetch_H
#define CommonMessageFetch_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace mavlink { namespace thrift {

class CommonMessageFetchIf {
 public:
  virtual ~CommonMessageFetchIf() {}
  virtual void availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return) = 0;
  virtual void fetchHeartbeat(std::vector<Heartbeat> & _return) = 0;
  virtual void fetchSysStatus(std::vector<SysStatus> & _return) = 0;
  virtual void fetchSystemTime(std::vector<SystemTime> & _return) = 0;
  virtual void fetchPing(std::vector<Ping> & _return) = 0;
  virtual void fetchChangeOperatorControl(std::vector<ChangeOperatorControl> & _return) = 0;
  virtual void fetchChangeOperatorControlAck(std::vector<ChangeOperatorControlAck> & _return) = 0;
  virtual void fetchAuthKey(std::vector<AuthKey> & _return) = 0;
  virtual void fetchSetMode(std::vector<SetMode> & _return) = 0;
  virtual void fetchParamRequestRead(std::vector<ParamRequestRead> & _return) = 0;
  virtual void fetchParamRequestList(std::vector<ParamRequestList> & _return) = 0;
  virtual void fetchParamValue(std::vector<ParamValue> & _return) = 0;
  virtual void fetchParamSet(std::vector<ParamSet> & _return) = 0;
  virtual void fetchGpsRawInt(std::vector<GpsRawInt> & _return) = 0;
  virtual void fetchGpsStatus(std::vector<GpsStatus> & _return) = 0;
  virtual void fetchScaledImu(std::vector<ScaledImu> & _return) = 0;
  virtual void fetchRawImu(std::vector<RawImu> & _return) = 0;
  virtual void fetchRawPressure(std::vector<RawPressure> & _return) = 0;
  virtual void fetchScaledPressure(std::vector<ScaledPressure> & _return) = 0;
  virtual void fetchAttitude(std::vector<Attitude> & _return) = 0;
  virtual void fetchAttitudeQuaternion(std::vector<AttitudeQuaternion> & _return) = 0;
  virtual void fetchLocalPositionNed(std::vector<LocalPositionNed> & _return) = 0;
  virtual void fetchGlobalPositionInt(std::vector<GlobalPositionInt> & _return) = 0;
  virtual void fetchRcChannelsScaled(std::vector<RcChannelsScaled> & _return) = 0;
  virtual void fetchRcChannelsRaw(std::vector<RcChannelsRaw> & _return) = 0;
  virtual void fetchServoOutputRaw(std::vector<ServoOutputRaw> & _return) = 0;
  virtual void fetchMissionRequestPartialList(std::vector<MissionRequestPartialList> & _return) = 0;
  virtual void fetchMissionWritePartialList(std::vector<MissionWritePartialList> & _return) = 0;
  virtual void fetchMissionItem(std::vector<MissionItem> & _return) = 0;
  virtual void fetchMissionRequest(std::vector<MissionRequest> & _return) = 0;
  virtual void fetchMissionSetCurrent(std::vector<MissionSetCurrent> & _return) = 0;
  virtual void fetchMissionCurrent(std::vector<MissionCurrent> & _return) = 0;
  virtual void fetchMissionRequestList(std::vector<MissionRequestList> & _return) = 0;
  virtual void fetchMissionCount(std::vector<MissionCount> & _return) = 0;
  virtual void fetchMissionClearAll(std::vector<MissionClearAll> & _return) = 0;
  virtual void fetchMissionItemReached(std::vector<MissionItemReached> & _return) = 0;
  virtual void fetchMissionAck(std::vector<MissionAck> & _return) = 0;
  virtual void fetchSetGpsGlobalOrigin(std::vector<SetGpsGlobalOrigin> & _return) = 0;
  virtual void fetchGpsGlobalOrigin(std::vector<GpsGlobalOrigin> & _return) = 0;
  virtual void fetchSetLocalPositionSetpoint(std::vector<SetLocalPositionSetpoint> & _return) = 0;
  virtual void fetchLocalPositionSetpoint(std::vector<LocalPositionSetpoint> & _return) = 0;
  virtual void fetchGlobalPositionSetpointInt(std::vector<GlobalPositionSetpointInt> & _return) = 0;
  virtual void fetchSetGlobalPositionSetpointInt(std::vector<SetGlobalPositionSetpointInt> & _return) = 0;
  virtual void fetchSafetySetAllowedArea(std::vector<SafetySetAllowedArea> & _return) = 0;
  virtual void fetchSafetyAllowedArea(std::vector<SafetyAllowedArea> & _return) = 0;
  virtual void fetchSetRollPitchYawThrust(std::vector<SetRollPitchYawThrust> & _return) = 0;
  virtual void fetchSetRollPitchYawSpeedThrust(std::vector<SetRollPitchYawSpeedThrust> & _return) = 0;
  virtual void fetchRollPitchYawThrustSetpoint(std::vector<RollPitchYawThrustSetpoint> & _return) = 0;
  virtual void fetchRollPitchYawSpeedThrustSetpoint(std::vector<RollPitchYawSpeedThrustSetpoint> & _return) = 0;
  virtual void fetchSetQuadMotorsSetpoint(std::vector<SetQuadMotorsSetpoint> & _return) = 0;
  virtual void fetchSetQuadSwarmRollPitchYawThrust(std::vector<SetQuadSwarmRollPitchYawThrust> & _return) = 0;
  virtual void fetchNavControllerOutput(std::vector<NavControllerOutput> & _return) = 0;
  virtual void fetchSetQuadSwarmLedRollPitchYawThrust(std::vector<SetQuadSwarmLedRollPitchYawThrust> & _return) = 0;
  virtual void fetchStateCorrection(std::vector<StateCorrection> & _return) = 0;
  virtual void fetchRequestDataStream(std::vector<RequestDataStream> & _return) = 0;
  virtual void fetchDataStream(std::vector<DataStream> & _return) = 0;
  virtual void fetchManualControl(std::vector<ManualControl> & _return) = 0;
  virtual void fetchRcChannelsOverride(std::vector<RcChannelsOverride> & _return) = 0;
  virtual void fetchVfrHud(std::vector<VfrHud> & _return) = 0;
  virtual void fetchCommandLong(std::vector<CommandLong> & _return) = 0;
  virtual void fetchCommandAck(std::vector<CommandAck> & _return) = 0;
  virtual void fetchRollPitchYawRatesThrustSetpoint(std::vector<RollPitchYawRatesThrustSetpoint> & _return) = 0;
  virtual void fetchManualSetpoint(std::vector<ManualSetpoint> & _return) = 0;
  virtual void fetchLocalPositionNedSystemGlobalOffset(std::vector<LocalPositionNedSystemGlobalOffset> & _return) = 0;
  virtual void fetchHilState(std::vector<HilState> & _return) = 0;
  virtual void fetchHilControls(std::vector<HilControls> & _return) = 0;
  virtual void fetchHilRcInputsRaw(std::vector<HilRcInputsRaw> & _return) = 0;
  virtual void fetchOpticalFlow(std::vector<OpticalFlow> & _return) = 0;
  virtual void fetchGlobalVisionPositionEstimate(std::vector<GlobalVisionPositionEstimate> & _return) = 0;
  virtual void fetchVisionPositionEstimate(std::vector<VisionPositionEstimate> & _return) = 0;
  virtual void fetchVisionSpeedEstimate(std::vector<VisionSpeedEstimate> & _return) = 0;
  virtual void fetchViconPositionEstimate(std::vector<ViconPositionEstimate> & _return) = 0;
  virtual void fetchHighresImu(std::vector<HighresImu> & _return) = 0;
  virtual void fetchOmnidirectionalFlow(std::vector<OmnidirectionalFlow> & _return) = 0;
  virtual void fetchFileTransferStart(std::vector<FileTransferStart> & _return) = 0;
  virtual void fetchFileTransferDirList(std::vector<FileTransferDirList> & _return) = 0;
  virtual void fetchFileTransferRes(std::vector<FileTransferRes> & _return) = 0;
  virtual void fetchBatteryStatus(std::vector<BatteryStatus> & _return) = 0;
  virtual void fetchSetpoint8dof(std::vector<Setpoint8dof> & _return) = 0;
  virtual void fetchSetpoint6dof(std::vector<Setpoint6dof> & _return) = 0;
  virtual void fetchMemoryVect(std::vector<MemoryVect> & _return) = 0;
  virtual void fetchDebugVect(std::vector<DebugVect> & _return) = 0;
  virtual void fetchNamedValueFloat(std::vector<NamedValueFloat> & _return) = 0;
  virtual void fetchNamedValueInt(std::vector<NamedValueInt> & _return) = 0;
  virtual void fetchStatustext(std::vector<Statustext> & _return) = 0;
  virtual void fetchDebug(std::vector<Debug> & _return) = 0;
};

class CommonMessageFetchIfFactory {
 public:
  typedef CommonMessageFetchIf Handler;

  virtual ~CommonMessageFetchIfFactory() {}

  virtual CommonMessageFetchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CommonMessageFetchIf* /* handler */) = 0;
};

class CommonMessageFetchIfSingletonFactory : virtual public CommonMessageFetchIfFactory {
 public:
  CommonMessageFetchIfSingletonFactory(const boost::shared_ptr<CommonMessageFetchIf>& iface) : iface_(iface) {}
  virtual ~CommonMessageFetchIfSingletonFactory() {}

  virtual CommonMessageFetchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CommonMessageFetchIf* /* handler */) {}

 protected:
  boost::shared_ptr<CommonMessageFetchIf> iface_;
};

class CommonMessageFetchNull : virtual public CommonMessageFetchIf {
 public:
  virtual ~CommonMessageFetchNull() {}
  void availableMessages(std::map<CommonMessageTypes::type, int32_t> & /* _return */) {
    return;
  }
  void fetchHeartbeat(std::vector<Heartbeat> & /* _return */) {
    return;
  }
  void fetchSysStatus(std::vector<SysStatus> & /* _return */) {
    return;
  }
  void fetchSystemTime(std::vector<SystemTime> & /* _return */) {
    return;
  }
  void fetchPing(std::vector<Ping> & /* _return */) {
    return;
  }
  void fetchChangeOperatorControl(std::vector<ChangeOperatorControl> & /* _return */) {
    return;
  }
  void fetchChangeOperatorControlAck(std::vector<ChangeOperatorControlAck> & /* _return */) {
    return;
  }
  void fetchAuthKey(std::vector<AuthKey> & /* _return */) {
    return;
  }
  void fetchSetMode(std::vector<SetMode> & /* _return */) {
    return;
  }
  void fetchParamRequestRead(std::vector<ParamRequestRead> & /* _return */) {
    return;
  }
  void fetchParamRequestList(std::vector<ParamRequestList> & /* _return */) {
    return;
  }
  void fetchParamValue(std::vector<ParamValue> & /* _return */) {
    return;
  }
  void fetchParamSet(std::vector<ParamSet> & /* _return */) {
    return;
  }
  void fetchGpsRawInt(std::vector<GpsRawInt> & /* _return */) {
    return;
  }
  void fetchGpsStatus(std::vector<GpsStatus> & /* _return */) {
    return;
  }
  void fetchScaledImu(std::vector<ScaledImu> & /* _return */) {
    return;
  }
  void fetchRawImu(std::vector<RawImu> & /* _return */) {
    return;
  }
  void fetchRawPressure(std::vector<RawPressure> & /* _return */) {
    return;
  }
  void fetchScaledPressure(std::vector<ScaledPressure> & /* _return */) {
    return;
  }
  void fetchAttitude(std::vector<Attitude> & /* _return */) {
    return;
  }
  void fetchAttitudeQuaternion(std::vector<AttitudeQuaternion> & /* _return */) {
    return;
  }
  void fetchLocalPositionNed(std::vector<LocalPositionNed> & /* _return */) {
    return;
  }
  void fetchGlobalPositionInt(std::vector<GlobalPositionInt> & /* _return */) {
    return;
  }
  void fetchRcChannelsScaled(std::vector<RcChannelsScaled> & /* _return */) {
    return;
  }
  void fetchRcChannelsRaw(std::vector<RcChannelsRaw> & /* _return */) {
    return;
  }
  void fetchServoOutputRaw(std::vector<ServoOutputRaw> & /* _return */) {
    return;
  }
  void fetchMissionRequestPartialList(std::vector<MissionRequestPartialList> & /* _return */) {
    return;
  }
  void fetchMissionWritePartialList(std::vector<MissionWritePartialList> & /* _return */) {
    return;
  }
  void fetchMissionItem(std::vector<MissionItem> & /* _return */) {
    return;
  }
  void fetchMissionRequest(std::vector<MissionRequest> & /* _return */) {
    return;
  }
  void fetchMissionSetCurrent(std::vector<MissionSetCurrent> & /* _return */) {
    return;
  }
  void fetchMissionCurrent(std::vector<MissionCurrent> & /* _return */) {
    return;
  }
  void fetchMissionRequestList(std::vector<MissionRequestList> & /* _return */) {
    return;
  }
  void fetchMissionCount(std::vector<MissionCount> & /* _return */) {
    return;
  }
  void fetchMissionClearAll(std::vector<MissionClearAll> & /* _return */) {
    return;
  }
  void fetchMissionItemReached(std::vector<MissionItemReached> & /* _return */) {
    return;
  }
  void fetchMissionAck(std::vector<MissionAck> & /* _return */) {
    return;
  }
  void fetchSetGpsGlobalOrigin(std::vector<SetGpsGlobalOrigin> & /* _return */) {
    return;
  }
  void fetchGpsGlobalOrigin(std::vector<GpsGlobalOrigin> & /* _return */) {
    return;
  }
  void fetchSetLocalPositionSetpoint(std::vector<SetLocalPositionSetpoint> & /* _return */) {
    return;
  }
  void fetchLocalPositionSetpoint(std::vector<LocalPositionSetpoint> & /* _return */) {
    return;
  }
  void fetchGlobalPositionSetpointInt(std::vector<GlobalPositionSetpointInt> & /* _return */) {
    return;
  }
  void fetchSetGlobalPositionSetpointInt(std::vector<SetGlobalPositionSetpointInt> & /* _return */) {
    return;
  }
  void fetchSafetySetAllowedArea(std::vector<SafetySetAllowedArea> & /* _return */) {
    return;
  }
  void fetchSafetyAllowedArea(std::vector<SafetyAllowedArea> & /* _return */) {
    return;
  }
  void fetchSetRollPitchYawThrust(std::vector<SetRollPitchYawThrust> & /* _return */) {
    return;
  }
  void fetchSetRollPitchYawSpeedThrust(std::vector<SetRollPitchYawSpeedThrust> & /* _return */) {
    return;
  }
  void fetchRollPitchYawThrustSetpoint(std::vector<RollPitchYawThrustSetpoint> & /* _return */) {
    return;
  }
  void fetchRollPitchYawSpeedThrustSetpoint(std::vector<RollPitchYawSpeedThrustSetpoint> & /* _return */) {
    return;
  }
  void fetchSetQuadMotorsSetpoint(std::vector<SetQuadMotorsSetpoint> & /* _return */) {
    return;
  }
  void fetchSetQuadSwarmRollPitchYawThrust(std::vector<SetQuadSwarmRollPitchYawThrust> & /* _return */) {
    return;
  }
  void fetchNavControllerOutput(std::vector<NavControllerOutput> & /* _return */) {
    return;
  }
  void fetchSetQuadSwarmLedRollPitchYawThrust(std::vector<SetQuadSwarmLedRollPitchYawThrust> & /* _return */) {
    return;
  }
  void fetchStateCorrection(std::vector<StateCorrection> & /* _return */) {
    return;
  }
  void fetchRequestDataStream(std::vector<RequestDataStream> & /* _return */) {
    return;
  }
  void fetchDataStream(std::vector<DataStream> & /* _return */) {
    return;
  }
  void fetchManualControl(std::vector<ManualControl> & /* _return */) {
    return;
  }
  void fetchRcChannelsOverride(std::vector<RcChannelsOverride> & /* _return */) {
    return;
  }
  void fetchVfrHud(std::vector<VfrHud> & /* _return */) {
    return;
  }
  void fetchCommandLong(std::vector<CommandLong> & /* _return */) {
    return;
  }
  void fetchCommandAck(std::vector<CommandAck> & /* _return */) {
    return;
  }
  void fetchRollPitchYawRatesThrustSetpoint(std::vector<RollPitchYawRatesThrustSetpoint> & /* _return */) {
    return;
  }
  void fetchManualSetpoint(std::vector<ManualSetpoint> & /* _return */) {
    return;
  }
  void fetchLocalPositionNedSystemGlobalOffset(std::vector<LocalPositionNedSystemGlobalOffset> & /* _return */) {
    return;
  }
  void fetchHilState(std::vector<HilState> & /* _return */) {
    return;
  }
  void fetchHilControls(std::vector<HilControls> & /* _return */) {
    return;
  }
  void fetchHilRcInputsRaw(std::vector<HilRcInputsRaw> & /* _return */) {
    return;
  }
  void fetchOpticalFlow(std::vector<OpticalFlow> & /* _return */) {
    return;
  }
  void fetchGlobalVisionPositionEstimate(std::vector<GlobalVisionPositionEstimate> & /* _return */) {
    return;
  }
  void fetchVisionPositionEstimate(std::vector<VisionPositionEstimate> & /* _return */) {
    return;
  }
  void fetchVisionSpeedEstimate(std::vector<VisionSpeedEstimate> & /* _return */) {
    return;
  }
  void fetchViconPositionEstimate(std::vector<ViconPositionEstimate> & /* _return */) {
    return;
  }
  void fetchHighresImu(std::vector<HighresImu> & /* _return */) {
    return;
  }
  void fetchOmnidirectionalFlow(std::vector<OmnidirectionalFlow> & /* _return */) {
    return;
  }
  void fetchFileTransferStart(std::vector<FileTransferStart> & /* _return */) {
    return;
  }
  void fetchFileTransferDirList(std::vector<FileTransferDirList> & /* _return */) {
    return;
  }
  void fetchFileTransferRes(std::vector<FileTransferRes> & /* _return */) {
    return;
  }
  void fetchBatteryStatus(std::vector<BatteryStatus> & /* _return */) {
    return;
  }
  void fetchSetpoint8dof(std::vector<Setpoint8dof> & /* _return */) {
    return;
  }
  void fetchSetpoint6dof(std::vector<Setpoint6dof> & /* _return */) {
    return;
  }
  void fetchMemoryVect(std::vector<MemoryVect> & /* _return */) {
    return;
  }
  void fetchDebugVect(std::vector<DebugVect> & /* _return */) {
    return;
  }
  void fetchNamedValueFloat(std::vector<NamedValueFloat> & /* _return */) {
    return;
  }
  void fetchNamedValueInt(std::vector<NamedValueInt> & /* _return */) {
    return;
  }
  void fetchStatustext(std::vector<Statustext> & /* _return */) {
    return;
  }
  void fetchDebug(std::vector<Debug> & /* _return */) {
    return;
  }
};


class CommonMessageFetch_availableMessages_args {
 public:

  CommonMessageFetch_availableMessages_args() {
  }

  virtual ~CommonMessageFetch_availableMessages_args() throw() {}


  bool operator == (const CommonMessageFetch_availableMessages_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_availableMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_availableMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_availableMessages_pargs {
 public:


  virtual ~CommonMessageFetch_availableMessages_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_availableMessages_result__isset {
  _CommonMessageFetch_availableMessages_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_availableMessages_result__isset;

class CommonMessageFetch_availableMessages_result {
 public:

  CommonMessageFetch_availableMessages_result() {
  }

  virtual ~CommonMessageFetch_availableMessages_result() throw() {}

  std::map<CommonMessageTypes::type, int32_t>  success;

  _CommonMessageFetch_availableMessages_result__isset __isset;

  void __set_success(const std::map<CommonMessageTypes::type, int32_t> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_availableMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_availableMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_availableMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_availableMessages_presult__isset {
  _CommonMessageFetch_availableMessages_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_availableMessages_presult__isset;

class CommonMessageFetch_availableMessages_presult {
 public:


  virtual ~CommonMessageFetch_availableMessages_presult() throw() {}

  std::map<CommonMessageTypes::type, int32_t> * success;

  _CommonMessageFetch_availableMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchHeartbeat_args {
 public:

  CommonMessageFetch_fetchHeartbeat_args() {
  }

  virtual ~CommonMessageFetch_fetchHeartbeat_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchHeartbeat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchHeartbeat_pargs {
 public:


  virtual ~CommonMessageFetch_fetchHeartbeat_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHeartbeat_result__isset {
  _CommonMessageFetch_fetchHeartbeat_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHeartbeat_result__isset;

class CommonMessageFetch_fetchHeartbeat_result {
 public:

  CommonMessageFetch_fetchHeartbeat_result() {
  }

  virtual ~CommonMessageFetch_fetchHeartbeat_result() throw() {}

  std::vector<Heartbeat>  success;

  _CommonMessageFetch_fetchHeartbeat_result__isset __isset;

  void __set_success(const std::vector<Heartbeat> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchHeartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHeartbeat_presult__isset {
  _CommonMessageFetch_fetchHeartbeat_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHeartbeat_presult__isset;

class CommonMessageFetch_fetchHeartbeat_presult {
 public:


  virtual ~CommonMessageFetch_fetchHeartbeat_presult() throw() {}

  std::vector<Heartbeat> * success;

  _CommonMessageFetch_fetchHeartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSysStatus_args {
 public:

  CommonMessageFetch_fetchSysStatus_args() {
  }

  virtual ~CommonMessageFetch_fetchSysStatus_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSysStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSysStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSysStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSysStatus_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSysStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSysStatus_result__isset {
  _CommonMessageFetch_fetchSysStatus_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSysStatus_result__isset;

class CommonMessageFetch_fetchSysStatus_result {
 public:

  CommonMessageFetch_fetchSysStatus_result() {
  }

  virtual ~CommonMessageFetch_fetchSysStatus_result() throw() {}

  std::vector<SysStatus>  success;

  _CommonMessageFetch_fetchSysStatus_result__isset __isset;

  void __set_success(const std::vector<SysStatus> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSysStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSysStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSysStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSysStatus_presult__isset {
  _CommonMessageFetch_fetchSysStatus_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSysStatus_presult__isset;

class CommonMessageFetch_fetchSysStatus_presult {
 public:


  virtual ~CommonMessageFetch_fetchSysStatus_presult() throw() {}

  std::vector<SysStatus> * success;

  _CommonMessageFetch_fetchSysStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSystemTime_args {
 public:

  CommonMessageFetch_fetchSystemTime_args() {
  }

  virtual ~CommonMessageFetch_fetchSystemTime_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSystemTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSystemTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSystemTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSystemTime_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSystemTime_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSystemTime_result__isset {
  _CommonMessageFetch_fetchSystemTime_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSystemTime_result__isset;

class CommonMessageFetch_fetchSystemTime_result {
 public:

  CommonMessageFetch_fetchSystemTime_result() {
  }

  virtual ~CommonMessageFetch_fetchSystemTime_result() throw() {}

  std::vector<SystemTime>  success;

  _CommonMessageFetch_fetchSystemTime_result__isset __isset;

  void __set_success(const std::vector<SystemTime> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSystemTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSystemTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSystemTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSystemTime_presult__isset {
  _CommonMessageFetch_fetchSystemTime_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSystemTime_presult__isset;

class CommonMessageFetch_fetchSystemTime_presult {
 public:


  virtual ~CommonMessageFetch_fetchSystemTime_presult() throw() {}

  std::vector<SystemTime> * success;

  _CommonMessageFetch_fetchSystemTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchPing_args {
 public:

  CommonMessageFetch_fetchPing_args() {
  }

  virtual ~CommonMessageFetch_fetchPing_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchPing_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchPing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchPing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchPing_pargs {
 public:


  virtual ~CommonMessageFetch_fetchPing_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchPing_result__isset {
  _CommonMessageFetch_fetchPing_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchPing_result__isset;

class CommonMessageFetch_fetchPing_result {
 public:

  CommonMessageFetch_fetchPing_result() {
  }

  virtual ~CommonMessageFetch_fetchPing_result() throw() {}

  std::vector<Ping>  success;

  _CommonMessageFetch_fetchPing_result__isset __isset;

  void __set_success(const std::vector<Ping> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchPing_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchPing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchPing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchPing_presult__isset {
  _CommonMessageFetch_fetchPing_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchPing_presult__isset;

class CommonMessageFetch_fetchPing_presult {
 public:


  virtual ~CommonMessageFetch_fetchPing_presult() throw() {}

  std::vector<Ping> * success;

  _CommonMessageFetch_fetchPing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchChangeOperatorControl_args {
 public:

  CommonMessageFetch_fetchChangeOperatorControl_args() {
  }

  virtual ~CommonMessageFetch_fetchChangeOperatorControl_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchChangeOperatorControl_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchChangeOperatorControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchChangeOperatorControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchChangeOperatorControl_pargs {
 public:


  virtual ~CommonMessageFetch_fetchChangeOperatorControl_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchChangeOperatorControl_result__isset {
  _CommonMessageFetch_fetchChangeOperatorControl_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchChangeOperatorControl_result__isset;

class CommonMessageFetch_fetchChangeOperatorControl_result {
 public:

  CommonMessageFetch_fetchChangeOperatorControl_result() {
  }

  virtual ~CommonMessageFetch_fetchChangeOperatorControl_result() throw() {}

  std::vector<ChangeOperatorControl>  success;

  _CommonMessageFetch_fetchChangeOperatorControl_result__isset __isset;

  void __set_success(const std::vector<ChangeOperatorControl> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchChangeOperatorControl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchChangeOperatorControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchChangeOperatorControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchChangeOperatorControl_presult__isset {
  _CommonMessageFetch_fetchChangeOperatorControl_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchChangeOperatorControl_presult__isset;

class CommonMessageFetch_fetchChangeOperatorControl_presult {
 public:


  virtual ~CommonMessageFetch_fetchChangeOperatorControl_presult() throw() {}

  std::vector<ChangeOperatorControl> * success;

  _CommonMessageFetch_fetchChangeOperatorControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchChangeOperatorControlAck_args {
 public:

  CommonMessageFetch_fetchChangeOperatorControlAck_args() {
  }

  virtual ~CommonMessageFetch_fetchChangeOperatorControlAck_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchChangeOperatorControlAck_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchChangeOperatorControlAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchChangeOperatorControlAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchChangeOperatorControlAck_pargs {
 public:


  virtual ~CommonMessageFetch_fetchChangeOperatorControlAck_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchChangeOperatorControlAck_result__isset {
  _CommonMessageFetch_fetchChangeOperatorControlAck_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchChangeOperatorControlAck_result__isset;

class CommonMessageFetch_fetchChangeOperatorControlAck_result {
 public:

  CommonMessageFetch_fetchChangeOperatorControlAck_result() {
  }

  virtual ~CommonMessageFetch_fetchChangeOperatorControlAck_result() throw() {}

  std::vector<ChangeOperatorControlAck>  success;

  _CommonMessageFetch_fetchChangeOperatorControlAck_result__isset __isset;

  void __set_success(const std::vector<ChangeOperatorControlAck> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchChangeOperatorControlAck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchChangeOperatorControlAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchChangeOperatorControlAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchChangeOperatorControlAck_presult__isset {
  _CommonMessageFetch_fetchChangeOperatorControlAck_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchChangeOperatorControlAck_presult__isset;

class CommonMessageFetch_fetchChangeOperatorControlAck_presult {
 public:


  virtual ~CommonMessageFetch_fetchChangeOperatorControlAck_presult() throw() {}

  std::vector<ChangeOperatorControlAck> * success;

  _CommonMessageFetch_fetchChangeOperatorControlAck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchAuthKey_args {
 public:

  CommonMessageFetch_fetchAuthKey_args() {
  }

  virtual ~CommonMessageFetch_fetchAuthKey_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchAuthKey_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchAuthKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchAuthKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchAuthKey_pargs {
 public:


  virtual ~CommonMessageFetch_fetchAuthKey_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchAuthKey_result__isset {
  _CommonMessageFetch_fetchAuthKey_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchAuthKey_result__isset;

class CommonMessageFetch_fetchAuthKey_result {
 public:

  CommonMessageFetch_fetchAuthKey_result() {
  }

  virtual ~CommonMessageFetch_fetchAuthKey_result() throw() {}

  std::vector<AuthKey>  success;

  _CommonMessageFetch_fetchAuthKey_result__isset __isset;

  void __set_success(const std::vector<AuthKey> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchAuthKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchAuthKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchAuthKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchAuthKey_presult__isset {
  _CommonMessageFetch_fetchAuthKey_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchAuthKey_presult__isset;

class CommonMessageFetch_fetchAuthKey_presult {
 public:


  virtual ~CommonMessageFetch_fetchAuthKey_presult() throw() {}

  std::vector<AuthKey> * success;

  _CommonMessageFetch_fetchAuthKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetMode_args {
 public:

  CommonMessageFetch_fetchSetMode_args() {
  }

  virtual ~CommonMessageFetch_fetchSetMode_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetMode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetMode_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetMode_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetMode_result__isset {
  _CommonMessageFetch_fetchSetMode_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetMode_result__isset;

class CommonMessageFetch_fetchSetMode_result {
 public:

  CommonMessageFetch_fetchSetMode_result() {
  }

  virtual ~CommonMessageFetch_fetchSetMode_result() throw() {}

  std::vector<SetMode>  success;

  _CommonMessageFetch_fetchSetMode_result__isset __isset;

  void __set_success(const std::vector<SetMode> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetMode_presult__isset {
  _CommonMessageFetch_fetchSetMode_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetMode_presult__isset;

class CommonMessageFetch_fetchSetMode_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetMode_presult() throw() {}

  std::vector<SetMode> * success;

  _CommonMessageFetch_fetchSetMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchParamRequestRead_args {
 public:

  CommonMessageFetch_fetchParamRequestRead_args() {
  }

  virtual ~CommonMessageFetch_fetchParamRequestRead_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchParamRequestRead_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamRequestRead_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamRequestRead_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchParamRequestRead_pargs {
 public:


  virtual ~CommonMessageFetch_fetchParamRequestRead_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamRequestRead_result__isset {
  _CommonMessageFetch_fetchParamRequestRead_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamRequestRead_result__isset;

class CommonMessageFetch_fetchParamRequestRead_result {
 public:

  CommonMessageFetch_fetchParamRequestRead_result() {
  }

  virtual ~CommonMessageFetch_fetchParamRequestRead_result() throw() {}

  std::vector<ParamRequestRead>  success;

  _CommonMessageFetch_fetchParamRequestRead_result__isset __isset;

  void __set_success(const std::vector<ParamRequestRead> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchParamRequestRead_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamRequestRead_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamRequestRead_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamRequestRead_presult__isset {
  _CommonMessageFetch_fetchParamRequestRead_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamRequestRead_presult__isset;

class CommonMessageFetch_fetchParamRequestRead_presult {
 public:


  virtual ~CommonMessageFetch_fetchParamRequestRead_presult() throw() {}

  std::vector<ParamRequestRead> * success;

  _CommonMessageFetch_fetchParamRequestRead_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchParamRequestList_args {
 public:

  CommonMessageFetch_fetchParamRequestList_args() {
  }

  virtual ~CommonMessageFetch_fetchParamRequestList_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchParamRequestList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamRequestList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamRequestList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchParamRequestList_pargs {
 public:


  virtual ~CommonMessageFetch_fetchParamRequestList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamRequestList_result__isset {
  _CommonMessageFetch_fetchParamRequestList_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamRequestList_result__isset;

class CommonMessageFetch_fetchParamRequestList_result {
 public:

  CommonMessageFetch_fetchParamRequestList_result() {
  }

  virtual ~CommonMessageFetch_fetchParamRequestList_result() throw() {}

  std::vector<ParamRequestList>  success;

  _CommonMessageFetch_fetchParamRequestList_result__isset __isset;

  void __set_success(const std::vector<ParamRequestList> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchParamRequestList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamRequestList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamRequestList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamRequestList_presult__isset {
  _CommonMessageFetch_fetchParamRequestList_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamRequestList_presult__isset;

class CommonMessageFetch_fetchParamRequestList_presult {
 public:


  virtual ~CommonMessageFetch_fetchParamRequestList_presult() throw() {}

  std::vector<ParamRequestList> * success;

  _CommonMessageFetch_fetchParamRequestList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchParamValue_args {
 public:

  CommonMessageFetch_fetchParamValue_args() {
  }

  virtual ~CommonMessageFetch_fetchParamValue_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchParamValue_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchParamValue_pargs {
 public:


  virtual ~CommonMessageFetch_fetchParamValue_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamValue_result__isset {
  _CommonMessageFetch_fetchParamValue_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamValue_result__isset;

class CommonMessageFetch_fetchParamValue_result {
 public:

  CommonMessageFetch_fetchParamValue_result() {
  }

  virtual ~CommonMessageFetch_fetchParamValue_result() throw() {}

  std::vector<ParamValue>  success;

  _CommonMessageFetch_fetchParamValue_result__isset __isset;

  void __set_success(const std::vector<ParamValue> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchParamValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamValue_presult__isset {
  _CommonMessageFetch_fetchParamValue_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamValue_presult__isset;

class CommonMessageFetch_fetchParamValue_presult {
 public:


  virtual ~CommonMessageFetch_fetchParamValue_presult() throw() {}

  std::vector<ParamValue> * success;

  _CommonMessageFetch_fetchParamValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchParamSet_args {
 public:

  CommonMessageFetch_fetchParamSet_args() {
  }

  virtual ~CommonMessageFetch_fetchParamSet_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchParamSet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchParamSet_pargs {
 public:


  virtual ~CommonMessageFetch_fetchParamSet_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamSet_result__isset {
  _CommonMessageFetch_fetchParamSet_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamSet_result__isset;

class CommonMessageFetch_fetchParamSet_result {
 public:

  CommonMessageFetch_fetchParamSet_result() {
  }

  virtual ~CommonMessageFetch_fetchParamSet_result() throw() {}

  std::vector<ParamSet>  success;

  _CommonMessageFetch_fetchParamSet_result__isset __isset;

  void __set_success(const std::vector<ParamSet> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchParamSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchParamSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchParamSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchParamSet_presult__isset {
  _CommonMessageFetch_fetchParamSet_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchParamSet_presult__isset;

class CommonMessageFetch_fetchParamSet_presult {
 public:


  virtual ~CommonMessageFetch_fetchParamSet_presult() throw() {}

  std::vector<ParamSet> * success;

  _CommonMessageFetch_fetchParamSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchGpsRawInt_args {
 public:

  CommonMessageFetch_fetchGpsRawInt_args() {
  }

  virtual ~CommonMessageFetch_fetchGpsRawInt_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchGpsRawInt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGpsRawInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGpsRawInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchGpsRawInt_pargs {
 public:


  virtual ~CommonMessageFetch_fetchGpsRawInt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGpsRawInt_result__isset {
  _CommonMessageFetch_fetchGpsRawInt_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGpsRawInt_result__isset;

class CommonMessageFetch_fetchGpsRawInt_result {
 public:

  CommonMessageFetch_fetchGpsRawInt_result() {
  }

  virtual ~CommonMessageFetch_fetchGpsRawInt_result() throw() {}

  std::vector<GpsRawInt>  success;

  _CommonMessageFetch_fetchGpsRawInt_result__isset __isset;

  void __set_success(const std::vector<GpsRawInt> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchGpsRawInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGpsRawInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGpsRawInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGpsRawInt_presult__isset {
  _CommonMessageFetch_fetchGpsRawInt_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGpsRawInt_presult__isset;

class CommonMessageFetch_fetchGpsRawInt_presult {
 public:


  virtual ~CommonMessageFetch_fetchGpsRawInt_presult() throw() {}

  std::vector<GpsRawInt> * success;

  _CommonMessageFetch_fetchGpsRawInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchGpsStatus_args {
 public:

  CommonMessageFetch_fetchGpsStatus_args() {
  }

  virtual ~CommonMessageFetch_fetchGpsStatus_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchGpsStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGpsStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGpsStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchGpsStatus_pargs {
 public:


  virtual ~CommonMessageFetch_fetchGpsStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGpsStatus_result__isset {
  _CommonMessageFetch_fetchGpsStatus_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGpsStatus_result__isset;

class CommonMessageFetch_fetchGpsStatus_result {
 public:

  CommonMessageFetch_fetchGpsStatus_result() {
  }

  virtual ~CommonMessageFetch_fetchGpsStatus_result() throw() {}

  std::vector<GpsStatus>  success;

  _CommonMessageFetch_fetchGpsStatus_result__isset __isset;

  void __set_success(const std::vector<GpsStatus> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchGpsStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGpsStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGpsStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGpsStatus_presult__isset {
  _CommonMessageFetch_fetchGpsStatus_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGpsStatus_presult__isset;

class CommonMessageFetch_fetchGpsStatus_presult {
 public:


  virtual ~CommonMessageFetch_fetchGpsStatus_presult() throw() {}

  std::vector<GpsStatus> * success;

  _CommonMessageFetch_fetchGpsStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchScaledImu_args {
 public:

  CommonMessageFetch_fetchScaledImu_args() {
  }

  virtual ~CommonMessageFetch_fetchScaledImu_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchScaledImu_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchScaledImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchScaledImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchScaledImu_pargs {
 public:


  virtual ~CommonMessageFetch_fetchScaledImu_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchScaledImu_result__isset {
  _CommonMessageFetch_fetchScaledImu_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchScaledImu_result__isset;

class CommonMessageFetch_fetchScaledImu_result {
 public:

  CommonMessageFetch_fetchScaledImu_result() {
  }

  virtual ~CommonMessageFetch_fetchScaledImu_result() throw() {}

  std::vector<ScaledImu>  success;

  _CommonMessageFetch_fetchScaledImu_result__isset __isset;

  void __set_success(const std::vector<ScaledImu> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchScaledImu_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchScaledImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchScaledImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchScaledImu_presult__isset {
  _CommonMessageFetch_fetchScaledImu_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchScaledImu_presult__isset;

class CommonMessageFetch_fetchScaledImu_presult {
 public:


  virtual ~CommonMessageFetch_fetchScaledImu_presult() throw() {}

  std::vector<ScaledImu> * success;

  _CommonMessageFetch_fetchScaledImu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRawImu_args {
 public:

  CommonMessageFetch_fetchRawImu_args() {
  }

  virtual ~CommonMessageFetch_fetchRawImu_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRawImu_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRawImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRawImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRawImu_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRawImu_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRawImu_result__isset {
  _CommonMessageFetch_fetchRawImu_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRawImu_result__isset;

class CommonMessageFetch_fetchRawImu_result {
 public:

  CommonMessageFetch_fetchRawImu_result() {
  }

  virtual ~CommonMessageFetch_fetchRawImu_result() throw() {}

  std::vector<RawImu>  success;

  _CommonMessageFetch_fetchRawImu_result__isset __isset;

  void __set_success(const std::vector<RawImu> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRawImu_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRawImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRawImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRawImu_presult__isset {
  _CommonMessageFetch_fetchRawImu_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRawImu_presult__isset;

class CommonMessageFetch_fetchRawImu_presult {
 public:


  virtual ~CommonMessageFetch_fetchRawImu_presult() throw() {}

  std::vector<RawImu> * success;

  _CommonMessageFetch_fetchRawImu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRawPressure_args {
 public:

  CommonMessageFetch_fetchRawPressure_args() {
  }

  virtual ~CommonMessageFetch_fetchRawPressure_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRawPressure_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRawPressure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRawPressure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRawPressure_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRawPressure_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRawPressure_result__isset {
  _CommonMessageFetch_fetchRawPressure_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRawPressure_result__isset;

class CommonMessageFetch_fetchRawPressure_result {
 public:

  CommonMessageFetch_fetchRawPressure_result() {
  }

  virtual ~CommonMessageFetch_fetchRawPressure_result() throw() {}

  std::vector<RawPressure>  success;

  _CommonMessageFetch_fetchRawPressure_result__isset __isset;

  void __set_success(const std::vector<RawPressure> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRawPressure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRawPressure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRawPressure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRawPressure_presult__isset {
  _CommonMessageFetch_fetchRawPressure_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRawPressure_presult__isset;

class CommonMessageFetch_fetchRawPressure_presult {
 public:


  virtual ~CommonMessageFetch_fetchRawPressure_presult() throw() {}

  std::vector<RawPressure> * success;

  _CommonMessageFetch_fetchRawPressure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchScaledPressure_args {
 public:

  CommonMessageFetch_fetchScaledPressure_args() {
  }

  virtual ~CommonMessageFetch_fetchScaledPressure_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchScaledPressure_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchScaledPressure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchScaledPressure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchScaledPressure_pargs {
 public:


  virtual ~CommonMessageFetch_fetchScaledPressure_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchScaledPressure_result__isset {
  _CommonMessageFetch_fetchScaledPressure_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchScaledPressure_result__isset;

class CommonMessageFetch_fetchScaledPressure_result {
 public:

  CommonMessageFetch_fetchScaledPressure_result() {
  }

  virtual ~CommonMessageFetch_fetchScaledPressure_result() throw() {}

  std::vector<ScaledPressure>  success;

  _CommonMessageFetch_fetchScaledPressure_result__isset __isset;

  void __set_success(const std::vector<ScaledPressure> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchScaledPressure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchScaledPressure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchScaledPressure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchScaledPressure_presult__isset {
  _CommonMessageFetch_fetchScaledPressure_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchScaledPressure_presult__isset;

class CommonMessageFetch_fetchScaledPressure_presult {
 public:


  virtual ~CommonMessageFetch_fetchScaledPressure_presult() throw() {}

  std::vector<ScaledPressure> * success;

  _CommonMessageFetch_fetchScaledPressure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchAttitude_args {
 public:

  CommonMessageFetch_fetchAttitude_args() {
  }

  virtual ~CommonMessageFetch_fetchAttitude_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchAttitude_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchAttitude_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchAttitude_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchAttitude_pargs {
 public:


  virtual ~CommonMessageFetch_fetchAttitude_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchAttitude_result__isset {
  _CommonMessageFetch_fetchAttitude_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchAttitude_result__isset;

class CommonMessageFetch_fetchAttitude_result {
 public:

  CommonMessageFetch_fetchAttitude_result() {
  }

  virtual ~CommonMessageFetch_fetchAttitude_result() throw() {}

  std::vector<Attitude>  success;

  _CommonMessageFetch_fetchAttitude_result__isset __isset;

  void __set_success(const std::vector<Attitude> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchAttitude_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchAttitude_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchAttitude_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchAttitude_presult__isset {
  _CommonMessageFetch_fetchAttitude_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchAttitude_presult__isset;

class CommonMessageFetch_fetchAttitude_presult {
 public:


  virtual ~CommonMessageFetch_fetchAttitude_presult() throw() {}

  std::vector<Attitude> * success;

  _CommonMessageFetch_fetchAttitude_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchAttitudeQuaternion_args {
 public:

  CommonMessageFetch_fetchAttitudeQuaternion_args() {
  }

  virtual ~CommonMessageFetch_fetchAttitudeQuaternion_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchAttitudeQuaternion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchAttitudeQuaternion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchAttitudeQuaternion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchAttitudeQuaternion_pargs {
 public:


  virtual ~CommonMessageFetch_fetchAttitudeQuaternion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchAttitudeQuaternion_result__isset {
  _CommonMessageFetch_fetchAttitudeQuaternion_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchAttitudeQuaternion_result__isset;

class CommonMessageFetch_fetchAttitudeQuaternion_result {
 public:

  CommonMessageFetch_fetchAttitudeQuaternion_result() {
  }

  virtual ~CommonMessageFetch_fetchAttitudeQuaternion_result() throw() {}

  std::vector<AttitudeQuaternion>  success;

  _CommonMessageFetch_fetchAttitudeQuaternion_result__isset __isset;

  void __set_success(const std::vector<AttitudeQuaternion> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchAttitudeQuaternion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchAttitudeQuaternion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchAttitudeQuaternion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchAttitudeQuaternion_presult__isset {
  _CommonMessageFetch_fetchAttitudeQuaternion_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchAttitudeQuaternion_presult__isset;

class CommonMessageFetch_fetchAttitudeQuaternion_presult {
 public:


  virtual ~CommonMessageFetch_fetchAttitudeQuaternion_presult() throw() {}

  std::vector<AttitudeQuaternion> * success;

  _CommonMessageFetch_fetchAttitudeQuaternion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchLocalPositionNed_args {
 public:

  CommonMessageFetch_fetchLocalPositionNed_args() {
  }

  virtual ~CommonMessageFetch_fetchLocalPositionNed_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchLocalPositionNed_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchLocalPositionNed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchLocalPositionNed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchLocalPositionNed_pargs {
 public:


  virtual ~CommonMessageFetch_fetchLocalPositionNed_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchLocalPositionNed_result__isset {
  _CommonMessageFetch_fetchLocalPositionNed_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchLocalPositionNed_result__isset;

class CommonMessageFetch_fetchLocalPositionNed_result {
 public:

  CommonMessageFetch_fetchLocalPositionNed_result() {
  }

  virtual ~CommonMessageFetch_fetchLocalPositionNed_result() throw() {}

  std::vector<LocalPositionNed>  success;

  _CommonMessageFetch_fetchLocalPositionNed_result__isset __isset;

  void __set_success(const std::vector<LocalPositionNed> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchLocalPositionNed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchLocalPositionNed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchLocalPositionNed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchLocalPositionNed_presult__isset {
  _CommonMessageFetch_fetchLocalPositionNed_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchLocalPositionNed_presult__isset;

class CommonMessageFetch_fetchLocalPositionNed_presult {
 public:


  virtual ~CommonMessageFetch_fetchLocalPositionNed_presult() throw() {}

  std::vector<LocalPositionNed> * success;

  _CommonMessageFetch_fetchLocalPositionNed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchGlobalPositionInt_args {
 public:

  CommonMessageFetch_fetchGlobalPositionInt_args() {
  }

  virtual ~CommonMessageFetch_fetchGlobalPositionInt_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchGlobalPositionInt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGlobalPositionInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGlobalPositionInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchGlobalPositionInt_pargs {
 public:


  virtual ~CommonMessageFetch_fetchGlobalPositionInt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGlobalPositionInt_result__isset {
  _CommonMessageFetch_fetchGlobalPositionInt_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGlobalPositionInt_result__isset;

class CommonMessageFetch_fetchGlobalPositionInt_result {
 public:

  CommonMessageFetch_fetchGlobalPositionInt_result() {
  }

  virtual ~CommonMessageFetch_fetchGlobalPositionInt_result() throw() {}

  std::vector<GlobalPositionInt>  success;

  _CommonMessageFetch_fetchGlobalPositionInt_result__isset __isset;

  void __set_success(const std::vector<GlobalPositionInt> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchGlobalPositionInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGlobalPositionInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGlobalPositionInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGlobalPositionInt_presult__isset {
  _CommonMessageFetch_fetchGlobalPositionInt_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGlobalPositionInt_presult__isset;

class CommonMessageFetch_fetchGlobalPositionInt_presult {
 public:


  virtual ~CommonMessageFetch_fetchGlobalPositionInt_presult() throw() {}

  std::vector<GlobalPositionInt> * success;

  _CommonMessageFetch_fetchGlobalPositionInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRcChannelsScaled_args {
 public:

  CommonMessageFetch_fetchRcChannelsScaled_args() {
  }

  virtual ~CommonMessageFetch_fetchRcChannelsScaled_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRcChannelsScaled_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRcChannelsScaled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRcChannelsScaled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRcChannelsScaled_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRcChannelsScaled_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRcChannelsScaled_result__isset {
  _CommonMessageFetch_fetchRcChannelsScaled_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRcChannelsScaled_result__isset;

class CommonMessageFetch_fetchRcChannelsScaled_result {
 public:

  CommonMessageFetch_fetchRcChannelsScaled_result() {
  }

  virtual ~CommonMessageFetch_fetchRcChannelsScaled_result() throw() {}

  std::vector<RcChannelsScaled>  success;

  _CommonMessageFetch_fetchRcChannelsScaled_result__isset __isset;

  void __set_success(const std::vector<RcChannelsScaled> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRcChannelsScaled_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRcChannelsScaled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRcChannelsScaled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRcChannelsScaled_presult__isset {
  _CommonMessageFetch_fetchRcChannelsScaled_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRcChannelsScaled_presult__isset;

class CommonMessageFetch_fetchRcChannelsScaled_presult {
 public:


  virtual ~CommonMessageFetch_fetchRcChannelsScaled_presult() throw() {}

  std::vector<RcChannelsScaled> * success;

  _CommonMessageFetch_fetchRcChannelsScaled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRcChannelsRaw_args {
 public:

  CommonMessageFetch_fetchRcChannelsRaw_args() {
  }

  virtual ~CommonMessageFetch_fetchRcChannelsRaw_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRcChannelsRaw_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRcChannelsRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRcChannelsRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRcChannelsRaw_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRcChannelsRaw_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRcChannelsRaw_result__isset {
  _CommonMessageFetch_fetchRcChannelsRaw_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRcChannelsRaw_result__isset;

class CommonMessageFetch_fetchRcChannelsRaw_result {
 public:

  CommonMessageFetch_fetchRcChannelsRaw_result() {
  }

  virtual ~CommonMessageFetch_fetchRcChannelsRaw_result() throw() {}

  std::vector<RcChannelsRaw>  success;

  _CommonMessageFetch_fetchRcChannelsRaw_result__isset __isset;

  void __set_success(const std::vector<RcChannelsRaw> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRcChannelsRaw_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRcChannelsRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRcChannelsRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRcChannelsRaw_presult__isset {
  _CommonMessageFetch_fetchRcChannelsRaw_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRcChannelsRaw_presult__isset;

class CommonMessageFetch_fetchRcChannelsRaw_presult {
 public:


  virtual ~CommonMessageFetch_fetchRcChannelsRaw_presult() throw() {}

  std::vector<RcChannelsRaw> * success;

  _CommonMessageFetch_fetchRcChannelsRaw_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchServoOutputRaw_args {
 public:

  CommonMessageFetch_fetchServoOutputRaw_args() {
  }

  virtual ~CommonMessageFetch_fetchServoOutputRaw_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchServoOutputRaw_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchServoOutputRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchServoOutputRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchServoOutputRaw_pargs {
 public:


  virtual ~CommonMessageFetch_fetchServoOutputRaw_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchServoOutputRaw_result__isset {
  _CommonMessageFetch_fetchServoOutputRaw_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchServoOutputRaw_result__isset;

class CommonMessageFetch_fetchServoOutputRaw_result {
 public:

  CommonMessageFetch_fetchServoOutputRaw_result() {
  }

  virtual ~CommonMessageFetch_fetchServoOutputRaw_result() throw() {}

  std::vector<ServoOutputRaw>  success;

  _CommonMessageFetch_fetchServoOutputRaw_result__isset __isset;

  void __set_success(const std::vector<ServoOutputRaw> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchServoOutputRaw_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchServoOutputRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchServoOutputRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchServoOutputRaw_presult__isset {
  _CommonMessageFetch_fetchServoOutputRaw_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchServoOutputRaw_presult__isset;

class CommonMessageFetch_fetchServoOutputRaw_presult {
 public:


  virtual ~CommonMessageFetch_fetchServoOutputRaw_presult() throw() {}

  std::vector<ServoOutputRaw> * success;

  _CommonMessageFetch_fetchServoOutputRaw_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionRequestPartialList_args {
 public:

  CommonMessageFetch_fetchMissionRequestPartialList_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionRequestPartialList_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionRequestPartialList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionRequestPartialList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionRequestPartialList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionRequestPartialList_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionRequestPartialList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionRequestPartialList_result__isset {
  _CommonMessageFetch_fetchMissionRequestPartialList_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionRequestPartialList_result__isset;

class CommonMessageFetch_fetchMissionRequestPartialList_result {
 public:

  CommonMessageFetch_fetchMissionRequestPartialList_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionRequestPartialList_result() throw() {}

  std::vector<MissionRequestPartialList>  success;

  _CommonMessageFetch_fetchMissionRequestPartialList_result__isset __isset;

  void __set_success(const std::vector<MissionRequestPartialList> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionRequestPartialList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionRequestPartialList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionRequestPartialList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionRequestPartialList_presult__isset {
  _CommonMessageFetch_fetchMissionRequestPartialList_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionRequestPartialList_presult__isset;

class CommonMessageFetch_fetchMissionRequestPartialList_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionRequestPartialList_presult() throw() {}

  std::vector<MissionRequestPartialList> * success;

  _CommonMessageFetch_fetchMissionRequestPartialList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionWritePartialList_args {
 public:

  CommonMessageFetch_fetchMissionWritePartialList_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionWritePartialList_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionWritePartialList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionWritePartialList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionWritePartialList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionWritePartialList_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionWritePartialList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionWritePartialList_result__isset {
  _CommonMessageFetch_fetchMissionWritePartialList_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionWritePartialList_result__isset;

class CommonMessageFetch_fetchMissionWritePartialList_result {
 public:

  CommonMessageFetch_fetchMissionWritePartialList_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionWritePartialList_result() throw() {}

  std::vector<MissionWritePartialList>  success;

  _CommonMessageFetch_fetchMissionWritePartialList_result__isset __isset;

  void __set_success(const std::vector<MissionWritePartialList> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionWritePartialList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionWritePartialList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionWritePartialList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionWritePartialList_presult__isset {
  _CommonMessageFetch_fetchMissionWritePartialList_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionWritePartialList_presult__isset;

class CommonMessageFetch_fetchMissionWritePartialList_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionWritePartialList_presult() throw() {}

  std::vector<MissionWritePartialList> * success;

  _CommonMessageFetch_fetchMissionWritePartialList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionItem_args {
 public:

  CommonMessageFetch_fetchMissionItem_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionItem_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionItem_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionItem_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionItem_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionItem_result__isset {
  _CommonMessageFetch_fetchMissionItem_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionItem_result__isset;

class CommonMessageFetch_fetchMissionItem_result {
 public:

  CommonMessageFetch_fetchMissionItem_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionItem_result() throw() {}

  std::vector<MissionItem>  success;

  _CommonMessageFetch_fetchMissionItem_result__isset __isset;

  void __set_success(const std::vector<MissionItem> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionItem_presult__isset {
  _CommonMessageFetch_fetchMissionItem_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionItem_presult__isset;

class CommonMessageFetch_fetchMissionItem_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionItem_presult() throw() {}

  std::vector<MissionItem> * success;

  _CommonMessageFetch_fetchMissionItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionRequest_args {
 public:

  CommonMessageFetch_fetchMissionRequest_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionRequest_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionRequest_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionRequest_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionRequest_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionRequest_result__isset {
  _CommonMessageFetch_fetchMissionRequest_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionRequest_result__isset;

class CommonMessageFetch_fetchMissionRequest_result {
 public:

  CommonMessageFetch_fetchMissionRequest_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionRequest_result() throw() {}

  std::vector<MissionRequest>  success;

  _CommonMessageFetch_fetchMissionRequest_result__isset __isset;

  void __set_success(const std::vector<MissionRequest> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionRequest_presult__isset {
  _CommonMessageFetch_fetchMissionRequest_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionRequest_presult__isset;

class CommonMessageFetch_fetchMissionRequest_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionRequest_presult() throw() {}

  std::vector<MissionRequest> * success;

  _CommonMessageFetch_fetchMissionRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionSetCurrent_args {
 public:

  CommonMessageFetch_fetchMissionSetCurrent_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionSetCurrent_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionSetCurrent_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionSetCurrent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionSetCurrent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionSetCurrent_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionSetCurrent_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionSetCurrent_result__isset {
  _CommonMessageFetch_fetchMissionSetCurrent_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionSetCurrent_result__isset;

class CommonMessageFetch_fetchMissionSetCurrent_result {
 public:

  CommonMessageFetch_fetchMissionSetCurrent_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionSetCurrent_result() throw() {}

  std::vector<MissionSetCurrent>  success;

  _CommonMessageFetch_fetchMissionSetCurrent_result__isset __isset;

  void __set_success(const std::vector<MissionSetCurrent> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionSetCurrent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionSetCurrent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionSetCurrent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionSetCurrent_presult__isset {
  _CommonMessageFetch_fetchMissionSetCurrent_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionSetCurrent_presult__isset;

class CommonMessageFetch_fetchMissionSetCurrent_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionSetCurrent_presult() throw() {}

  std::vector<MissionSetCurrent> * success;

  _CommonMessageFetch_fetchMissionSetCurrent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionCurrent_args {
 public:

  CommonMessageFetch_fetchMissionCurrent_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionCurrent_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionCurrent_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionCurrent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionCurrent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionCurrent_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionCurrent_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionCurrent_result__isset {
  _CommonMessageFetch_fetchMissionCurrent_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionCurrent_result__isset;

class CommonMessageFetch_fetchMissionCurrent_result {
 public:

  CommonMessageFetch_fetchMissionCurrent_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionCurrent_result() throw() {}

  std::vector<MissionCurrent>  success;

  _CommonMessageFetch_fetchMissionCurrent_result__isset __isset;

  void __set_success(const std::vector<MissionCurrent> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionCurrent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionCurrent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionCurrent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionCurrent_presult__isset {
  _CommonMessageFetch_fetchMissionCurrent_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionCurrent_presult__isset;

class CommonMessageFetch_fetchMissionCurrent_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionCurrent_presult() throw() {}

  std::vector<MissionCurrent> * success;

  _CommonMessageFetch_fetchMissionCurrent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionRequestList_args {
 public:

  CommonMessageFetch_fetchMissionRequestList_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionRequestList_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionRequestList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionRequestList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionRequestList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionRequestList_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionRequestList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionRequestList_result__isset {
  _CommonMessageFetch_fetchMissionRequestList_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionRequestList_result__isset;

class CommonMessageFetch_fetchMissionRequestList_result {
 public:

  CommonMessageFetch_fetchMissionRequestList_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionRequestList_result() throw() {}

  std::vector<MissionRequestList>  success;

  _CommonMessageFetch_fetchMissionRequestList_result__isset __isset;

  void __set_success(const std::vector<MissionRequestList> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionRequestList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionRequestList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionRequestList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionRequestList_presult__isset {
  _CommonMessageFetch_fetchMissionRequestList_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionRequestList_presult__isset;

class CommonMessageFetch_fetchMissionRequestList_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionRequestList_presult() throw() {}

  std::vector<MissionRequestList> * success;

  _CommonMessageFetch_fetchMissionRequestList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionCount_args {
 public:

  CommonMessageFetch_fetchMissionCount_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionCount_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionCount_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionCount_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionCount_result__isset {
  _CommonMessageFetch_fetchMissionCount_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionCount_result__isset;

class CommonMessageFetch_fetchMissionCount_result {
 public:

  CommonMessageFetch_fetchMissionCount_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionCount_result() throw() {}

  std::vector<MissionCount>  success;

  _CommonMessageFetch_fetchMissionCount_result__isset __isset;

  void __set_success(const std::vector<MissionCount> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionCount_presult__isset {
  _CommonMessageFetch_fetchMissionCount_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionCount_presult__isset;

class CommonMessageFetch_fetchMissionCount_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionCount_presult() throw() {}

  std::vector<MissionCount> * success;

  _CommonMessageFetch_fetchMissionCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionClearAll_args {
 public:

  CommonMessageFetch_fetchMissionClearAll_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionClearAll_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionClearAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionClearAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionClearAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionClearAll_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionClearAll_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionClearAll_result__isset {
  _CommonMessageFetch_fetchMissionClearAll_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionClearAll_result__isset;

class CommonMessageFetch_fetchMissionClearAll_result {
 public:

  CommonMessageFetch_fetchMissionClearAll_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionClearAll_result() throw() {}

  std::vector<MissionClearAll>  success;

  _CommonMessageFetch_fetchMissionClearAll_result__isset __isset;

  void __set_success(const std::vector<MissionClearAll> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionClearAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionClearAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionClearAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionClearAll_presult__isset {
  _CommonMessageFetch_fetchMissionClearAll_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionClearAll_presult__isset;

class CommonMessageFetch_fetchMissionClearAll_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionClearAll_presult() throw() {}

  std::vector<MissionClearAll> * success;

  _CommonMessageFetch_fetchMissionClearAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionItemReached_args {
 public:

  CommonMessageFetch_fetchMissionItemReached_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionItemReached_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionItemReached_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionItemReached_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionItemReached_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionItemReached_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionItemReached_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionItemReached_result__isset {
  _CommonMessageFetch_fetchMissionItemReached_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionItemReached_result__isset;

class CommonMessageFetch_fetchMissionItemReached_result {
 public:

  CommonMessageFetch_fetchMissionItemReached_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionItemReached_result() throw() {}

  std::vector<MissionItemReached>  success;

  _CommonMessageFetch_fetchMissionItemReached_result__isset __isset;

  void __set_success(const std::vector<MissionItemReached> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionItemReached_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionItemReached_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionItemReached_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionItemReached_presult__isset {
  _CommonMessageFetch_fetchMissionItemReached_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionItemReached_presult__isset;

class CommonMessageFetch_fetchMissionItemReached_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionItemReached_presult() throw() {}

  std::vector<MissionItemReached> * success;

  _CommonMessageFetch_fetchMissionItemReached_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMissionAck_args {
 public:

  CommonMessageFetch_fetchMissionAck_args() {
  }

  virtual ~CommonMessageFetch_fetchMissionAck_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMissionAck_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMissionAck_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMissionAck_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionAck_result__isset {
  _CommonMessageFetch_fetchMissionAck_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionAck_result__isset;

class CommonMessageFetch_fetchMissionAck_result {
 public:

  CommonMessageFetch_fetchMissionAck_result() {
  }

  virtual ~CommonMessageFetch_fetchMissionAck_result() throw() {}

  std::vector<MissionAck>  success;

  _CommonMessageFetch_fetchMissionAck_result__isset __isset;

  void __set_success(const std::vector<MissionAck> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMissionAck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMissionAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMissionAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMissionAck_presult__isset {
  _CommonMessageFetch_fetchMissionAck_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMissionAck_presult__isset;

class CommonMessageFetch_fetchMissionAck_presult {
 public:


  virtual ~CommonMessageFetch_fetchMissionAck_presult() throw() {}

  std::vector<MissionAck> * success;

  _CommonMessageFetch_fetchMissionAck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetGpsGlobalOrigin_args {
 public:

  CommonMessageFetch_fetchSetGpsGlobalOrigin_args() {
  }

  virtual ~CommonMessageFetch_fetchSetGpsGlobalOrigin_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetGpsGlobalOrigin_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetGpsGlobalOrigin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetGpsGlobalOrigin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetGpsGlobalOrigin_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetGpsGlobalOrigin_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetGpsGlobalOrigin_result__isset {
  _CommonMessageFetch_fetchSetGpsGlobalOrigin_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetGpsGlobalOrigin_result__isset;

class CommonMessageFetch_fetchSetGpsGlobalOrigin_result {
 public:

  CommonMessageFetch_fetchSetGpsGlobalOrigin_result() {
  }

  virtual ~CommonMessageFetch_fetchSetGpsGlobalOrigin_result() throw() {}

  std::vector<SetGpsGlobalOrigin>  success;

  _CommonMessageFetch_fetchSetGpsGlobalOrigin_result__isset __isset;

  void __set_success(const std::vector<SetGpsGlobalOrigin> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetGpsGlobalOrigin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetGpsGlobalOrigin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetGpsGlobalOrigin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetGpsGlobalOrigin_presult__isset {
  _CommonMessageFetch_fetchSetGpsGlobalOrigin_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetGpsGlobalOrigin_presult__isset;

class CommonMessageFetch_fetchSetGpsGlobalOrigin_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetGpsGlobalOrigin_presult() throw() {}

  std::vector<SetGpsGlobalOrigin> * success;

  _CommonMessageFetch_fetchSetGpsGlobalOrigin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchGpsGlobalOrigin_args {
 public:

  CommonMessageFetch_fetchGpsGlobalOrigin_args() {
  }

  virtual ~CommonMessageFetch_fetchGpsGlobalOrigin_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchGpsGlobalOrigin_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGpsGlobalOrigin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGpsGlobalOrigin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchGpsGlobalOrigin_pargs {
 public:


  virtual ~CommonMessageFetch_fetchGpsGlobalOrigin_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGpsGlobalOrigin_result__isset {
  _CommonMessageFetch_fetchGpsGlobalOrigin_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGpsGlobalOrigin_result__isset;

class CommonMessageFetch_fetchGpsGlobalOrigin_result {
 public:

  CommonMessageFetch_fetchGpsGlobalOrigin_result() {
  }

  virtual ~CommonMessageFetch_fetchGpsGlobalOrigin_result() throw() {}

  std::vector<GpsGlobalOrigin>  success;

  _CommonMessageFetch_fetchGpsGlobalOrigin_result__isset __isset;

  void __set_success(const std::vector<GpsGlobalOrigin> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchGpsGlobalOrigin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGpsGlobalOrigin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGpsGlobalOrigin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGpsGlobalOrigin_presult__isset {
  _CommonMessageFetch_fetchGpsGlobalOrigin_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGpsGlobalOrigin_presult__isset;

class CommonMessageFetch_fetchGpsGlobalOrigin_presult {
 public:


  virtual ~CommonMessageFetch_fetchGpsGlobalOrigin_presult() throw() {}

  std::vector<GpsGlobalOrigin> * success;

  _CommonMessageFetch_fetchGpsGlobalOrigin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetLocalPositionSetpoint_args {
 public:

  CommonMessageFetch_fetchSetLocalPositionSetpoint_args() {
  }

  virtual ~CommonMessageFetch_fetchSetLocalPositionSetpoint_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetLocalPositionSetpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetLocalPositionSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetLocalPositionSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetLocalPositionSetpoint_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetLocalPositionSetpoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetLocalPositionSetpoint_result__isset {
  _CommonMessageFetch_fetchSetLocalPositionSetpoint_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetLocalPositionSetpoint_result__isset;

class CommonMessageFetch_fetchSetLocalPositionSetpoint_result {
 public:

  CommonMessageFetch_fetchSetLocalPositionSetpoint_result() {
  }

  virtual ~CommonMessageFetch_fetchSetLocalPositionSetpoint_result() throw() {}

  std::vector<SetLocalPositionSetpoint>  success;

  _CommonMessageFetch_fetchSetLocalPositionSetpoint_result__isset __isset;

  void __set_success(const std::vector<SetLocalPositionSetpoint> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetLocalPositionSetpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetLocalPositionSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetLocalPositionSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetLocalPositionSetpoint_presult__isset {
  _CommonMessageFetch_fetchSetLocalPositionSetpoint_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetLocalPositionSetpoint_presult__isset;

class CommonMessageFetch_fetchSetLocalPositionSetpoint_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetLocalPositionSetpoint_presult() throw() {}

  std::vector<SetLocalPositionSetpoint> * success;

  _CommonMessageFetch_fetchSetLocalPositionSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchLocalPositionSetpoint_args {
 public:

  CommonMessageFetch_fetchLocalPositionSetpoint_args() {
  }

  virtual ~CommonMessageFetch_fetchLocalPositionSetpoint_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchLocalPositionSetpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchLocalPositionSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchLocalPositionSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchLocalPositionSetpoint_pargs {
 public:


  virtual ~CommonMessageFetch_fetchLocalPositionSetpoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchLocalPositionSetpoint_result__isset {
  _CommonMessageFetch_fetchLocalPositionSetpoint_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchLocalPositionSetpoint_result__isset;

class CommonMessageFetch_fetchLocalPositionSetpoint_result {
 public:

  CommonMessageFetch_fetchLocalPositionSetpoint_result() {
  }

  virtual ~CommonMessageFetch_fetchLocalPositionSetpoint_result() throw() {}

  std::vector<LocalPositionSetpoint>  success;

  _CommonMessageFetch_fetchLocalPositionSetpoint_result__isset __isset;

  void __set_success(const std::vector<LocalPositionSetpoint> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchLocalPositionSetpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchLocalPositionSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchLocalPositionSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchLocalPositionSetpoint_presult__isset {
  _CommonMessageFetch_fetchLocalPositionSetpoint_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchLocalPositionSetpoint_presult__isset;

class CommonMessageFetch_fetchLocalPositionSetpoint_presult {
 public:


  virtual ~CommonMessageFetch_fetchLocalPositionSetpoint_presult() throw() {}

  std::vector<LocalPositionSetpoint> * success;

  _CommonMessageFetch_fetchLocalPositionSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchGlobalPositionSetpointInt_args {
 public:

  CommonMessageFetch_fetchGlobalPositionSetpointInt_args() {
  }

  virtual ~CommonMessageFetch_fetchGlobalPositionSetpointInt_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchGlobalPositionSetpointInt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGlobalPositionSetpointInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGlobalPositionSetpointInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchGlobalPositionSetpointInt_pargs {
 public:


  virtual ~CommonMessageFetch_fetchGlobalPositionSetpointInt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGlobalPositionSetpointInt_result__isset {
  _CommonMessageFetch_fetchGlobalPositionSetpointInt_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGlobalPositionSetpointInt_result__isset;

class CommonMessageFetch_fetchGlobalPositionSetpointInt_result {
 public:

  CommonMessageFetch_fetchGlobalPositionSetpointInt_result() {
  }

  virtual ~CommonMessageFetch_fetchGlobalPositionSetpointInt_result() throw() {}

  std::vector<GlobalPositionSetpointInt>  success;

  _CommonMessageFetch_fetchGlobalPositionSetpointInt_result__isset __isset;

  void __set_success(const std::vector<GlobalPositionSetpointInt> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchGlobalPositionSetpointInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGlobalPositionSetpointInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGlobalPositionSetpointInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGlobalPositionSetpointInt_presult__isset {
  _CommonMessageFetch_fetchGlobalPositionSetpointInt_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGlobalPositionSetpointInt_presult__isset;

class CommonMessageFetch_fetchGlobalPositionSetpointInt_presult {
 public:


  virtual ~CommonMessageFetch_fetchGlobalPositionSetpointInt_presult() throw() {}

  std::vector<GlobalPositionSetpointInt> * success;

  _CommonMessageFetch_fetchGlobalPositionSetpointInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetGlobalPositionSetpointInt_args {
 public:

  CommonMessageFetch_fetchSetGlobalPositionSetpointInt_args() {
  }

  virtual ~CommonMessageFetch_fetchSetGlobalPositionSetpointInt_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetGlobalPositionSetpointInt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetGlobalPositionSetpointInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetGlobalPositionSetpointInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetGlobalPositionSetpointInt_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetGlobalPositionSetpointInt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result__isset {
  _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result__isset;

class CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result {
 public:

  CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result() {
  }

  virtual ~CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result() throw() {}

  std::vector<SetGlobalPositionSetpointInt>  success;

  _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result__isset __isset;

  void __set_success(const std::vector<SetGlobalPositionSetpointInt> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetGlobalPositionSetpointInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_presult__isset {
  _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_presult__isset;

class CommonMessageFetch_fetchSetGlobalPositionSetpointInt_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetGlobalPositionSetpointInt_presult() throw() {}

  std::vector<SetGlobalPositionSetpointInt> * success;

  _CommonMessageFetch_fetchSetGlobalPositionSetpointInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSafetySetAllowedArea_args {
 public:

  CommonMessageFetch_fetchSafetySetAllowedArea_args() {
  }

  virtual ~CommonMessageFetch_fetchSafetySetAllowedArea_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSafetySetAllowedArea_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSafetySetAllowedArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSafetySetAllowedArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSafetySetAllowedArea_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSafetySetAllowedArea_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSafetySetAllowedArea_result__isset {
  _CommonMessageFetch_fetchSafetySetAllowedArea_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSafetySetAllowedArea_result__isset;

class CommonMessageFetch_fetchSafetySetAllowedArea_result {
 public:

  CommonMessageFetch_fetchSafetySetAllowedArea_result() {
  }

  virtual ~CommonMessageFetch_fetchSafetySetAllowedArea_result() throw() {}

  std::vector<SafetySetAllowedArea>  success;

  _CommonMessageFetch_fetchSafetySetAllowedArea_result__isset __isset;

  void __set_success(const std::vector<SafetySetAllowedArea> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSafetySetAllowedArea_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSafetySetAllowedArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSafetySetAllowedArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSafetySetAllowedArea_presult__isset {
  _CommonMessageFetch_fetchSafetySetAllowedArea_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSafetySetAllowedArea_presult__isset;

class CommonMessageFetch_fetchSafetySetAllowedArea_presult {
 public:


  virtual ~CommonMessageFetch_fetchSafetySetAllowedArea_presult() throw() {}

  std::vector<SafetySetAllowedArea> * success;

  _CommonMessageFetch_fetchSafetySetAllowedArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSafetyAllowedArea_args {
 public:

  CommonMessageFetch_fetchSafetyAllowedArea_args() {
  }

  virtual ~CommonMessageFetch_fetchSafetyAllowedArea_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSafetyAllowedArea_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSafetyAllowedArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSafetyAllowedArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSafetyAllowedArea_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSafetyAllowedArea_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSafetyAllowedArea_result__isset {
  _CommonMessageFetch_fetchSafetyAllowedArea_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSafetyAllowedArea_result__isset;

class CommonMessageFetch_fetchSafetyAllowedArea_result {
 public:

  CommonMessageFetch_fetchSafetyAllowedArea_result() {
  }

  virtual ~CommonMessageFetch_fetchSafetyAllowedArea_result() throw() {}

  std::vector<SafetyAllowedArea>  success;

  _CommonMessageFetch_fetchSafetyAllowedArea_result__isset __isset;

  void __set_success(const std::vector<SafetyAllowedArea> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSafetyAllowedArea_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSafetyAllowedArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSafetyAllowedArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSafetyAllowedArea_presult__isset {
  _CommonMessageFetch_fetchSafetyAllowedArea_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSafetyAllowedArea_presult__isset;

class CommonMessageFetch_fetchSafetyAllowedArea_presult {
 public:


  virtual ~CommonMessageFetch_fetchSafetyAllowedArea_presult() throw() {}

  std::vector<SafetyAllowedArea> * success;

  _CommonMessageFetch_fetchSafetyAllowedArea_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetRollPitchYawThrust_args {
 public:

  CommonMessageFetch_fetchSetRollPitchYawThrust_args() {
  }

  virtual ~CommonMessageFetch_fetchSetRollPitchYawThrust_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetRollPitchYawThrust_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetRollPitchYawThrust_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetRollPitchYawThrust_result__isset {
  _CommonMessageFetch_fetchSetRollPitchYawThrust_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetRollPitchYawThrust_result__isset;

class CommonMessageFetch_fetchSetRollPitchYawThrust_result {
 public:

  CommonMessageFetch_fetchSetRollPitchYawThrust_result() {
  }

  virtual ~CommonMessageFetch_fetchSetRollPitchYawThrust_result() throw() {}

  std::vector<SetRollPitchYawThrust>  success;

  _CommonMessageFetch_fetchSetRollPitchYawThrust_result__isset __isset;

  void __set_success(const std::vector<SetRollPitchYawThrust> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetRollPitchYawThrust_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetRollPitchYawThrust_presult__isset {
  _CommonMessageFetch_fetchSetRollPitchYawThrust_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetRollPitchYawThrust_presult__isset;

class CommonMessageFetch_fetchSetRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetRollPitchYawThrust_presult() throw() {}

  std::vector<SetRollPitchYawThrust> * success;

  _CommonMessageFetch_fetchSetRollPitchYawThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_args {
 public:

  CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_args() {
  }

  virtual ~CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result__isset {
  _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result__isset;

class CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result {
 public:

  CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result() {
  }

  virtual ~CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result() throw() {}

  std::vector<SetRollPitchYawSpeedThrust>  success;

  _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result__isset __isset;

  void __set_success(const std::vector<SetRollPitchYawSpeedThrust> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_presult__isset {
  _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_presult__isset;

class CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_presult() throw() {}

  std::vector<SetRollPitchYawSpeedThrust> * success;

  _CommonMessageFetch_fetchSetRollPitchYawSpeedThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRollPitchYawThrustSetpoint_args {
 public:

  CommonMessageFetch_fetchRollPitchYawThrustSetpoint_args() {
  }

  virtual ~CommonMessageFetch_fetchRollPitchYawThrustSetpoint_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRollPitchYawThrustSetpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRollPitchYawThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRollPitchYawThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRollPitchYawThrustSetpoint_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRollPitchYawThrustSetpoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result__isset {
  _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result__isset;

class CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result {
 public:

  CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result() {
  }

  virtual ~CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result() throw() {}

  std::vector<RollPitchYawThrustSetpoint>  success;

  _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result__isset __isset;

  void __set_success(const std::vector<RollPitchYawThrustSetpoint> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRollPitchYawThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_presult__isset {
  _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_presult__isset;

class CommonMessageFetch_fetchRollPitchYawThrustSetpoint_presult {
 public:


  virtual ~CommonMessageFetch_fetchRollPitchYawThrustSetpoint_presult() throw() {}

  std::vector<RollPitchYawThrustSetpoint> * success;

  _CommonMessageFetch_fetchRollPitchYawThrustSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_args {
 public:

  CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_args() {
  }

  virtual ~CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result__isset {
  _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result__isset;

class CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result {
 public:

  CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result() {
  }

  virtual ~CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result() throw() {}

  std::vector<RollPitchYawSpeedThrustSetpoint>  success;

  _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result__isset __isset;

  void __set_success(const std::vector<RollPitchYawSpeedThrustSetpoint> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_presult__isset {
  _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_presult__isset;

class CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_presult {
 public:


  virtual ~CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_presult() throw() {}

  std::vector<RollPitchYawSpeedThrustSetpoint> * success;

  _CommonMessageFetch_fetchRollPitchYawSpeedThrustSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetQuadMotorsSetpoint_args {
 public:

  CommonMessageFetch_fetchSetQuadMotorsSetpoint_args() {
  }

  virtual ~CommonMessageFetch_fetchSetQuadMotorsSetpoint_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetQuadMotorsSetpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetQuadMotorsSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetQuadMotorsSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetQuadMotorsSetpoint_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetQuadMotorsSetpoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetQuadMotorsSetpoint_result__isset {
  _CommonMessageFetch_fetchSetQuadMotorsSetpoint_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetQuadMotorsSetpoint_result__isset;

class CommonMessageFetch_fetchSetQuadMotorsSetpoint_result {
 public:

  CommonMessageFetch_fetchSetQuadMotorsSetpoint_result() {
  }

  virtual ~CommonMessageFetch_fetchSetQuadMotorsSetpoint_result() throw() {}

  std::vector<SetQuadMotorsSetpoint>  success;

  _CommonMessageFetch_fetchSetQuadMotorsSetpoint_result__isset __isset;

  void __set_success(const std::vector<SetQuadMotorsSetpoint> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetQuadMotorsSetpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetQuadMotorsSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetQuadMotorsSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetQuadMotorsSetpoint_presult__isset {
  _CommonMessageFetch_fetchSetQuadMotorsSetpoint_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetQuadMotorsSetpoint_presult__isset;

class CommonMessageFetch_fetchSetQuadMotorsSetpoint_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetQuadMotorsSetpoint_presult() throw() {}

  std::vector<SetQuadMotorsSetpoint> * success;

  _CommonMessageFetch_fetchSetQuadMotorsSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_args {
 public:

  CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_args() {
  }

  virtual ~CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result__isset {
  _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result__isset;

class CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result {
 public:

  CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result() {
  }

  virtual ~CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result() throw() {}

  std::vector<SetQuadSwarmRollPitchYawThrust>  success;

  _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result__isset __isset;

  void __set_success(const std::vector<SetQuadSwarmRollPitchYawThrust> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_presult__isset {
  _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_presult__isset;

class CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_presult() throw() {}

  std::vector<SetQuadSwarmRollPitchYawThrust> * success;

  _CommonMessageFetch_fetchSetQuadSwarmRollPitchYawThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchNavControllerOutput_args {
 public:

  CommonMessageFetch_fetchNavControllerOutput_args() {
  }

  virtual ~CommonMessageFetch_fetchNavControllerOutput_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchNavControllerOutput_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchNavControllerOutput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchNavControllerOutput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchNavControllerOutput_pargs {
 public:


  virtual ~CommonMessageFetch_fetchNavControllerOutput_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchNavControllerOutput_result__isset {
  _CommonMessageFetch_fetchNavControllerOutput_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchNavControllerOutput_result__isset;

class CommonMessageFetch_fetchNavControllerOutput_result {
 public:

  CommonMessageFetch_fetchNavControllerOutput_result() {
  }

  virtual ~CommonMessageFetch_fetchNavControllerOutput_result() throw() {}

  std::vector<NavControllerOutput>  success;

  _CommonMessageFetch_fetchNavControllerOutput_result__isset __isset;

  void __set_success(const std::vector<NavControllerOutput> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchNavControllerOutput_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchNavControllerOutput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchNavControllerOutput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchNavControllerOutput_presult__isset {
  _CommonMessageFetch_fetchNavControllerOutput_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchNavControllerOutput_presult__isset;

class CommonMessageFetch_fetchNavControllerOutput_presult {
 public:


  virtual ~CommonMessageFetch_fetchNavControllerOutput_presult() throw() {}

  std::vector<NavControllerOutput> * success;

  _CommonMessageFetch_fetchNavControllerOutput_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_args {
 public:

  CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_args() {
  }

  virtual ~CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result__isset {
  _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result__isset;

class CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result {
 public:

  CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result() {
  }

  virtual ~CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result() throw() {}

  std::vector<SetQuadSwarmLedRollPitchYawThrust>  success;

  _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result__isset __isset;

  void __set_success(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_presult__isset {
  _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_presult__isset;

class CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_presult() throw() {}

  std::vector<SetQuadSwarmLedRollPitchYawThrust> * success;

  _CommonMessageFetch_fetchSetQuadSwarmLedRollPitchYawThrust_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchStateCorrection_args {
 public:

  CommonMessageFetch_fetchStateCorrection_args() {
  }

  virtual ~CommonMessageFetch_fetchStateCorrection_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchStateCorrection_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchStateCorrection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchStateCorrection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchStateCorrection_pargs {
 public:


  virtual ~CommonMessageFetch_fetchStateCorrection_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchStateCorrection_result__isset {
  _CommonMessageFetch_fetchStateCorrection_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchStateCorrection_result__isset;

class CommonMessageFetch_fetchStateCorrection_result {
 public:

  CommonMessageFetch_fetchStateCorrection_result() {
  }

  virtual ~CommonMessageFetch_fetchStateCorrection_result() throw() {}

  std::vector<StateCorrection>  success;

  _CommonMessageFetch_fetchStateCorrection_result__isset __isset;

  void __set_success(const std::vector<StateCorrection> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchStateCorrection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchStateCorrection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchStateCorrection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchStateCorrection_presult__isset {
  _CommonMessageFetch_fetchStateCorrection_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchStateCorrection_presult__isset;

class CommonMessageFetch_fetchStateCorrection_presult {
 public:


  virtual ~CommonMessageFetch_fetchStateCorrection_presult() throw() {}

  std::vector<StateCorrection> * success;

  _CommonMessageFetch_fetchStateCorrection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRequestDataStream_args {
 public:

  CommonMessageFetch_fetchRequestDataStream_args() {
  }

  virtual ~CommonMessageFetch_fetchRequestDataStream_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRequestDataStream_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRequestDataStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRequestDataStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRequestDataStream_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRequestDataStream_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRequestDataStream_result__isset {
  _CommonMessageFetch_fetchRequestDataStream_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRequestDataStream_result__isset;

class CommonMessageFetch_fetchRequestDataStream_result {
 public:

  CommonMessageFetch_fetchRequestDataStream_result() {
  }

  virtual ~CommonMessageFetch_fetchRequestDataStream_result() throw() {}

  std::vector<RequestDataStream>  success;

  _CommonMessageFetch_fetchRequestDataStream_result__isset __isset;

  void __set_success(const std::vector<RequestDataStream> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRequestDataStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRequestDataStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRequestDataStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRequestDataStream_presult__isset {
  _CommonMessageFetch_fetchRequestDataStream_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRequestDataStream_presult__isset;

class CommonMessageFetch_fetchRequestDataStream_presult {
 public:


  virtual ~CommonMessageFetch_fetchRequestDataStream_presult() throw() {}

  std::vector<RequestDataStream> * success;

  _CommonMessageFetch_fetchRequestDataStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchDataStream_args {
 public:

  CommonMessageFetch_fetchDataStream_args() {
  }

  virtual ~CommonMessageFetch_fetchDataStream_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchDataStream_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchDataStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchDataStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchDataStream_pargs {
 public:


  virtual ~CommonMessageFetch_fetchDataStream_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchDataStream_result__isset {
  _CommonMessageFetch_fetchDataStream_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchDataStream_result__isset;

class CommonMessageFetch_fetchDataStream_result {
 public:

  CommonMessageFetch_fetchDataStream_result() {
  }

  virtual ~CommonMessageFetch_fetchDataStream_result() throw() {}

  std::vector<DataStream>  success;

  _CommonMessageFetch_fetchDataStream_result__isset __isset;

  void __set_success(const std::vector<DataStream> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchDataStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchDataStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchDataStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchDataStream_presult__isset {
  _CommonMessageFetch_fetchDataStream_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchDataStream_presult__isset;

class CommonMessageFetch_fetchDataStream_presult {
 public:


  virtual ~CommonMessageFetch_fetchDataStream_presult() throw() {}

  std::vector<DataStream> * success;

  _CommonMessageFetch_fetchDataStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchManualControl_args {
 public:

  CommonMessageFetch_fetchManualControl_args() {
  }

  virtual ~CommonMessageFetch_fetchManualControl_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchManualControl_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchManualControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchManualControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchManualControl_pargs {
 public:


  virtual ~CommonMessageFetch_fetchManualControl_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchManualControl_result__isset {
  _CommonMessageFetch_fetchManualControl_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchManualControl_result__isset;

class CommonMessageFetch_fetchManualControl_result {
 public:

  CommonMessageFetch_fetchManualControl_result() {
  }

  virtual ~CommonMessageFetch_fetchManualControl_result() throw() {}

  std::vector<ManualControl>  success;

  _CommonMessageFetch_fetchManualControl_result__isset __isset;

  void __set_success(const std::vector<ManualControl> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchManualControl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchManualControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchManualControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchManualControl_presult__isset {
  _CommonMessageFetch_fetchManualControl_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchManualControl_presult__isset;

class CommonMessageFetch_fetchManualControl_presult {
 public:


  virtual ~CommonMessageFetch_fetchManualControl_presult() throw() {}

  std::vector<ManualControl> * success;

  _CommonMessageFetch_fetchManualControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRcChannelsOverride_args {
 public:

  CommonMessageFetch_fetchRcChannelsOverride_args() {
  }

  virtual ~CommonMessageFetch_fetchRcChannelsOverride_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRcChannelsOverride_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRcChannelsOverride_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRcChannelsOverride_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRcChannelsOverride_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRcChannelsOverride_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRcChannelsOverride_result__isset {
  _CommonMessageFetch_fetchRcChannelsOverride_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRcChannelsOverride_result__isset;

class CommonMessageFetch_fetchRcChannelsOverride_result {
 public:

  CommonMessageFetch_fetchRcChannelsOverride_result() {
  }

  virtual ~CommonMessageFetch_fetchRcChannelsOverride_result() throw() {}

  std::vector<RcChannelsOverride>  success;

  _CommonMessageFetch_fetchRcChannelsOverride_result__isset __isset;

  void __set_success(const std::vector<RcChannelsOverride> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRcChannelsOverride_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRcChannelsOverride_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRcChannelsOverride_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRcChannelsOverride_presult__isset {
  _CommonMessageFetch_fetchRcChannelsOverride_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRcChannelsOverride_presult__isset;

class CommonMessageFetch_fetchRcChannelsOverride_presult {
 public:


  virtual ~CommonMessageFetch_fetchRcChannelsOverride_presult() throw() {}

  std::vector<RcChannelsOverride> * success;

  _CommonMessageFetch_fetchRcChannelsOverride_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchVfrHud_args {
 public:

  CommonMessageFetch_fetchVfrHud_args() {
  }

  virtual ~CommonMessageFetch_fetchVfrHud_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchVfrHud_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchVfrHud_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchVfrHud_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchVfrHud_pargs {
 public:


  virtual ~CommonMessageFetch_fetchVfrHud_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchVfrHud_result__isset {
  _CommonMessageFetch_fetchVfrHud_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchVfrHud_result__isset;

class CommonMessageFetch_fetchVfrHud_result {
 public:

  CommonMessageFetch_fetchVfrHud_result() {
  }

  virtual ~CommonMessageFetch_fetchVfrHud_result() throw() {}

  std::vector<VfrHud>  success;

  _CommonMessageFetch_fetchVfrHud_result__isset __isset;

  void __set_success(const std::vector<VfrHud> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchVfrHud_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchVfrHud_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchVfrHud_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchVfrHud_presult__isset {
  _CommonMessageFetch_fetchVfrHud_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchVfrHud_presult__isset;

class CommonMessageFetch_fetchVfrHud_presult {
 public:


  virtual ~CommonMessageFetch_fetchVfrHud_presult() throw() {}

  std::vector<VfrHud> * success;

  _CommonMessageFetch_fetchVfrHud_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchCommandLong_args {
 public:

  CommonMessageFetch_fetchCommandLong_args() {
  }

  virtual ~CommonMessageFetch_fetchCommandLong_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchCommandLong_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchCommandLong_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchCommandLong_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchCommandLong_pargs {
 public:


  virtual ~CommonMessageFetch_fetchCommandLong_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchCommandLong_result__isset {
  _CommonMessageFetch_fetchCommandLong_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchCommandLong_result__isset;

class CommonMessageFetch_fetchCommandLong_result {
 public:

  CommonMessageFetch_fetchCommandLong_result() {
  }

  virtual ~CommonMessageFetch_fetchCommandLong_result() throw() {}

  std::vector<CommandLong>  success;

  _CommonMessageFetch_fetchCommandLong_result__isset __isset;

  void __set_success(const std::vector<CommandLong> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchCommandLong_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchCommandLong_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchCommandLong_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchCommandLong_presult__isset {
  _CommonMessageFetch_fetchCommandLong_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchCommandLong_presult__isset;

class CommonMessageFetch_fetchCommandLong_presult {
 public:


  virtual ~CommonMessageFetch_fetchCommandLong_presult() throw() {}

  std::vector<CommandLong> * success;

  _CommonMessageFetch_fetchCommandLong_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchCommandAck_args {
 public:

  CommonMessageFetch_fetchCommandAck_args() {
  }

  virtual ~CommonMessageFetch_fetchCommandAck_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchCommandAck_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchCommandAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchCommandAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchCommandAck_pargs {
 public:


  virtual ~CommonMessageFetch_fetchCommandAck_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchCommandAck_result__isset {
  _CommonMessageFetch_fetchCommandAck_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchCommandAck_result__isset;

class CommonMessageFetch_fetchCommandAck_result {
 public:

  CommonMessageFetch_fetchCommandAck_result() {
  }

  virtual ~CommonMessageFetch_fetchCommandAck_result() throw() {}

  std::vector<CommandAck>  success;

  _CommonMessageFetch_fetchCommandAck_result__isset __isset;

  void __set_success(const std::vector<CommandAck> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchCommandAck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchCommandAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchCommandAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchCommandAck_presult__isset {
  _CommonMessageFetch_fetchCommandAck_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchCommandAck_presult__isset;

class CommonMessageFetch_fetchCommandAck_presult {
 public:


  virtual ~CommonMessageFetch_fetchCommandAck_presult() throw() {}

  std::vector<CommandAck> * success;

  _CommonMessageFetch_fetchCommandAck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_args {
 public:

  CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_args() {
  }

  virtual ~CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_pargs {
 public:


  virtual ~CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result__isset {
  _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result__isset;

class CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result {
 public:

  CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result() {
  }

  virtual ~CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result() throw() {}

  std::vector<RollPitchYawRatesThrustSetpoint>  success;

  _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result__isset __isset;

  void __set_success(const std::vector<RollPitchYawRatesThrustSetpoint> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_presult__isset {
  _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_presult__isset;

class CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_presult {
 public:


  virtual ~CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_presult() throw() {}

  std::vector<RollPitchYawRatesThrustSetpoint> * success;

  _CommonMessageFetch_fetchRollPitchYawRatesThrustSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchManualSetpoint_args {
 public:

  CommonMessageFetch_fetchManualSetpoint_args() {
  }

  virtual ~CommonMessageFetch_fetchManualSetpoint_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchManualSetpoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchManualSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchManualSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchManualSetpoint_pargs {
 public:


  virtual ~CommonMessageFetch_fetchManualSetpoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchManualSetpoint_result__isset {
  _CommonMessageFetch_fetchManualSetpoint_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchManualSetpoint_result__isset;

class CommonMessageFetch_fetchManualSetpoint_result {
 public:

  CommonMessageFetch_fetchManualSetpoint_result() {
  }

  virtual ~CommonMessageFetch_fetchManualSetpoint_result() throw() {}

  std::vector<ManualSetpoint>  success;

  _CommonMessageFetch_fetchManualSetpoint_result__isset __isset;

  void __set_success(const std::vector<ManualSetpoint> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchManualSetpoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchManualSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchManualSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchManualSetpoint_presult__isset {
  _CommonMessageFetch_fetchManualSetpoint_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchManualSetpoint_presult__isset;

class CommonMessageFetch_fetchManualSetpoint_presult {
 public:


  virtual ~CommonMessageFetch_fetchManualSetpoint_presult() throw() {}

  std::vector<ManualSetpoint> * success;

  _CommonMessageFetch_fetchManualSetpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_args {
 public:

  CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_args() {
  }

  virtual ~CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_pargs {
 public:


  virtual ~CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result__isset {
  _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result__isset;

class CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result {
 public:

  CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result() {
  }

  virtual ~CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result() throw() {}

  std::vector<LocalPositionNedSystemGlobalOffset>  success;

  _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result__isset __isset;

  void __set_success(const std::vector<LocalPositionNedSystemGlobalOffset> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_presult__isset {
  _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_presult__isset;

class CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_presult {
 public:


  virtual ~CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_presult() throw() {}

  std::vector<LocalPositionNedSystemGlobalOffset> * success;

  _CommonMessageFetch_fetchLocalPositionNedSystemGlobalOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchHilState_args {
 public:

  CommonMessageFetch_fetchHilState_args() {
  }

  virtual ~CommonMessageFetch_fetchHilState_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchHilState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHilState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHilState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchHilState_pargs {
 public:


  virtual ~CommonMessageFetch_fetchHilState_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHilState_result__isset {
  _CommonMessageFetch_fetchHilState_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHilState_result__isset;

class CommonMessageFetch_fetchHilState_result {
 public:

  CommonMessageFetch_fetchHilState_result() {
  }

  virtual ~CommonMessageFetch_fetchHilState_result() throw() {}

  std::vector<HilState>  success;

  _CommonMessageFetch_fetchHilState_result__isset __isset;

  void __set_success(const std::vector<HilState> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchHilState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHilState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHilState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHilState_presult__isset {
  _CommonMessageFetch_fetchHilState_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHilState_presult__isset;

class CommonMessageFetch_fetchHilState_presult {
 public:


  virtual ~CommonMessageFetch_fetchHilState_presult() throw() {}

  std::vector<HilState> * success;

  _CommonMessageFetch_fetchHilState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchHilControls_args {
 public:

  CommonMessageFetch_fetchHilControls_args() {
  }

  virtual ~CommonMessageFetch_fetchHilControls_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchHilControls_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHilControls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHilControls_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchHilControls_pargs {
 public:


  virtual ~CommonMessageFetch_fetchHilControls_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHilControls_result__isset {
  _CommonMessageFetch_fetchHilControls_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHilControls_result__isset;

class CommonMessageFetch_fetchHilControls_result {
 public:

  CommonMessageFetch_fetchHilControls_result() {
  }

  virtual ~CommonMessageFetch_fetchHilControls_result() throw() {}

  std::vector<HilControls>  success;

  _CommonMessageFetch_fetchHilControls_result__isset __isset;

  void __set_success(const std::vector<HilControls> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchHilControls_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHilControls_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHilControls_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHilControls_presult__isset {
  _CommonMessageFetch_fetchHilControls_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHilControls_presult__isset;

class CommonMessageFetch_fetchHilControls_presult {
 public:


  virtual ~CommonMessageFetch_fetchHilControls_presult() throw() {}

  std::vector<HilControls> * success;

  _CommonMessageFetch_fetchHilControls_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchHilRcInputsRaw_args {
 public:

  CommonMessageFetch_fetchHilRcInputsRaw_args() {
  }

  virtual ~CommonMessageFetch_fetchHilRcInputsRaw_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchHilRcInputsRaw_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHilRcInputsRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHilRcInputsRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchHilRcInputsRaw_pargs {
 public:


  virtual ~CommonMessageFetch_fetchHilRcInputsRaw_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHilRcInputsRaw_result__isset {
  _CommonMessageFetch_fetchHilRcInputsRaw_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHilRcInputsRaw_result__isset;

class CommonMessageFetch_fetchHilRcInputsRaw_result {
 public:

  CommonMessageFetch_fetchHilRcInputsRaw_result() {
  }

  virtual ~CommonMessageFetch_fetchHilRcInputsRaw_result() throw() {}

  std::vector<HilRcInputsRaw>  success;

  _CommonMessageFetch_fetchHilRcInputsRaw_result__isset __isset;

  void __set_success(const std::vector<HilRcInputsRaw> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchHilRcInputsRaw_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHilRcInputsRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHilRcInputsRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHilRcInputsRaw_presult__isset {
  _CommonMessageFetch_fetchHilRcInputsRaw_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHilRcInputsRaw_presult__isset;

class CommonMessageFetch_fetchHilRcInputsRaw_presult {
 public:


  virtual ~CommonMessageFetch_fetchHilRcInputsRaw_presult() throw() {}

  std::vector<HilRcInputsRaw> * success;

  _CommonMessageFetch_fetchHilRcInputsRaw_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchOpticalFlow_args {
 public:

  CommonMessageFetch_fetchOpticalFlow_args() {
  }

  virtual ~CommonMessageFetch_fetchOpticalFlow_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchOpticalFlow_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchOpticalFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchOpticalFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchOpticalFlow_pargs {
 public:


  virtual ~CommonMessageFetch_fetchOpticalFlow_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchOpticalFlow_result__isset {
  _CommonMessageFetch_fetchOpticalFlow_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchOpticalFlow_result__isset;

class CommonMessageFetch_fetchOpticalFlow_result {
 public:

  CommonMessageFetch_fetchOpticalFlow_result() {
  }

  virtual ~CommonMessageFetch_fetchOpticalFlow_result() throw() {}

  std::vector<OpticalFlow>  success;

  _CommonMessageFetch_fetchOpticalFlow_result__isset __isset;

  void __set_success(const std::vector<OpticalFlow> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchOpticalFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchOpticalFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchOpticalFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchOpticalFlow_presult__isset {
  _CommonMessageFetch_fetchOpticalFlow_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchOpticalFlow_presult__isset;

class CommonMessageFetch_fetchOpticalFlow_presult {
 public:


  virtual ~CommonMessageFetch_fetchOpticalFlow_presult() throw() {}

  std::vector<OpticalFlow> * success;

  _CommonMessageFetch_fetchOpticalFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchGlobalVisionPositionEstimate_args {
 public:

  CommonMessageFetch_fetchGlobalVisionPositionEstimate_args() {
  }

  virtual ~CommonMessageFetch_fetchGlobalVisionPositionEstimate_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchGlobalVisionPositionEstimate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGlobalVisionPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGlobalVisionPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchGlobalVisionPositionEstimate_pargs {
 public:


  virtual ~CommonMessageFetch_fetchGlobalVisionPositionEstimate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGlobalVisionPositionEstimate_result__isset {
  _CommonMessageFetch_fetchGlobalVisionPositionEstimate_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGlobalVisionPositionEstimate_result__isset;

class CommonMessageFetch_fetchGlobalVisionPositionEstimate_result {
 public:

  CommonMessageFetch_fetchGlobalVisionPositionEstimate_result() {
  }

  virtual ~CommonMessageFetch_fetchGlobalVisionPositionEstimate_result() throw() {}

  std::vector<GlobalVisionPositionEstimate>  success;

  _CommonMessageFetch_fetchGlobalVisionPositionEstimate_result__isset __isset;

  void __set_success(const std::vector<GlobalVisionPositionEstimate> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchGlobalVisionPositionEstimate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchGlobalVisionPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchGlobalVisionPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchGlobalVisionPositionEstimate_presult__isset {
  _CommonMessageFetch_fetchGlobalVisionPositionEstimate_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchGlobalVisionPositionEstimate_presult__isset;

class CommonMessageFetch_fetchGlobalVisionPositionEstimate_presult {
 public:


  virtual ~CommonMessageFetch_fetchGlobalVisionPositionEstimate_presult() throw() {}

  std::vector<GlobalVisionPositionEstimate> * success;

  _CommonMessageFetch_fetchGlobalVisionPositionEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchVisionPositionEstimate_args {
 public:

  CommonMessageFetch_fetchVisionPositionEstimate_args() {
  }

  virtual ~CommonMessageFetch_fetchVisionPositionEstimate_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchVisionPositionEstimate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchVisionPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchVisionPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchVisionPositionEstimate_pargs {
 public:


  virtual ~CommonMessageFetch_fetchVisionPositionEstimate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchVisionPositionEstimate_result__isset {
  _CommonMessageFetch_fetchVisionPositionEstimate_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchVisionPositionEstimate_result__isset;

class CommonMessageFetch_fetchVisionPositionEstimate_result {
 public:

  CommonMessageFetch_fetchVisionPositionEstimate_result() {
  }

  virtual ~CommonMessageFetch_fetchVisionPositionEstimate_result() throw() {}

  std::vector<VisionPositionEstimate>  success;

  _CommonMessageFetch_fetchVisionPositionEstimate_result__isset __isset;

  void __set_success(const std::vector<VisionPositionEstimate> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchVisionPositionEstimate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchVisionPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchVisionPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchVisionPositionEstimate_presult__isset {
  _CommonMessageFetch_fetchVisionPositionEstimate_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchVisionPositionEstimate_presult__isset;

class CommonMessageFetch_fetchVisionPositionEstimate_presult {
 public:


  virtual ~CommonMessageFetch_fetchVisionPositionEstimate_presult() throw() {}

  std::vector<VisionPositionEstimate> * success;

  _CommonMessageFetch_fetchVisionPositionEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchVisionSpeedEstimate_args {
 public:

  CommonMessageFetch_fetchVisionSpeedEstimate_args() {
  }

  virtual ~CommonMessageFetch_fetchVisionSpeedEstimate_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchVisionSpeedEstimate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchVisionSpeedEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchVisionSpeedEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchVisionSpeedEstimate_pargs {
 public:


  virtual ~CommonMessageFetch_fetchVisionSpeedEstimate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchVisionSpeedEstimate_result__isset {
  _CommonMessageFetch_fetchVisionSpeedEstimate_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchVisionSpeedEstimate_result__isset;

class CommonMessageFetch_fetchVisionSpeedEstimate_result {
 public:

  CommonMessageFetch_fetchVisionSpeedEstimate_result() {
  }

  virtual ~CommonMessageFetch_fetchVisionSpeedEstimate_result() throw() {}

  std::vector<VisionSpeedEstimate>  success;

  _CommonMessageFetch_fetchVisionSpeedEstimate_result__isset __isset;

  void __set_success(const std::vector<VisionSpeedEstimate> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchVisionSpeedEstimate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchVisionSpeedEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchVisionSpeedEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchVisionSpeedEstimate_presult__isset {
  _CommonMessageFetch_fetchVisionSpeedEstimate_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchVisionSpeedEstimate_presult__isset;

class CommonMessageFetch_fetchVisionSpeedEstimate_presult {
 public:


  virtual ~CommonMessageFetch_fetchVisionSpeedEstimate_presult() throw() {}

  std::vector<VisionSpeedEstimate> * success;

  _CommonMessageFetch_fetchVisionSpeedEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchViconPositionEstimate_args {
 public:

  CommonMessageFetch_fetchViconPositionEstimate_args() {
  }

  virtual ~CommonMessageFetch_fetchViconPositionEstimate_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchViconPositionEstimate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchViconPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchViconPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchViconPositionEstimate_pargs {
 public:


  virtual ~CommonMessageFetch_fetchViconPositionEstimate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchViconPositionEstimate_result__isset {
  _CommonMessageFetch_fetchViconPositionEstimate_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchViconPositionEstimate_result__isset;

class CommonMessageFetch_fetchViconPositionEstimate_result {
 public:

  CommonMessageFetch_fetchViconPositionEstimate_result() {
  }

  virtual ~CommonMessageFetch_fetchViconPositionEstimate_result() throw() {}

  std::vector<ViconPositionEstimate>  success;

  _CommonMessageFetch_fetchViconPositionEstimate_result__isset __isset;

  void __set_success(const std::vector<ViconPositionEstimate> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchViconPositionEstimate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchViconPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchViconPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchViconPositionEstimate_presult__isset {
  _CommonMessageFetch_fetchViconPositionEstimate_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchViconPositionEstimate_presult__isset;

class CommonMessageFetch_fetchViconPositionEstimate_presult {
 public:


  virtual ~CommonMessageFetch_fetchViconPositionEstimate_presult() throw() {}

  std::vector<ViconPositionEstimate> * success;

  _CommonMessageFetch_fetchViconPositionEstimate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchHighresImu_args {
 public:

  CommonMessageFetch_fetchHighresImu_args() {
  }

  virtual ~CommonMessageFetch_fetchHighresImu_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchHighresImu_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHighresImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHighresImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchHighresImu_pargs {
 public:


  virtual ~CommonMessageFetch_fetchHighresImu_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHighresImu_result__isset {
  _CommonMessageFetch_fetchHighresImu_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHighresImu_result__isset;

class CommonMessageFetch_fetchHighresImu_result {
 public:

  CommonMessageFetch_fetchHighresImu_result() {
  }

  virtual ~CommonMessageFetch_fetchHighresImu_result() throw() {}

  std::vector<HighresImu>  success;

  _CommonMessageFetch_fetchHighresImu_result__isset __isset;

  void __set_success(const std::vector<HighresImu> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchHighresImu_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchHighresImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchHighresImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchHighresImu_presult__isset {
  _CommonMessageFetch_fetchHighresImu_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchHighresImu_presult__isset;

class CommonMessageFetch_fetchHighresImu_presult {
 public:


  virtual ~CommonMessageFetch_fetchHighresImu_presult() throw() {}

  std::vector<HighresImu> * success;

  _CommonMessageFetch_fetchHighresImu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchOmnidirectionalFlow_args {
 public:

  CommonMessageFetch_fetchOmnidirectionalFlow_args() {
  }

  virtual ~CommonMessageFetch_fetchOmnidirectionalFlow_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchOmnidirectionalFlow_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchOmnidirectionalFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchOmnidirectionalFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchOmnidirectionalFlow_pargs {
 public:


  virtual ~CommonMessageFetch_fetchOmnidirectionalFlow_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchOmnidirectionalFlow_result__isset {
  _CommonMessageFetch_fetchOmnidirectionalFlow_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchOmnidirectionalFlow_result__isset;

class CommonMessageFetch_fetchOmnidirectionalFlow_result {
 public:

  CommonMessageFetch_fetchOmnidirectionalFlow_result() {
  }

  virtual ~CommonMessageFetch_fetchOmnidirectionalFlow_result() throw() {}

  std::vector<OmnidirectionalFlow>  success;

  _CommonMessageFetch_fetchOmnidirectionalFlow_result__isset __isset;

  void __set_success(const std::vector<OmnidirectionalFlow> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchOmnidirectionalFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchOmnidirectionalFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchOmnidirectionalFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchOmnidirectionalFlow_presult__isset {
  _CommonMessageFetch_fetchOmnidirectionalFlow_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchOmnidirectionalFlow_presult__isset;

class CommonMessageFetch_fetchOmnidirectionalFlow_presult {
 public:


  virtual ~CommonMessageFetch_fetchOmnidirectionalFlow_presult() throw() {}

  std::vector<OmnidirectionalFlow> * success;

  _CommonMessageFetch_fetchOmnidirectionalFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchFileTransferStart_args {
 public:

  CommonMessageFetch_fetchFileTransferStart_args() {
  }

  virtual ~CommonMessageFetch_fetchFileTransferStart_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchFileTransferStart_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchFileTransferStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchFileTransferStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchFileTransferStart_pargs {
 public:


  virtual ~CommonMessageFetch_fetchFileTransferStart_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchFileTransferStart_result__isset {
  _CommonMessageFetch_fetchFileTransferStart_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchFileTransferStart_result__isset;

class CommonMessageFetch_fetchFileTransferStart_result {
 public:

  CommonMessageFetch_fetchFileTransferStart_result() {
  }

  virtual ~CommonMessageFetch_fetchFileTransferStart_result() throw() {}

  std::vector<FileTransferStart>  success;

  _CommonMessageFetch_fetchFileTransferStart_result__isset __isset;

  void __set_success(const std::vector<FileTransferStart> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchFileTransferStart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchFileTransferStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchFileTransferStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchFileTransferStart_presult__isset {
  _CommonMessageFetch_fetchFileTransferStart_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchFileTransferStart_presult__isset;

class CommonMessageFetch_fetchFileTransferStart_presult {
 public:


  virtual ~CommonMessageFetch_fetchFileTransferStart_presult() throw() {}

  std::vector<FileTransferStart> * success;

  _CommonMessageFetch_fetchFileTransferStart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchFileTransferDirList_args {
 public:

  CommonMessageFetch_fetchFileTransferDirList_args() {
  }

  virtual ~CommonMessageFetch_fetchFileTransferDirList_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchFileTransferDirList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchFileTransferDirList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchFileTransferDirList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchFileTransferDirList_pargs {
 public:


  virtual ~CommonMessageFetch_fetchFileTransferDirList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchFileTransferDirList_result__isset {
  _CommonMessageFetch_fetchFileTransferDirList_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchFileTransferDirList_result__isset;

class CommonMessageFetch_fetchFileTransferDirList_result {
 public:

  CommonMessageFetch_fetchFileTransferDirList_result() {
  }

  virtual ~CommonMessageFetch_fetchFileTransferDirList_result() throw() {}

  std::vector<FileTransferDirList>  success;

  _CommonMessageFetch_fetchFileTransferDirList_result__isset __isset;

  void __set_success(const std::vector<FileTransferDirList> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchFileTransferDirList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchFileTransferDirList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchFileTransferDirList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchFileTransferDirList_presult__isset {
  _CommonMessageFetch_fetchFileTransferDirList_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchFileTransferDirList_presult__isset;

class CommonMessageFetch_fetchFileTransferDirList_presult {
 public:


  virtual ~CommonMessageFetch_fetchFileTransferDirList_presult() throw() {}

  std::vector<FileTransferDirList> * success;

  _CommonMessageFetch_fetchFileTransferDirList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchFileTransferRes_args {
 public:

  CommonMessageFetch_fetchFileTransferRes_args() {
  }

  virtual ~CommonMessageFetch_fetchFileTransferRes_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchFileTransferRes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchFileTransferRes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchFileTransferRes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchFileTransferRes_pargs {
 public:


  virtual ~CommonMessageFetch_fetchFileTransferRes_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchFileTransferRes_result__isset {
  _CommonMessageFetch_fetchFileTransferRes_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchFileTransferRes_result__isset;

class CommonMessageFetch_fetchFileTransferRes_result {
 public:

  CommonMessageFetch_fetchFileTransferRes_result() {
  }

  virtual ~CommonMessageFetch_fetchFileTransferRes_result() throw() {}

  std::vector<FileTransferRes>  success;

  _CommonMessageFetch_fetchFileTransferRes_result__isset __isset;

  void __set_success(const std::vector<FileTransferRes> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchFileTransferRes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchFileTransferRes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchFileTransferRes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchFileTransferRes_presult__isset {
  _CommonMessageFetch_fetchFileTransferRes_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchFileTransferRes_presult__isset;

class CommonMessageFetch_fetchFileTransferRes_presult {
 public:


  virtual ~CommonMessageFetch_fetchFileTransferRes_presult() throw() {}

  std::vector<FileTransferRes> * success;

  _CommonMessageFetch_fetchFileTransferRes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchBatteryStatus_args {
 public:

  CommonMessageFetch_fetchBatteryStatus_args() {
  }

  virtual ~CommonMessageFetch_fetchBatteryStatus_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchBatteryStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchBatteryStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchBatteryStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchBatteryStatus_pargs {
 public:


  virtual ~CommonMessageFetch_fetchBatteryStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchBatteryStatus_result__isset {
  _CommonMessageFetch_fetchBatteryStatus_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchBatteryStatus_result__isset;

class CommonMessageFetch_fetchBatteryStatus_result {
 public:

  CommonMessageFetch_fetchBatteryStatus_result() {
  }

  virtual ~CommonMessageFetch_fetchBatteryStatus_result() throw() {}

  std::vector<BatteryStatus>  success;

  _CommonMessageFetch_fetchBatteryStatus_result__isset __isset;

  void __set_success(const std::vector<BatteryStatus> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchBatteryStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchBatteryStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchBatteryStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchBatteryStatus_presult__isset {
  _CommonMessageFetch_fetchBatteryStatus_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchBatteryStatus_presult__isset;

class CommonMessageFetch_fetchBatteryStatus_presult {
 public:


  virtual ~CommonMessageFetch_fetchBatteryStatus_presult() throw() {}

  std::vector<BatteryStatus> * success;

  _CommonMessageFetch_fetchBatteryStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetpoint8dof_args {
 public:

  CommonMessageFetch_fetchSetpoint8dof_args() {
  }

  virtual ~CommonMessageFetch_fetchSetpoint8dof_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetpoint8dof_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetpoint8dof_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetpoint8dof_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetpoint8dof_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetpoint8dof_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetpoint8dof_result__isset {
  _CommonMessageFetch_fetchSetpoint8dof_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetpoint8dof_result__isset;

class CommonMessageFetch_fetchSetpoint8dof_result {
 public:

  CommonMessageFetch_fetchSetpoint8dof_result() {
  }

  virtual ~CommonMessageFetch_fetchSetpoint8dof_result() throw() {}

  std::vector<Setpoint8dof>  success;

  _CommonMessageFetch_fetchSetpoint8dof_result__isset __isset;

  void __set_success(const std::vector<Setpoint8dof> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetpoint8dof_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetpoint8dof_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetpoint8dof_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetpoint8dof_presult__isset {
  _CommonMessageFetch_fetchSetpoint8dof_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetpoint8dof_presult__isset;

class CommonMessageFetch_fetchSetpoint8dof_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetpoint8dof_presult() throw() {}

  std::vector<Setpoint8dof> * success;

  _CommonMessageFetch_fetchSetpoint8dof_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchSetpoint6dof_args {
 public:

  CommonMessageFetch_fetchSetpoint6dof_args() {
  }

  virtual ~CommonMessageFetch_fetchSetpoint6dof_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchSetpoint6dof_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetpoint6dof_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetpoint6dof_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchSetpoint6dof_pargs {
 public:


  virtual ~CommonMessageFetch_fetchSetpoint6dof_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetpoint6dof_result__isset {
  _CommonMessageFetch_fetchSetpoint6dof_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetpoint6dof_result__isset;

class CommonMessageFetch_fetchSetpoint6dof_result {
 public:

  CommonMessageFetch_fetchSetpoint6dof_result() {
  }

  virtual ~CommonMessageFetch_fetchSetpoint6dof_result() throw() {}

  std::vector<Setpoint6dof>  success;

  _CommonMessageFetch_fetchSetpoint6dof_result__isset __isset;

  void __set_success(const std::vector<Setpoint6dof> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchSetpoint6dof_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchSetpoint6dof_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchSetpoint6dof_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchSetpoint6dof_presult__isset {
  _CommonMessageFetch_fetchSetpoint6dof_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchSetpoint6dof_presult__isset;

class CommonMessageFetch_fetchSetpoint6dof_presult {
 public:


  virtual ~CommonMessageFetch_fetchSetpoint6dof_presult() throw() {}

  std::vector<Setpoint6dof> * success;

  _CommonMessageFetch_fetchSetpoint6dof_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchMemoryVect_args {
 public:

  CommonMessageFetch_fetchMemoryVect_args() {
  }

  virtual ~CommonMessageFetch_fetchMemoryVect_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchMemoryVect_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMemoryVect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMemoryVect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchMemoryVect_pargs {
 public:


  virtual ~CommonMessageFetch_fetchMemoryVect_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMemoryVect_result__isset {
  _CommonMessageFetch_fetchMemoryVect_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMemoryVect_result__isset;

class CommonMessageFetch_fetchMemoryVect_result {
 public:

  CommonMessageFetch_fetchMemoryVect_result() {
  }

  virtual ~CommonMessageFetch_fetchMemoryVect_result() throw() {}

  std::vector<MemoryVect>  success;

  _CommonMessageFetch_fetchMemoryVect_result__isset __isset;

  void __set_success(const std::vector<MemoryVect> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchMemoryVect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchMemoryVect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchMemoryVect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchMemoryVect_presult__isset {
  _CommonMessageFetch_fetchMemoryVect_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchMemoryVect_presult__isset;

class CommonMessageFetch_fetchMemoryVect_presult {
 public:


  virtual ~CommonMessageFetch_fetchMemoryVect_presult() throw() {}

  std::vector<MemoryVect> * success;

  _CommonMessageFetch_fetchMemoryVect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchDebugVect_args {
 public:

  CommonMessageFetch_fetchDebugVect_args() {
  }

  virtual ~CommonMessageFetch_fetchDebugVect_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchDebugVect_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchDebugVect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchDebugVect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchDebugVect_pargs {
 public:


  virtual ~CommonMessageFetch_fetchDebugVect_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchDebugVect_result__isset {
  _CommonMessageFetch_fetchDebugVect_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchDebugVect_result__isset;

class CommonMessageFetch_fetchDebugVect_result {
 public:

  CommonMessageFetch_fetchDebugVect_result() {
  }

  virtual ~CommonMessageFetch_fetchDebugVect_result() throw() {}

  std::vector<DebugVect>  success;

  _CommonMessageFetch_fetchDebugVect_result__isset __isset;

  void __set_success(const std::vector<DebugVect> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchDebugVect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchDebugVect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchDebugVect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchDebugVect_presult__isset {
  _CommonMessageFetch_fetchDebugVect_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchDebugVect_presult__isset;

class CommonMessageFetch_fetchDebugVect_presult {
 public:


  virtual ~CommonMessageFetch_fetchDebugVect_presult() throw() {}

  std::vector<DebugVect> * success;

  _CommonMessageFetch_fetchDebugVect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchNamedValueFloat_args {
 public:

  CommonMessageFetch_fetchNamedValueFloat_args() {
  }

  virtual ~CommonMessageFetch_fetchNamedValueFloat_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchNamedValueFloat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchNamedValueFloat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchNamedValueFloat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchNamedValueFloat_pargs {
 public:


  virtual ~CommonMessageFetch_fetchNamedValueFloat_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchNamedValueFloat_result__isset {
  _CommonMessageFetch_fetchNamedValueFloat_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchNamedValueFloat_result__isset;

class CommonMessageFetch_fetchNamedValueFloat_result {
 public:

  CommonMessageFetch_fetchNamedValueFloat_result() {
  }

  virtual ~CommonMessageFetch_fetchNamedValueFloat_result() throw() {}

  std::vector<NamedValueFloat>  success;

  _CommonMessageFetch_fetchNamedValueFloat_result__isset __isset;

  void __set_success(const std::vector<NamedValueFloat> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchNamedValueFloat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchNamedValueFloat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchNamedValueFloat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchNamedValueFloat_presult__isset {
  _CommonMessageFetch_fetchNamedValueFloat_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchNamedValueFloat_presult__isset;

class CommonMessageFetch_fetchNamedValueFloat_presult {
 public:


  virtual ~CommonMessageFetch_fetchNamedValueFloat_presult() throw() {}

  std::vector<NamedValueFloat> * success;

  _CommonMessageFetch_fetchNamedValueFloat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchNamedValueInt_args {
 public:

  CommonMessageFetch_fetchNamedValueInt_args() {
  }

  virtual ~CommonMessageFetch_fetchNamedValueInt_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchNamedValueInt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchNamedValueInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchNamedValueInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchNamedValueInt_pargs {
 public:


  virtual ~CommonMessageFetch_fetchNamedValueInt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchNamedValueInt_result__isset {
  _CommonMessageFetch_fetchNamedValueInt_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchNamedValueInt_result__isset;

class CommonMessageFetch_fetchNamedValueInt_result {
 public:

  CommonMessageFetch_fetchNamedValueInt_result() {
  }

  virtual ~CommonMessageFetch_fetchNamedValueInt_result() throw() {}

  std::vector<NamedValueInt>  success;

  _CommonMessageFetch_fetchNamedValueInt_result__isset __isset;

  void __set_success(const std::vector<NamedValueInt> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchNamedValueInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchNamedValueInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchNamedValueInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchNamedValueInt_presult__isset {
  _CommonMessageFetch_fetchNamedValueInt_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchNamedValueInt_presult__isset;

class CommonMessageFetch_fetchNamedValueInt_presult {
 public:


  virtual ~CommonMessageFetch_fetchNamedValueInt_presult() throw() {}

  std::vector<NamedValueInt> * success;

  _CommonMessageFetch_fetchNamedValueInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchStatustext_args {
 public:

  CommonMessageFetch_fetchStatustext_args() {
  }

  virtual ~CommonMessageFetch_fetchStatustext_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchStatustext_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchStatustext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchStatustext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchStatustext_pargs {
 public:


  virtual ~CommonMessageFetch_fetchStatustext_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchStatustext_result__isset {
  _CommonMessageFetch_fetchStatustext_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchStatustext_result__isset;

class CommonMessageFetch_fetchStatustext_result {
 public:

  CommonMessageFetch_fetchStatustext_result() {
  }

  virtual ~CommonMessageFetch_fetchStatustext_result() throw() {}

  std::vector<Statustext>  success;

  _CommonMessageFetch_fetchStatustext_result__isset __isset;

  void __set_success(const std::vector<Statustext> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchStatustext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchStatustext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchStatustext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchStatustext_presult__isset {
  _CommonMessageFetch_fetchStatustext_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchStatustext_presult__isset;

class CommonMessageFetch_fetchStatustext_presult {
 public:


  virtual ~CommonMessageFetch_fetchStatustext_presult() throw() {}

  std::vector<Statustext> * success;

  _CommonMessageFetch_fetchStatustext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CommonMessageFetch_fetchDebug_args {
 public:

  CommonMessageFetch_fetchDebug_args() {
  }

  virtual ~CommonMessageFetch_fetchDebug_args() throw() {}


  bool operator == (const CommonMessageFetch_fetchDebug_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchDebug_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchDebug_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetch_fetchDebug_pargs {
 public:


  virtual ~CommonMessageFetch_fetchDebug_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchDebug_result__isset {
  _CommonMessageFetch_fetchDebug_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchDebug_result__isset;

class CommonMessageFetch_fetchDebug_result {
 public:

  CommonMessageFetch_fetchDebug_result() {
  }

  virtual ~CommonMessageFetch_fetchDebug_result() throw() {}

  std::vector<Debug>  success;

  _CommonMessageFetch_fetchDebug_result__isset __isset;

  void __set_success(const std::vector<Debug> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetch_fetchDebug_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetch_fetchDebug_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetch_fetchDebug_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetch_fetchDebug_presult__isset {
  _CommonMessageFetch_fetchDebug_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetch_fetchDebug_presult__isset;

class CommonMessageFetch_fetchDebug_presult {
 public:


  virtual ~CommonMessageFetch_fetchDebug_presult() throw() {}

  std::vector<Debug> * success;

  _CommonMessageFetch_fetchDebug_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CommonMessageFetchClient : virtual public CommonMessageFetchIf {
 public:
  CommonMessageFetchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CommonMessageFetchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return);
  void send_availableMessages();
  void recv_availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return);
  void fetchHeartbeat(std::vector<Heartbeat> & _return);
  void send_fetchHeartbeat();
  void recv_fetchHeartbeat(std::vector<Heartbeat> & _return);
  void fetchSysStatus(std::vector<SysStatus> & _return);
  void send_fetchSysStatus();
  void recv_fetchSysStatus(std::vector<SysStatus> & _return);
  void fetchSystemTime(std::vector<SystemTime> & _return);
  void send_fetchSystemTime();
  void recv_fetchSystemTime(std::vector<SystemTime> & _return);
  void fetchPing(std::vector<Ping> & _return);
  void send_fetchPing();
  void recv_fetchPing(std::vector<Ping> & _return);
  void fetchChangeOperatorControl(std::vector<ChangeOperatorControl> & _return);
  void send_fetchChangeOperatorControl();
  void recv_fetchChangeOperatorControl(std::vector<ChangeOperatorControl> & _return);
  void fetchChangeOperatorControlAck(std::vector<ChangeOperatorControlAck> & _return);
  void send_fetchChangeOperatorControlAck();
  void recv_fetchChangeOperatorControlAck(std::vector<ChangeOperatorControlAck> & _return);
  void fetchAuthKey(std::vector<AuthKey> & _return);
  void send_fetchAuthKey();
  void recv_fetchAuthKey(std::vector<AuthKey> & _return);
  void fetchSetMode(std::vector<SetMode> & _return);
  void send_fetchSetMode();
  void recv_fetchSetMode(std::vector<SetMode> & _return);
  void fetchParamRequestRead(std::vector<ParamRequestRead> & _return);
  void send_fetchParamRequestRead();
  void recv_fetchParamRequestRead(std::vector<ParamRequestRead> & _return);
  void fetchParamRequestList(std::vector<ParamRequestList> & _return);
  void send_fetchParamRequestList();
  void recv_fetchParamRequestList(std::vector<ParamRequestList> & _return);
  void fetchParamValue(std::vector<ParamValue> & _return);
  void send_fetchParamValue();
  void recv_fetchParamValue(std::vector<ParamValue> & _return);
  void fetchParamSet(std::vector<ParamSet> & _return);
  void send_fetchParamSet();
  void recv_fetchParamSet(std::vector<ParamSet> & _return);
  void fetchGpsRawInt(std::vector<GpsRawInt> & _return);
  void send_fetchGpsRawInt();
  void recv_fetchGpsRawInt(std::vector<GpsRawInt> & _return);
  void fetchGpsStatus(std::vector<GpsStatus> & _return);
  void send_fetchGpsStatus();
  void recv_fetchGpsStatus(std::vector<GpsStatus> & _return);
  void fetchScaledImu(std::vector<ScaledImu> & _return);
  void send_fetchScaledImu();
  void recv_fetchScaledImu(std::vector<ScaledImu> & _return);
  void fetchRawImu(std::vector<RawImu> & _return);
  void send_fetchRawImu();
  void recv_fetchRawImu(std::vector<RawImu> & _return);
  void fetchRawPressure(std::vector<RawPressure> & _return);
  void send_fetchRawPressure();
  void recv_fetchRawPressure(std::vector<RawPressure> & _return);
  void fetchScaledPressure(std::vector<ScaledPressure> & _return);
  void send_fetchScaledPressure();
  void recv_fetchScaledPressure(std::vector<ScaledPressure> & _return);
  void fetchAttitude(std::vector<Attitude> & _return);
  void send_fetchAttitude();
  void recv_fetchAttitude(std::vector<Attitude> & _return);
  void fetchAttitudeQuaternion(std::vector<AttitudeQuaternion> & _return);
  void send_fetchAttitudeQuaternion();
  void recv_fetchAttitudeQuaternion(std::vector<AttitudeQuaternion> & _return);
  void fetchLocalPositionNed(std::vector<LocalPositionNed> & _return);
  void send_fetchLocalPositionNed();
  void recv_fetchLocalPositionNed(std::vector<LocalPositionNed> & _return);
  void fetchGlobalPositionInt(std::vector<GlobalPositionInt> & _return);
  void send_fetchGlobalPositionInt();
  void recv_fetchGlobalPositionInt(std::vector<GlobalPositionInt> & _return);
  void fetchRcChannelsScaled(std::vector<RcChannelsScaled> & _return);
  void send_fetchRcChannelsScaled();
  void recv_fetchRcChannelsScaled(std::vector<RcChannelsScaled> & _return);
  void fetchRcChannelsRaw(std::vector<RcChannelsRaw> & _return);
  void send_fetchRcChannelsRaw();
  void recv_fetchRcChannelsRaw(std::vector<RcChannelsRaw> & _return);
  void fetchServoOutputRaw(std::vector<ServoOutputRaw> & _return);
  void send_fetchServoOutputRaw();
  void recv_fetchServoOutputRaw(std::vector<ServoOutputRaw> & _return);
  void fetchMissionRequestPartialList(std::vector<MissionRequestPartialList> & _return);
  void send_fetchMissionRequestPartialList();
  void recv_fetchMissionRequestPartialList(std::vector<MissionRequestPartialList> & _return);
  void fetchMissionWritePartialList(std::vector<MissionWritePartialList> & _return);
  void send_fetchMissionWritePartialList();
  void recv_fetchMissionWritePartialList(std::vector<MissionWritePartialList> & _return);
  void fetchMissionItem(std::vector<MissionItem> & _return);
  void send_fetchMissionItem();
  void recv_fetchMissionItem(std::vector<MissionItem> & _return);
  void fetchMissionRequest(std::vector<MissionRequest> & _return);
  void send_fetchMissionRequest();
  void recv_fetchMissionRequest(std::vector<MissionRequest> & _return);
  void fetchMissionSetCurrent(std::vector<MissionSetCurrent> & _return);
  void send_fetchMissionSetCurrent();
  void recv_fetchMissionSetCurrent(std::vector<MissionSetCurrent> & _return);
  void fetchMissionCurrent(std::vector<MissionCurrent> & _return);
  void send_fetchMissionCurrent();
  void recv_fetchMissionCurrent(std::vector<MissionCurrent> & _return);
  void fetchMissionRequestList(std::vector<MissionRequestList> & _return);
  void send_fetchMissionRequestList();
  void recv_fetchMissionRequestList(std::vector<MissionRequestList> & _return);
  void fetchMissionCount(std::vector<MissionCount> & _return);
  void send_fetchMissionCount();
  void recv_fetchMissionCount(std::vector<MissionCount> & _return);
  void fetchMissionClearAll(std::vector<MissionClearAll> & _return);
  void send_fetchMissionClearAll();
  void recv_fetchMissionClearAll(std::vector<MissionClearAll> & _return);
  void fetchMissionItemReached(std::vector<MissionItemReached> & _return);
  void send_fetchMissionItemReached();
  void recv_fetchMissionItemReached(std::vector<MissionItemReached> & _return);
  void fetchMissionAck(std::vector<MissionAck> & _return);
  void send_fetchMissionAck();
  void recv_fetchMissionAck(std::vector<MissionAck> & _return);
  void fetchSetGpsGlobalOrigin(std::vector<SetGpsGlobalOrigin> & _return);
  void send_fetchSetGpsGlobalOrigin();
  void recv_fetchSetGpsGlobalOrigin(std::vector<SetGpsGlobalOrigin> & _return);
  void fetchGpsGlobalOrigin(std::vector<GpsGlobalOrigin> & _return);
  void send_fetchGpsGlobalOrigin();
  void recv_fetchGpsGlobalOrigin(std::vector<GpsGlobalOrigin> & _return);
  void fetchSetLocalPositionSetpoint(std::vector<SetLocalPositionSetpoint> & _return);
  void send_fetchSetLocalPositionSetpoint();
  void recv_fetchSetLocalPositionSetpoint(std::vector<SetLocalPositionSetpoint> & _return);
  void fetchLocalPositionSetpoint(std::vector<LocalPositionSetpoint> & _return);
  void send_fetchLocalPositionSetpoint();
  void recv_fetchLocalPositionSetpoint(std::vector<LocalPositionSetpoint> & _return);
  void fetchGlobalPositionSetpointInt(std::vector<GlobalPositionSetpointInt> & _return);
  void send_fetchGlobalPositionSetpointInt();
  void recv_fetchGlobalPositionSetpointInt(std::vector<GlobalPositionSetpointInt> & _return);
  void fetchSetGlobalPositionSetpointInt(std::vector<SetGlobalPositionSetpointInt> & _return);
  void send_fetchSetGlobalPositionSetpointInt();
  void recv_fetchSetGlobalPositionSetpointInt(std::vector<SetGlobalPositionSetpointInt> & _return);
  void fetchSafetySetAllowedArea(std::vector<SafetySetAllowedArea> & _return);
  void send_fetchSafetySetAllowedArea();
  void recv_fetchSafetySetAllowedArea(std::vector<SafetySetAllowedArea> & _return);
  void fetchSafetyAllowedArea(std::vector<SafetyAllowedArea> & _return);
  void send_fetchSafetyAllowedArea();
  void recv_fetchSafetyAllowedArea(std::vector<SafetyAllowedArea> & _return);
  void fetchSetRollPitchYawThrust(std::vector<SetRollPitchYawThrust> & _return);
  void send_fetchSetRollPitchYawThrust();
  void recv_fetchSetRollPitchYawThrust(std::vector<SetRollPitchYawThrust> & _return);
  void fetchSetRollPitchYawSpeedThrust(std::vector<SetRollPitchYawSpeedThrust> & _return);
  void send_fetchSetRollPitchYawSpeedThrust();
  void recv_fetchSetRollPitchYawSpeedThrust(std::vector<SetRollPitchYawSpeedThrust> & _return);
  void fetchRollPitchYawThrustSetpoint(std::vector<RollPitchYawThrustSetpoint> & _return);
  void send_fetchRollPitchYawThrustSetpoint();
  void recv_fetchRollPitchYawThrustSetpoint(std::vector<RollPitchYawThrustSetpoint> & _return);
  void fetchRollPitchYawSpeedThrustSetpoint(std::vector<RollPitchYawSpeedThrustSetpoint> & _return);
  void send_fetchRollPitchYawSpeedThrustSetpoint();
  void recv_fetchRollPitchYawSpeedThrustSetpoint(std::vector<RollPitchYawSpeedThrustSetpoint> & _return);
  void fetchSetQuadMotorsSetpoint(std::vector<SetQuadMotorsSetpoint> & _return);
  void send_fetchSetQuadMotorsSetpoint();
  void recv_fetchSetQuadMotorsSetpoint(std::vector<SetQuadMotorsSetpoint> & _return);
  void fetchSetQuadSwarmRollPitchYawThrust(std::vector<SetQuadSwarmRollPitchYawThrust> & _return);
  void send_fetchSetQuadSwarmRollPitchYawThrust();
  void recv_fetchSetQuadSwarmRollPitchYawThrust(std::vector<SetQuadSwarmRollPitchYawThrust> & _return);
  void fetchNavControllerOutput(std::vector<NavControllerOutput> & _return);
  void send_fetchNavControllerOutput();
  void recv_fetchNavControllerOutput(std::vector<NavControllerOutput> & _return);
  void fetchSetQuadSwarmLedRollPitchYawThrust(std::vector<SetQuadSwarmLedRollPitchYawThrust> & _return);
  void send_fetchSetQuadSwarmLedRollPitchYawThrust();
  void recv_fetchSetQuadSwarmLedRollPitchYawThrust(std::vector<SetQuadSwarmLedRollPitchYawThrust> & _return);
  void fetchStateCorrection(std::vector<StateCorrection> & _return);
  void send_fetchStateCorrection();
  void recv_fetchStateCorrection(std::vector<StateCorrection> & _return);
  void fetchRequestDataStream(std::vector<RequestDataStream> & _return);
  void send_fetchRequestDataStream();
  void recv_fetchRequestDataStream(std::vector<RequestDataStream> & _return);
  void fetchDataStream(std::vector<DataStream> & _return);
  void send_fetchDataStream();
  void recv_fetchDataStream(std::vector<DataStream> & _return);
  void fetchManualControl(std::vector<ManualControl> & _return);
  void send_fetchManualControl();
  void recv_fetchManualControl(std::vector<ManualControl> & _return);
  void fetchRcChannelsOverride(std::vector<RcChannelsOverride> & _return);
  void send_fetchRcChannelsOverride();
  void recv_fetchRcChannelsOverride(std::vector<RcChannelsOverride> & _return);
  void fetchVfrHud(std::vector<VfrHud> & _return);
  void send_fetchVfrHud();
  void recv_fetchVfrHud(std::vector<VfrHud> & _return);
  void fetchCommandLong(std::vector<CommandLong> & _return);
  void send_fetchCommandLong();
  void recv_fetchCommandLong(std::vector<CommandLong> & _return);
  void fetchCommandAck(std::vector<CommandAck> & _return);
  void send_fetchCommandAck();
  void recv_fetchCommandAck(std::vector<CommandAck> & _return);
  void fetchRollPitchYawRatesThrustSetpoint(std::vector<RollPitchYawRatesThrustSetpoint> & _return);
  void send_fetchRollPitchYawRatesThrustSetpoint();
  void recv_fetchRollPitchYawRatesThrustSetpoint(std::vector<RollPitchYawRatesThrustSetpoint> & _return);
  void fetchManualSetpoint(std::vector<ManualSetpoint> & _return);
  void send_fetchManualSetpoint();
  void recv_fetchManualSetpoint(std::vector<ManualSetpoint> & _return);
  void fetchLocalPositionNedSystemGlobalOffset(std::vector<LocalPositionNedSystemGlobalOffset> & _return);
  void send_fetchLocalPositionNedSystemGlobalOffset();
  void recv_fetchLocalPositionNedSystemGlobalOffset(std::vector<LocalPositionNedSystemGlobalOffset> & _return);
  void fetchHilState(std::vector<HilState> & _return);
  void send_fetchHilState();
  void recv_fetchHilState(std::vector<HilState> & _return);
  void fetchHilControls(std::vector<HilControls> & _return);
  void send_fetchHilControls();
  void recv_fetchHilControls(std::vector<HilControls> & _return);
  void fetchHilRcInputsRaw(std::vector<HilRcInputsRaw> & _return);
  void send_fetchHilRcInputsRaw();
  void recv_fetchHilRcInputsRaw(std::vector<HilRcInputsRaw> & _return);
  void fetchOpticalFlow(std::vector<OpticalFlow> & _return);
  void send_fetchOpticalFlow();
  void recv_fetchOpticalFlow(std::vector<OpticalFlow> & _return);
  void fetchGlobalVisionPositionEstimate(std::vector<GlobalVisionPositionEstimate> & _return);
  void send_fetchGlobalVisionPositionEstimate();
  void recv_fetchGlobalVisionPositionEstimate(std::vector<GlobalVisionPositionEstimate> & _return);
  void fetchVisionPositionEstimate(std::vector<VisionPositionEstimate> & _return);
  void send_fetchVisionPositionEstimate();
  void recv_fetchVisionPositionEstimate(std::vector<VisionPositionEstimate> & _return);
  void fetchVisionSpeedEstimate(std::vector<VisionSpeedEstimate> & _return);
  void send_fetchVisionSpeedEstimate();
  void recv_fetchVisionSpeedEstimate(std::vector<VisionSpeedEstimate> & _return);
  void fetchViconPositionEstimate(std::vector<ViconPositionEstimate> & _return);
  void send_fetchViconPositionEstimate();
  void recv_fetchViconPositionEstimate(std::vector<ViconPositionEstimate> & _return);
  void fetchHighresImu(std::vector<HighresImu> & _return);
  void send_fetchHighresImu();
  void recv_fetchHighresImu(std::vector<HighresImu> & _return);
  void fetchOmnidirectionalFlow(std::vector<OmnidirectionalFlow> & _return);
  void send_fetchOmnidirectionalFlow();
  void recv_fetchOmnidirectionalFlow(std::vector<OmnidirectionalFlow> & _return);
  void fetchFileTransferStart(std::vector<FileTransferStart> & _return);
  void send_fetchFileTransferStart();
  void recv_fetchFileTransferStart(std::vector<FileTransferStart> & _return);
  void fetchFileTransferDirList(std::vector<FileTransferDirList> & _return);
  void send_fetchFileTransferDirList();
  void recv_fetchFileTransferDirList(std::vector<FileTransferDirList> & _return);
  void fetchFileTransferRes(std::vector<FileTransferRes> & _return);
  void send_fetchFileTransferRes();
  void recv_fetchFileTransferRes(std::vector<FileTransferRes> & _return);
  void fetchBatteryStatus(std::vector<BatteryStatus> & _return);
  void send_fetchBatteryStatus();
  void recv_fetchBatteryStatus(std::vector<BatteryStatus> & _return);
  void fetchSetpoint8dof(std::vector<Setpoint8dof> & _return);
  void send_fetchSetpoint8dof();
  void recv_fetchSetpoint8dof(std::vector<Setpoint8dof> & _return);
  void fetchSetpoint6dof(std::vector<Setpoint6dof> & _return);
  void send_fetchSetpoint6dof();
  void recv_fetchSetpoint6dof(std::vector<Setpoint6dof> & _return);
  void fetchMemoryVect(std::vector<MemoryVect> & _return);
  void send_fetchMemoryVect();
  void recv_fetchMemoryVect(std::vector<MemoryVect> & _return);
  void fetchDebugVect(std::vector<DebugVect> & _return);
  void send_fetchDebugVect();
  void recv_fetchDebugVect(std::vector<DebugVect> & _return);
  void fetchNamedValueFloat(std::vector<NamedValueFloat> & _return);
  void send_fetchNamedValueFloat();
  void recv_fetchNamedValueFloat(std::vector<NamedValueFloat> & _return);
  void fetchNamedValueInt(std::vector<NamedValueInt> & _return);
  void send_fetchNamedValueInt();
  void recv_fetchNamedValueInt(std::vector<NamedValueInt> & _return);
  void fetchStatustext(std::vector<Statustext> & _return);
  void send_fetchStatustext();
  void recv_fetchStatustext(std::vector<Statustext> & _return);
  void fetchDebug(std::vector<Debug> & _return);
  void send_fetchDebug();
  void recv_fetchDebug(std::vector<Debug> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CommonMessageFetchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CommonMessageFetchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CommonMessageFetchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_availableMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSysStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSystemTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchPing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchChangeOperatorControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchChangeOperatorControlAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAuthKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamRequestRead(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamRequestList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGpsRawInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGpsStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchScaledImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRawImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRawPressure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchScaledPressure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAttitude(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAttitudeQuaternion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLocalPositionNed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGlobalPositionInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRcChannelsScaled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRcChannelsRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchServoOutputRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionRequestPartialList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionWritePartialList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionSetCurrent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionCurrent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionRequestList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionClearAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionItemReached(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetGpsGlobalOrigin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGpsGlobalOrigin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetLocalPositionSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLocalPositionSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGlobalPositionSetpointInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetGlobalPositionSetpointInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSafetySetAllowedArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSafetyAllowedArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetRollPitchYawSpeedThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRollPitchYawThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRollPitchYawSpeedThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetQuadMotorsSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetQuadSwarmRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchNavControllerOutput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetQuadSwarmLedRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchStateCorrection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRequestDataStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDataStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchManualControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRcChannelsOverride(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchVfrHud(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchCommandLong(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchCommandAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRollPitchYawRatesThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchManualSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLocalPositionNedSystemGlobalOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHilState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHilControls(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHilRcInputsRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOpticalFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGlobalVisionPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchVisionPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchVisionSpeedEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchViconPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHighresImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOmnidirectionalFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFileTransferStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFileTransferDirList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFileTransferRes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchBatteryStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetpoint8dof(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetpoint6dof(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMemoryVect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDebugVect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchNamedValueFloat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchNamedValueInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchStatustext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDebug(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CommonMessageFetchProcessor(boost::shared_ptr<CommonMessageFetchIf> iface) :
    iface_(iface) {
    processMap_["availableMessages"] = &CommonMessageFetchProcessor::process_availableMessages;
    processMap_["fetchHeartbeat"] = &CommonMessageFetchProcessor::process_fetchHeartbeat;
    processMap_["fetchSysStatus"] = &CommonMessageFetchProcessor::process_fetchSysStatus;
    processMap_["fetchSystemTime"] = &CommonMessageFetchProcessor::process_fetchSystemTime;
    processMap_["fetchPing"] = &CommonMessageFetchProcessor::process_fetchPing;
    processMap_["fetchChangeOperatorControl"] = &CommonMessageFetchProcessor::process_fetchChangeOperatorControl;
    processMap_["fetchChangeOperatorControlAck"] = &CommonMessageFetchProcessor::process_fetchChangeOperatorControlAck;
    processMap_["fetchAuthKey"] = &CommonMessageFetchProcessor::process_fetchAuthKey;
    processMap_["fetchSetMode"] = &CommonMessageFetchProcessor::process_fetchSetMode;
    processMap_["fetchParamRequestRead"] = &CommonMessageFetchProcessor::process_fetchParamRequestRead;
    processMap_["fetchParamRequestList"] = &CommonMessageFetchProcessor::process_fetchParamRequestList;
    processMap_["fetchParamValue"] = &CommonMessageFetchProcessor::process_fetchParamValue;
    processMap_["fetchParamSet"] = &CommonMessageFetchProcessor::process_fetchParamSet;
    processMap_["fetchGpsRawInt"] = &CommonMessageFetchProcessor::process_fetchGpsRawInt;
    processMap_["fetchGpsStatus"] = &CommonMessageFetchProcessor::process_fetchGpsStatus;
    processMap_["fetchScaledImu"] = &CommonMessageFetchProcessor::process_fetchScaledImu;
    processMap_["fetchRawImu"] = &CommonMessageFetchProcessor::process_fetchRawImu;
    processMap_["fetchRawPressure"] = &CommonMessageFetchProcessor::process_fetchRawPressure;
    processMap_["fetchScaledPressure"] = &CommonMessageFetchProcessor::process_fetchScaledPressure;
    processMap_["fetchAttitude"] = &CommonMessageFetchProcessor::process_fetchAttitude;
    processMap_["fetchAttitudeQuaternion"] = &CommonMessageFetchProcessor::process_fetchAttitudeQuaternion;
    processMap_["fetchLocalPositionNed"] = &CommonMessageFetchProcessor::process_fetchLocalPositionNed;
    processMap_["fetchGlobalPositionInt"] = &CommonMessageFetchProcessor::process_fetchGlobalPositionInt;
    processMap_["fetchRcChannelsScaled"] = &CommonMessageFetchProcessor::process_fetchRcChannelsScaled;
    processMap_["fetchRcChannelsRaw"] = &CommonMessageFetchProcessor::process_fetchRcChannelsRaw;
    processMap_["fetchServoOutputRaw"] = &CommonMessageFetchProcessor::process_fetchServoOutputRaw;
    processMap_["fetchMissionRequestPartialList"] = &CommonMessageFetchProcessor::process_fetchMissionRequestPartialList;
    processMap_["fetchMissionWritePartialList"] = &CommonMessageFetchProcessor::process_fetchMissionWritePartialList;
    processMap_["fetchMissionItem"] = &CommonMessageFetchProcessor::process_fetchMissionItem;
    processMap_["fetchMissionRequest"] = &CommonMessageFetchProcessor::process_fetchMissionRequest;
    processMap_["fetchMissionSetCurrent"] = &CommonMessageFetchProcessor::process_fetchMissionSetCurrent;
    processMap_["fetchMissionCurrent"] = &CommonMessageFetchProcessor::process_fetchMissionCurrent;
    processMap_["fetchMissionRequestList"] = &CommonMessageFetchProcessor::process_fetchMissionRequestList;
    processMap_["fetchMissionCount"] = &CommonMessageFetchProcessor::process_fetchMissionCount;
    processMap_["fetchMissionClearAll"] = &CommonMessageFetchProcessor::process_fetchMissionClearAll;
    processMap_["fetchMissionItemReached"] = &CommonMessageFetchProcessor::process_fetchMissionItemReached;
    processMap_["fetchMissionAck"] = &CommonMessageFetchProcessor::process_fetchMissionAck;
    processMap_["fetchSetGpsGlobalOrigin"] = &CommonMessageFetchProcessor::process_fetchSetGpsGlobalOrigin;
    processMap_["fetchGpsGlobalOrigin"] = &CommonMessageFetchProcessor::process_fetchGpsGlobalOrigin;
    processMap_["fetchSetLocalPositionSetpoint"] = &CommonMessageFetchProcessor::process_fetchSetLocalPositionSetpoint;
    processMap_["fetchLocalPositionSetpoint"] = &CommonMessageFetchProcessor::process_fetchLocalPositionSetpoint;
    processMap_["fetchGlobalPositionSetpointInt"] = &CommonMessageFetchProcessor::process_fetchGlobalPositionSetpointInt;
    processMap_["fetchSetGlobalPositionSetpointInt"] = &CommonMessageFetchProcessor::process_fetchSetGlobalPositionSetpointInt;
    processMap_["fetchSafetySetAllowedArea"] = &CommonMessageFetchProcessor::process_fetchSafetySetAllowedArea;
    processMap_["fetchSafetyAllowedArea"] = &CommonMessageFetchProcessor::process_fetchSafetyAllowedArea;
    processMap_["fetchSetRollPitchYawThrust"] = &CommonMessageFetchProcessor::process_fetchSetRollPitchYawThrust;
    processMap_["fetchSetRollPitchYawSpeedThrust"] = &CommonMessageFetchProcessor::process_fetchSetRollPitchYawSpeedThrust;
    processMap_["fetchRollPitchYawThrustSetpoint"] = &CommonMessageFetchProcessor::process_fetchRollPitchYawThrustSetpoint;
    processMap_["fetchRollPitchYawSpeedThrustSetpoint"] = &CommonMessageFetchProcessor::process_fetchRollPitchYawSpeedThrustSetpoint;
    processMap_["fetchSetQuadMotorsSetpoint"] = &CommonMessageFetchProcessor::process_fetchSetQuadMotorsSetpoint;
    processMap_["fetchSetQuadSwarmRollPitchYawThrust"] = &CommonMessageFetchProcessor::process_fetchSetQuadSwarmRollPitchYawThrust;
    processMap_["fetchNavControllerOutput"] = &CommonMessageFetchProcessor::process_fetchNavControllerOutput;
    processMap_["fetchSetQuadSwarmLedRollPitchYawThrust"] = &CommonMessageFetchProcessor::process_fetchSetQuadSwarmLedRollPitchYawThrust;
    processMap_["fetchStateCorrection"] = &CommonMessageFetchProcessor::process_fetchStateCorrection;
    processMap_["fetchRequestDataStream"] = &CommonMessageFetchProcessor::process_fetchRequestDataStream;
    processMap_["fetchDataStream"] = &CommonMessageFetchProcessor::process_fetchDataStream;
    processMap_["fetchManualControl"] = &CommonMessageFetchProcessor::process_fetchManualControl;
    processMap_["fetchRcChannelsOverride"] = &CommonMessageFetchProcessor::process_fetchRcChannelsOverride;
    processMap_["fetchVfrHud"] = &CommonMessageFetchProcessor::process_fetchVfrHud;
    processMap_["fetchCommandLong"] = &CommonMessageFetchProcessor::process_fetchCommandLong;
    processMap_["fetchCommandAck"] = &CommonMessageFetchProcessor::process_fetchCommandAck;
    processMap_["fetchRollPitchYawRatesThrustSetpoint"] = &CommonMessageFetchProcessor::process_fetchRollPitchYawRatesThrustSetpoint;
    processMap_["fetchManualSetpoint"] = &CommonMessageFetchProcessor::process_fetchManualSetpoint;
    processMap_["fetchLocalPositionNedSystemGlobalOffset"] = &CommonMessageFetchProcessor::process_fetchLocalPositionNedSystemGlobalOffset;
    processMap_["fetchHilState"] = &CommonMessageFetchProcessor::process_fetchHilState;
    processMap_["fetchHilControls"] = &CommonMessageFetchProcessor::process_fetchHilControls;
    processMap_["fetchHilRcInputsRaw"] = &CommonMessageFetchProcessor::process_fetchHilRcInputsRaw;
    processMap_["fetchOpticalFlow"] = &CommonMessageFetchProcessor::process_fetchOpticalFlow;
    processMap_["fetchGlobalVisionPositionEstimate"] = &CommonMessageFetchProcessor::process_fetchGlobalVisionPositionEstimate;
    processMap_["fetchVisionPositionEstimate"] = &CommonMessageFetchProcessor::process_fetchVisionPositionEstimate;
    processMap_["fetchVisionSpeedEstimate"] = &CommonMessageFetchProcessor::process_fetchVisionSpeedEstimate;
    processMap_["fetchViconPositionEstimate"] = &CommonMessageFetchProcessor::process_fetchViconPositionEstimate;
    processMap_["fetchHighresImu"] = &CommonMessageFetchProcessor::process_fetchHighresImu;
    processMap_["fetchOmnidirectionalFlow"] = &CommonMessageFetchProcessor::process_fetchOmnidirectionalFlow;
    processMap_["fetchFileTransferStart"] = &CommonMessageFetchProcessor::process_fetchFileTransferStart;
    processMap_["fetchFileTransferDirList"] = &CommonMessageFetchProcessor::process_fetchFileTransferDirList;
    processMap_["fetchFileTransferRes"] = &CommonMessageFetchProcessor::process_fetchFileTransferRes;
    processMap_["fetchBatteryStatus"] = &CommonMessageFetchProcessor::process_fetchBatteryStatus;
    processMap_["fetchSetpoint8dof"] = &CommonMessageFetchProcessor::process_fetchSetpoint8dof;
    processMap_["fetchSetpoint6dof"] = &CommonMessageFetchProcessor::process_fetchSetpoint6dof;
    processMap_["fetchMemoryVect"] = &CommonMessageFetchProcessor::process_fetchMemoryVect;
    processMap_["fetchDebugVect"] = &CommonMessageFetchProcessor::process_fetchDebugVect;
    processMap_["fetchNamedValueFloat"] = &CommonMessageFetchProcessor::process_fetchNamedValueFloat;
    processMap_["fetchNamedValueInt"] = &CommonMessageFetchProcessor::process_fetchNamedValueInt;
    processMap_["fetchStatustext"] = &CommonMessageFetchProcessor::process_fetchStatustext;
    processMap_["fetchDebug"] = &CommonMessageFetchProcessor::process_fetchDebug;
  }

  virtual ~CommonMessageFetchProcessor() {}
};

class CommonMessageFetchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CommonMessageFetchProcessorFactory(const ::boost::shared_ptr< CommonMessageFetchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CommonMessageFetchIfFactory > handlerFactory_;
};

class CommonMessageFetchMultiface : virtual public CommonMessageFetchIf {
 public:
  CommonMessageFetchMultiface(std::vector<boost::shared_ptr<CommonMessageFetchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CommonMessageFetchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CommonMessageFetchIf> > ifaces_;
  CommonMessageFetchMultiface() {}
  void add(boost::shared_ptr<CommonMessageFetchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->availableMessages(_return);
    }
    ifaces_[i]->availableMessages(_return);
    return;
  }

  void fetchHeartbeat(std::vector<Heartbeat> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHeartbeat(_return);
    }
    ifaces_[i]->fetchHeartbeat(_return);
    return;
  }

  void fetchSysStatus(std::vector<SysStatus> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSysStatus(_return);
    }
    ifaces_[i]->fetchSysStatus(_return);
    return;
  }

  void fetchSystemTime(std::vector<SystemTime> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSystemTime(_return);
    }
    ifaces_[i]->fetchSystemTime(_return);
    return;
  }

  void fetchPing(std::vector<Ping> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchPing(_return);
    }
    ifaces_[i]->fetchPing(_return);
    return;
  }

  void fetchChangeOperatorControl(std::vector<ChangeOperatorControl> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchChangeOperatorControl(_return);
    }
    ifaces_[i]->fetchChangeOperatorControl(_return);
    return;
  }

  void fetchChangeOperatorControlAck(std::vector<ChangeOperatorControlAck> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchChangeOperatorControlAck(_return);
    }
    ifaces_[i]->fetchChangeOperatorControlAck(_return);
    return;
  }

  void fetchAuthKey(std::vector<AuthKey> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAuthKey(_return);
    }
    ifaces_[i]->fetchAuthKey(_return);
    return;
  }

  void fetchSetMode(std::vector<SetMode> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetMode(_return);
    }
    ifaces_[i]->fetchSetMode(_return);
    return;
  }

  void fetchParamRequestRead(std::vector<ParamRequestRead> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamRequestRead(_return);
    }
    ifaces_[i]->fetchParamRequestRead(_return);
    return;
  }

  void fetchParamRequestList(std::vector<ParamRequestList> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamRequestList(_return);
    }
    ifaces_[i]->fetchParamRequestList(_return);
    return;
  }

  void fetchParamValue(std::vector<ParamValue> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamValue(_return);
    }
    ifaces_[i]->fetchParamValue(_return);
    return;
  }

  void fetchParamSet(std::vector<ParamSet> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamSet(_return);
    }
    ifaces_[i]->fetchParamSet(_return);
    return;
  }

  void fetchGpsRawInt(std::vector<GpsRawInt> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGpsRawInt(_return);
    }
    ifaces_[i]->fetchGpsRawInt(_return);
    return;
  }

  void fetchGpsStatus(std::vector<GpsStatus> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGpsStatus(_return);
    }
    ifaces_[i]->fetchGpsStatus(_return);
    return;
  }

  void fetchScaledImu(std::vector<ScaledImu> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchScaledImu(_return);
    }
    ifaces_[i]->fetchScaledImu(_return);
    return;
  }

  void fetchRawImu(std::vector<RawImu> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRawImu(_return);
    }
    ifaces_[i]->fetchRawImu(_return);
    return;
  }

  void fetchRawPressure(std::vector<RawPressure> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRawPressure(_return);
    }
    ifaces_[i]->fetchRawPressure(_return);
    return;
  }

  void fetchScaledPressure(std::vector<ScaledPressure> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchScaledPressure(_return);
    }
    ifaces_[i]->fetchScaledPressure(_return);
    return;
  }

  void fetchAttitude(std::vector<Attitude> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAttitude(_return);
    }
    ifaces_[i]->fetchAttitude(_return);
    return;
  }

  void fetchAttitudeQuaternion(std::vector<AttitudeQuaternion> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAttitudeQuaternion(_return);
    }
    ifaces_[i]->fetchAttitudeQuaternion(_return);
    return;
  }

  void fetchLocalPositionNed(std::vector<LocalPositionNed> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLocalPositionNed(_return);
    }
    ifaces_[i]->fetchLocalPositionNed(_return);
    return;
  }

  void fetchGlobalPositionInt(std::vector<GlobalPositionInt> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGlobalPositionInt(_return);
    }
    ifaces_[i]->fetchGlobalPositionInt(_return);
    return;
  }

  void fetchRcChannelsScaled(std::vector<RcChannelsScaled> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRcChannelsScaled(_return);
    }
    ifaces_[i]->fetchRcChannelsScaled(_return);
    return;
  }

  void fetchRcChannelsRaw(std::vector<RcChannelsRaw> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRcChannelsRaw(_return);
    }
    ifaces_[i]->fetchRcChannelsRaw(_return);
    return;
  }

  void fetchServoOutputRaw(std::vector<ServoOutputRaw> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchServoOutputRaw(_return);
    }
    ifaces_[i]->fetchServoOutputRaw(_return);
    return;
  }

  void fetchMissionRequestPartialList(std::vector<MissionRequestPartialList> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionRequestPartialList(_return);
    }
    ifaces_[i]->fetchMissionRequestPartialList(_return);
    return;
  }

  void fetchMissionWritePartialList(std::vector<MissionWritePartialList> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionWritePartialList(_return);
    }
    ifaces_[i]->fetchMissionWritePartialList(_return);
    return;
  }

  void fetchMissionItem(std::vector<MissionItem> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionItem(_return);
    }
    ifaces_[i]->fetchMissionItem(_return);
    return;
  }

  void fetchMissionRequest(std::vector<MissionRequest> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionRequest(_return);
    }
    ifaces_[i]->fetchMissionRequest(_return);
    return;
  }

  void fetchMissionSetCurrent(std::vector<MissionSetCurrent> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionSetCurrent(_return);
    }
    ifaces_[i]->fetchMissionSetCurrent(_return);
    return;
  }

  void fetchMissionCurrent(std::vector<MissionCurrent> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionCurrent(_return);
    }
    ifaces_[i]->fetchMissionCurrent(_return);
    return;
  }

  void fetchMissionRequestList(std::vector<MissionRequestList> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionRequestList(_return);
    }
    ifaces_[i]->fetchMissionRequestList(_return);
    return;
  }

  void fetchMissionCount(std::vector<MissionCount> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionCount(_return);
    }
    ifaces_[i]->fetchMissionCount(_return);
    return;
  }

  void fetchMissionClearAll(std::vector<MissionClearAll> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionClearAll(_return);
    }
    ifaces_[i]->fetchMissionClearAll(_return);
    return;
  }

  void fetchMissionItemReached(std::vector<MissionItemReached> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionItemReached(_return);
    }
    ifaces_[i]->fetchMissionItemReached(_return);
    return;
  }

  void fetchMissionAck(std::vector<MissionAck> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionAck(_return);
    }
    ifaces_[i]->fetchMissionAck(_return);
    return;
  }

  void fetchSetGpsGlobalOrigin(std::vector<SetGpsGlobalOrigin> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetGpsGlobalOrigin(_return);
    }
    ifaces_[i]->fetchSetGpsGlobalOrigin(_return);
    return;
  }

  void fetchGpsGlobalOrigin(std::vector<GpsGlobalOrigin> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGpsGlobalOrigin(_return);
    }
    ifaces_[i]->fetchGpsGlobalOrigin(_return);
    return;
  }

  void fetchSetLocalPositionSetpoint(std::vector<SetLocalPositionSetpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetLocalPositionSetpoint(_return);
    }
    ifaces_[i]->fetchSetLocalPositionSetpoint(_return);
    return;
  }

  void fetchLocalPositionSetpoint(std::vector<LocalPositionSetpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLocalPositionSetpoint(_return);
    }
    ifaces_[i]->fetchLocalPositionSetpoint(_return);
    return;
  }

  void fetchGlobalPositionSetpointInt(std::vector<GlobalPositionSetpointInt> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGlobalPositionSetpointInt(_return);
    }
    ifaces_[i]->fetchGlobalPositionSetpointInt(_return);
    return;
  }

  void fetchSetGlobalPositionSetpointInt(std::vector<SetGlobalPositionSetpointInt> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetGlobalPositionSetpointInt(_return);
    }
    ifaces_[i]->fetchSetGlobalPositionSetpointInt(_return);
    return;
  }

  void fetchSafetySetAllowedArea(std::vector<SafetySetAllowedArea> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSafetySetAllowedArea(_return);
    }
    ifaces_[i]->fetchSafetySetAllowedArea(_return);
    return;
  }

  void fetchSafetyAllowedArea(std::vector<SafetyAllowedArea> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSafetyAllowedArea(_return);
    }
    ifaces_[i]->fetchSafetyAllowedArea(_return);
    return;
  }

  void fetchSetRollPitchYawThrust(std::vector<SetRollPitchYawThrust> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetRollPitchYawThrust(_return);
    }
    ifaces_[i]->fetchSetRollPitchYawThrust(_return);
    return;
  }

  void fetchSetRollPitchYawSpeedThrust(std::vector<SetRollPitchYawSpeedThrust> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetRollPitchYawSpeedThrust(_return);
    }
    ifaces_[i]->fetchSetRollPitchYawSpeedThrust(_return);
    return;
  }

  void fetchRollPitchYawThrustSetpoint(std::vector<RollPitchYawThrustSetpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRollPitchYawThrustSetpoint(_return);
    }
    ifaces_[i]->fetchRollPitchYawThrustSetpoint(_return);
    return;
  }

  void fetchRollPitchYawSpeedThrustSetpoint(std::vector<RollPitchYawSpeedThrustSetpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRollPitchYawSpeedThrustSetpoint(_return);
    }
    ifaces_[i]->fetchRollPitchYawSpeedThrustSetpoint(_return);
    return;
  }

  void fetchSetQuadMotorsSetpoint(std::vector<SetQuadMotorsSetpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetQuadMotorsSetpoint(_return);
    }
    ifaces_[i]->fetchSetQuadMotorsSetpoint(_return);
    return;
  }

  void fetchSetQuadSwarmRollPitchYawThrust(std::vector<SetQuadSwarmRollPitchYawThrust> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetQuadSwarmRollPitchYawThrust(_return);
    }
    ifaces_[i]->fetchSetQuadSwarmRollPitchYawThrust(_return);
    return;
  }

  void fetchNavControllerOutput(std::vector<NavControllerOutput> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchNavControllerOutput(_return);
    }
    ifaces_[i]->fetchNavControllerOutput(_return);
    return;
  }

  void fetchSetQuadSwarmLedRollPitchYawThrust(std::vector<SetQuadSwarmLedRollPitchYawThrust> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetQuadSwarmLedRollPitchYawThrust(_return);
    }
    ifaces_[i]->fetchSetQuadSwarmLedRollPitchYawThrust(_return);
    return;
  }

  void fetchStateCorrection(std::vector<StateCorrection> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchStateCorrection(_return);
    }
    ifaces_[i]->fetchStateCorrection(_return);
    return;
  }

  void fetchRequestDataStream(std::vector<RequestDataStream> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRequestDataStream(_return);
    }
    ifaces_[i]->fetchRequestDataStream(_return);
    return;
  }

  void fetchDataStream(std::vector<DataStream> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDataStream(_return);
    }
    ifaces_[i]->fetchDataStream(_return);
    return;
  }

  void fetchManualControl(std::vector<ManualControl> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchManualControl(_return);
    }
    ifaces_[i]->fetchManualControl(_return);
    return;
  }

  void fetchRcChannelsOverride(std::vector<RcChannelsOverride> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRcChannelsOverride(_return);
    }
    ifaces_[i]->fetchRcChannelsOverride(_return);
    return;
  }

  void fetchVfrHud(std::vector<VfrHud> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchVfrHud(_return);
    }
    ifaces_[i]->fetchVfrHud(_return);
    return;
  }

  void fetchCommandLong(std::vector<CommandLong> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchCommandLong(_return);
    }
    ifaces_[i]->fetchCommandLong(_return);
    return;
  }

  void fetchCommandAck(std::vector<CommandAck> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchCommandAck(_return);
    }
    ifaces_[i]->fetchCommandAck(_return);
    return;
  }

  void fetchRollPitchYawRatesThrustSetpoint(std::vector<RollPitchYawRatesThrustSetpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRollPitchYawRatesThrustSetpoint(_return);
    }
    ifaces_[i]->fetchRollPitchYawRatesThrustSetpoint(_return);
    return;
  }

  void fetchManualSetpoint(std::vector<ManualSetpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchManualSetpoint(_return);
    }
    ifaces_[i]->fetchManualSetpoint(_return);
    return;
  }

  void fetchLocalPositionNedSystemGlobalOffset(std::vector<LocalPositionNedSystemGlobalOffset> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLocalPositionNedSystemGlobalOffset(_return);
    }
    ifaces_[i]->fetchLocalPositionNedSystemGlobalOffset(_return);
    return;
  }

  void fetchHilState(std::vector<HilState> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHilState(_return);
    }
    ifaces_[i]->fetchHilState(_return);
    return;
  }

  void fetchHilControls(std::vector<HilControls> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHilControls(_return);
    }
    ifaces_[i]->fetchHilControls(_return);
    return;
  }

  void fetchHilRcInputsRaw(std::vector<HilRcInputsRaw> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHilRcInputsRaw(_return);
    }
    ifaces_[i]->fetchHilRcInputsRaw(_return);
    return;
  }

  void fetchOpticalFlow(std::vector<OpticalFlow> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOpticalFlow(_return);
    }
    ifaces_[i]->fetchOpticalFlow(_return);
    return;
  }

  void fetchGlobalVisionPositionEstimate(std::vector<GlobalVisionPositionEstimate> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGlobalVisionPositionEstimate(_return);
    }
    ifaces_[i]->fetchGlobalVisionPositionEstimate(_return);
    return;
  }

  void fetchVisionPositionEstimate(std::vector<VisionPositionEstimate> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchVisionPositionEstimate(_return);
    }
    ifaces_[i]->fetchVisionPositionEstimate(_return);
    return;
  }

  void fetchVisionSpeedEstimate(std::vector<VisionSpeedEstimate> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchVisionSpeedEstimate(_return);
    }
    ifaces_[i]->fetchVisionSpeedEstimate(_return);
    return;
  }

  void fetchViconPositionEstimate(std::vector<ViconPositionEstimate> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchViconPositionEstimate(_return);
    }
    ifaces_[i]->fetchViconPositionEstimate(_return);
    return;
  }

  void fetchHighresImu(std::vector<HighresImu> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHighresImu(_return);
    }
    ifaces_[i]->fetchHighresImu(_return);
    return;
  }

  void fetchOmnidirectionalFlow(std::vector<OmnidirectionalFlow> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOmnidirectionalFlow(_return);
    }
    ifaces_[i]->fetchOmnidirectionalFlow(_return);
    return;
  }

  void fetchFileTransferStart(std::vector<FileTransferStart> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFileTransferStart(_return);
    }
    ifaces_[i]->fetchFileTransferStart(_return);
    return;
  }

  void fetchFileTransferDirList(std::vector<FileTransferDirList> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFileTransferDirList(_return);
    }
    ifaces_[i]->fetchFileTransferDirList(_return);
    return;
  }

  void fetchFileTransferRes(std::vector<FileTransferRes> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFileTransferRes(_return);
    }
    ifaces_[i]->fetchFileTransferRes(_return);
    return;
  }

  void fetchBatteryStatus(std::vector<BatteryStatus> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchBatteryStatus(_return);
    }
    ifaces_[i]->fetchBatteryStatus(_return);
    return;
  }

  void fetchSetpoint8dof(std::vector<Setpoint8dof> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetpoint8dof(_return);
    }
    ifaces_[i]->fetchSetpoint8dof(_return);
    return;
  }

  void fetchSetpoint6dof(std::vector<Setpoint6dof> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetpoint6dof(_return);
    }
    ifaces_[i]->fetchSetpoint6dof(_return);
    return;
  }

  void fetchMemoryVect(std::vector<MemoryVect> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMemoryVect(_return);
    }
    ifaces_[i]->fetchMemoryVect(_return);
    return;
  }

  void fetchDebugVect(std::vector<DebugVect> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDebugVect(_return);
    }
    ifaces_[i]->fetchDebugVect(_return);
    return;
  }

  void fetchNamedValueFloat(std::vector<NamedValueFloat> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchNamedValueFloat(_return);
    }
    ifaces_[i]->fetchNamedValueFloat(_return);
    return;
  }

  void fetchNamedValueInt(std::vector<NamedValueInt> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchNamedValueInt(_return);
    }
    ifaces_[i]->fetchNamedValueInt(_return);
    return;
  }

  void fetchStatustext(std::vector<Statustext> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchStatustext(_return);
    }
    ifaces_[i]->fetchStatustext(_return);
    return;
  }

  void fetchDebug(std::vector<Debug> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDebug(_return);
    }
    ifaces_[i]->fetchDebug(_return);
    return;
  }

};

}} // namespace

#endif
