/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CommonMessageFetchService_H
#define CommonMessageFetchService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace mavlink { namespace thrift {

class CommonMessageFetchServiceIf {
 public:
  virtual ~CommonMessageFetchServiceIf() {}
  virtual void availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return) = 0;
  virtual void fetchHeartbeat(const std::vector<Heartbeat> & msg) = 0;
  virtual void fetchSysStatus(const std::vector<SysStatus> & msg) = 0;
  virtual void fetchSystemTime(const std::vector<SystemTime> & msg) = 0;
  virtual void fetchPing(const std::vector<Ping> & msg) = 0;
  virtual void fetchChangeOperatorControl(const std::vector<ChangeOperatorControl> & msg) = 0;
  virtual void fetchChangeOperatorControlAck(const std::vector<ChangeOperatorControlAck> & msg) = 0;
  virtual void fetchAuthKey(const std::vector<AuthKey> & msg) = 0;
  virtual void fetchSetMode(const std::vector<SetMode> & msg) = 0;
  virtual void fetchParamRequestRead(const std::vector<ParamRequestRead> & msg) = 0;
  virtual void fetchParamRequestList(const std::vector<ParamRequestList> & msg) = 0;
  virtual void fetchParamValue(const std::vector<ParamValue> & msg) = 0;
  virtual void fetchParamSet(const std::vector<ParamSet> & msg) = 0;
  virtual void fetchGpsRawInt(const std::vector<GpsRawInt> & msg) = 0;
  virtual void fetchGpsStatus(const std::vector<GpsStatus> & msg) = 0;
  virtual void fetchScaledImu(const std::vector<ScaledImu> & msg) = 0;
  virtual void fetchRawImu(const std::vector<RawImu> & msg) = 0;
  virtual void fetchRawPressure(const std::vector<RawPressure> & msg) = 0;
  virtual void fetchScaledPressure(const std::vector<ScaledPressure> & msg) = 0;
  virtual void fetchAttitude(const std::vector<Attitude> & msg) = 0;
  virtual void fetchAttitudeQuaternion(const std::vector<AttitudeQuaternion> & msg) = 0;
  virtual void fetchLocalPositionNed(const std::vector<LocalPositionNed> & msg) = 0;
  virtual void fetchGlobalPositionInt(const std::vector<GlobalPositionInt> & msg) = 0;
  virtual void fetchRcChannelsScaled(const std::vector<RcChannelsScaled> & msg) = 0;
  virtual void fetchRcChannelsRaw(const std::vector<RcChannelsRaw> & msg) = 0;
  virtual void fetchServoOutputRaw(const std::vector<ServoOutputRaw> & msg) = 0;
  virtual void fetchMissionRequestPartialList(const std::vector<MissionRequestPartialList> & msg) = 0;
  virtual void fetchMissionWritePartialList(const std::vector<MissionWritePartialList> & msg) = 0;
  virtual void fetchMissionItem(const std::vector<MissionItem> & msg) = 0;
  virtual void fetchMissionRequest(const std::vector<MissionRequest> & msg) = 0;
  virtual void fetchMissionSetCurrent(const std::vector<MissionSetCurrent> & msg) = 0;
  virtual void fetchMissionCurrent(const std::vector<MissionCurrent> & msg) = 0;
  virtual void fetchMissionRequestList(const std::vector<MissionRequestList> & msg) = 0;
  virtual void fetchMissionCount(const std::vector<MissionCount> & msg) = 0;
  virtual void fetchMissionClearAll(const std::vector<MissionClearAll> & msg) = 0;
  virtual void fetchMissionItemReached(const std::vector<MissionItemReached> & msg) = 0;
  virtual void fetchMissionAck(const std::vector<MissionAck> & msg) = 0;
  virtual void fetchSetGpsGlobalOrigin(const std::vector<SetGpsGlobalOrigin> & msg) = 0;
  virtual void fetchGpsGlobalOrigin(const std::vector<GpsGlobalOrigin> & msg) = 0;
  virtual void fetchSetLocalPositionSetpoint(const std::vector<SetLocalPositionSetpoint> & msg) = 0;
  virtual void fetchLocalPositionSetpoint(const std::vector<LocalPositionSetpoint> & msg) = 0;
  virtual void fetchGlobalPositionSetpointInt(const std::vector<GlobalPositionSetpointInt> & msg) = 0;
  virtual void fetchSetGlobalPositionSetpointInt(const std::vector<SetGlobalPositionSetpointInt> & msg) = 0;
  virtual void fetchSafetySetAllowedArea(const std::vector<SafetySetAllowedArea> & msg) = 0;
  virtual void fetchSafetyAllowedArea(const std::vector<SafetyAllowedArea> & msg) = 0;
  virtual void fetchSetRollPitchYawThrust(const std::vector<SetRollPitchYawThrust> & msg) = 0;
  virtual void fetchSetRollPitchYawSpeedThrust(const std::vector<SetRollPitchYawSpeedThrust> & msg) = 0;
  virtual void fetchRollPitchYawThrustSetpoint(const std::vector<RollPitchYawThrustSetpoint> & msg) = 0;
  virtual void fetchRollPitchYawSpeedThrustSetpoint(const std::vector<RollPitchYawSpeedThrustSetpoint> & msg) = 0;
  virtual void fetchSetQuadMotorsSetpoint(const std::vector<SetQuadMotorsSetpoint> & msg) = 0;
  virtual void fetchSetQuadSwarmRollPitchYawThrust(const std::vector<SetQuadSwarmRollPitchYawThrust> & msg) = 0;
  virtual void fetchNavControllerOutput(const std::vector<NavControllerOutput> & msg) = 0;
  virtual void fetchSetQuadSwarmLedRollPitchYawThrust(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & msg) = 0;
  virtual void fetchStateCorrection(const std::vector<StateCorrection> & msg) = 0;
  virtual void fetchRequestDataStream(const std::vector<RequestDataStream> & msg) = 0;
  virtual void fetchDataStream(const std::vector<DataStream> & msg) = 0;
  virtual void fetchManualControl(const std::vector<ManualControl> & msg) = 0;
  virtual void fetchRcChannelsOverride(const std::vector<RcChannelsOverride> & msg) = 0;
  virtual void fetchVfrHud(const std::vector<VfrHud> & msg) = 0;
  virtual void fetchCommandLong(const std::vector<CommandLong> & msg) = 0;
  virtual void fetchCommandAck(const std::vector<CommandAck> & msg) = 0;
  virtual void fetchRollPitchYawRatesThrustSetpoint(const std::vector<RollPitchYawRatesThrustSetpoint> & msg) = 0;
  virtual void fetchManualSetpoint(const std::vector<ManualSetpoint> & msg) = 0;
  virtual void fetchLocalPositionNedSystemGlobalOffset(const std::vector<LocalPositionNedSystemGlobalOffset> & msg) = 0;
  virtual void fetchHilState(const std::vector<HilState> & msg) = 0;
  virtual void fetchHilControls(const std::vector<HilControls> & msg) = 0;
  virtual void fetchHilRcInputsRaw(const std::vector<HilRcInputsRaw> & msg) = 0;
  virtual void fetchOpticalFlow(const std::vector<OpticalFlow> & msg) = 0;
  virtual void fetchGlobalVisionPositionEstimate(const std::vector<GlobalVisionPositionEstimate> & msg) = 0;
  virtual void fetchVisionPositionEstimate(const std::vector<VisionPositionEstimate> & msg) = 0;
  virtual void fetchVisionSpeedEstimate(const std::vector<VisionSpeedEstimate> & msg) = 0;
  virtual void fetchViconPositionEstimate(const std::vector<ViconPositionEstimate> & msg) = 0;
  virtual void fetchHighresImu(const std::vector<HighresImu> & msg) = 0;
  virtual void fetchOmnidirectionalFlow(const std::vector<OmnidirectionalFlow> & msg) = 0;
  virtual void fetchFileTransferStart(const std::vector<FileTransferStart> & msg) = 0;
  virtual void fetchFileTransferDirList(const std::vector<FileTransferDirList> & msg) = 0;
  virtual void fetchFileTransferRes(const std::vector<FileTransferRes> & msg) = 0;
  virtual void fetchBatteryStatus(const std::vector<BatteryStatus> & msg) = 0;
  virtual void fetchSetpoint8dof(const std::vector<Setpoint8dof> & msg) = 0;
  virtual void fetchSetpoint6dof(const std::vector<Setpoint6dof> & msg) = 0;
  virtual void fetchMemoryVect(const std::vector<MemoryVect> & msg) = 0;
  virtual void fetchDebugVect(const std::vector<DebugVect> & msg) = 0;
  virtual void fetchNamedValueFloat(const std::vector<NamedValueFloat> & msg) = 0;
  virtual void fetchNamedValueInt(const std::vector<NamedValueInt> & msg) = 0;
  virtual void fetchStatustext(const std::vector<Statustext> & msg) = 0;
  virtual void fetchDebug(const std::vector<Debug> & msg) = 0;
};

class CommonMessageFetchServiceIfFactory {
 public:
  typedef CommonMessageFetchServiceIf Handler;

  virtual ~CommonMessageFetchServiceIfFactory() {}

  virtual CommonMessageFetchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CommonMessageFetchServiceIf* /* handler */) = 0;
};

class CommonMessageFetchServiceIfSingletonFactory : virtual public CommonMessageFetchServiceIfFactory {
 public:
  CommonMessageFetchServiceIfSingletonFactory(const boost::shared_ptr<CommonMessageFetchServiceIf>& iface) : iface_(iface) {}
  virtual ~CommonMessageFetchServiceIfSingletonFactory() {}

  virtual CommonMessageFetchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CommonMessageFetchServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CommonMessageFetchServiceIf> iface_;
};

class CommonMessageFetchServiceNull : virtual public CommonMessageFetchServiceIf {
 public:
  virtual ~CommonMessageFetchServiceNull() {}
  void availableMessages(std::map<CommonMessageTypes::type, int32_t> & /* _return */) {
    return;
  }
  void fetchHeartbeat(const std::vector<Heartbeat> & /* msg */) {
    return;
  }
  void fetchSysStatus(const std::vector<SysStatus> & /* msg */) {
    return;
  }
  void fetchSystemTime(const std::vector<SystemTime> & /* msg */) {
    return;
  }
  void fetchPing(const std::vector<Ping> & /* msg */) {
    return;
  }
  void fetchChangeOperatorControl(const std::vector<ChangeOperatorControl> & /* msg */) {
    return;
  }
  void fetchChangeOperatorControlAck(const std::vector<ChangeOperatorControlAck> & /* msg */) {
    return;
  }
  void fetchAuthKey(const std::vector<AuthKey> & /* msg */) {
    return;
  }
  void fetchSetMode(const std::vector<SetMode> & /* msg */) {
    return;
  }
  void fetchParamRequestRead(const std::vector<ParamRequestRead> & /* msg */) {
    return;
  }
  void fetchParamRequestList(const std::vector<ParamRequestList> & /* msg */) {
    return;
  }
  void fetchParamValue(const std::vector<ParamValue> & /* msg */) {
    return;
  }
  void fetchParamSet(const std::vector<ParamSet> & /* msg */) {
    return;
  }
  void fetchGpsRawInt(const std::vector<GpsRawInt> & /* msg */) {
    return;
  }
  void fetchGpsStatus(const std::vector<GpsStatus> & /* msg */) {
    return;
  }
  void fetchScaledImu(const std::vector<ScaledImu> & /* msg */) {
    return;
  }
  void fetchRawImu(const std::vector<RawImu> & /* msg */) {
    return;
  }
  void fetchRawPressure(const std::vector<RawPressure> & /* msg */) {
    return;
  }
  void fetchScaledPressure(const std::vector<ScaledPressure> & /* msg */) {
    return;
  }
  void fetchAttitude(const std::vector<Attitude> & /* msg */) {
    return;
  }
  void fetchAttitudeQuaternion(const std::vector<AttitudeQuaternion> & /* msg */) {
    return;
  }
  void fetchLocalPositionNed(const std::vector<LocalPositionNed> & /* msg */) {
    return;
  }
  void fetchGlobalPositionInt(const std::vector<GlobalPositionInt> & /* msg */) {
    return;
  }
  void fetchRcChannelsScaled(const std::vector<RcChannelsScaled> & /* msg */) {
    return;
  }
  void fetchRcChannelsRaw(const std::vector<RcChannelsRaw> & /* msg */) {
    return;
  }
  void fetchServoOutputRaw(const std::vector<ServoOutputRaw> & /* msg */) {
    return;
  }
  void fetchMissionRequestPartialList(const std::vector<MissionRequestPartialList> & /* msg */) {
    return;
  }
  void fetchMissionWritePartialList(const std::vector<MissionWritePartialList> & /* msg */) {
    return;
  }
  void fetchMissionItem(const std::vector<MissionItem> & /* msg */) {
    return;
  }
  void fetchMissionRequest(const std::vector<MissionRequest> & /* msg */) {
    return;
  }
  void fetchMissionSetCurrent(const std::vector<MissionSetCurrent> & /* msg */) {
    return;
  }
  void fetchMissionCurrent(const std::vector<MissionCurrent> & /* msg */) {
    return;
  }
  void fetchMissionRequestList(const std::vector<MissionRequestList> & /* msg */) {
    return;
  }
  void fetchMissionCount(const std::vector<MissionCount> & /* msg */) {
    return;
  }
  void fetchMissionClearAll(const std::vector<MissionClearAll> & /* msg */) {
    return;
  }
  void fetchMissionItemReached(const std::vector<MissionItemReached> & /* msg */) {
    return;
  }
  void fetchMissionAck(const std::vector<MissionAck> & /* msg */) {
    return;
  }
  void fetchSetGpsGlobalOrigin(const std::vector<SetGpsGlobalOrigin> & /* msg */) {
    return;
  }
  void fetchGpsGlobalOrigin(const std::vector<GpsGlobalOrigin> & /* msg */) {
    return;
  }
  void fetchSetLocalPositionSetpoint(const std::vector<SetLocalPositionSetpoint> & /* msg */) {
    return;
  }
  void fetchLocalPositionSetpoint(const std::vector<LocalPositionSetpoint> & /* msg */) {
    return;
  }
  void fetchGlobalPositionSetpointInt(const std::vector<GlobalPositionSetpointInt> & /* msg */) {
    return;
  }
  void fetchSetGlobalPositionSetpointInt(const std::vector<SetGlobalPositionSetpointInt> & /* msg */) {
    return;
  }
  void fetchSafetySetAllowedArea(const std::vector<SafetySetAllowedArea> & /* msg */) {
    return;
  }
  void fetchSafetyAllowedArea(const std::vector<SafetyAllowedArea> & /* msg */) {
    return;
  }
  void fetchSetRollPitchYawThrust(const std::vector<SetRollPitchYawThrust> & /* msg */) {
    return;
  }
  void fetchSetRollPitchYawSpeedThrust(const std::vector<SetRollPitchYawSpeedThrust> & /* msg */) {
    return;
  }
  void fetchRollPitchYawThrustSetpoint(const std::vector<RollPitchYawThrustSetpoint> & /* msg */) {
    return;
  }
  void fetchRollPitchYawSpeedThrustSetpoint(const std::vector<RollPitchYawSpeedThrustSetpoint> & /* msg */) {
    return;
  }
  void fetchSetQuadMotorsSetpoint(const std::vector<SetQuadMotorsSetpoint> & /* msg */) {
    return;
  }
  void fetchSetQuadSwarmRollPitchYawThrust(const std::vector<SetQuadSwarmRollPitchYawThrust> & /* msg */) {
    return;
  }
  void fetchNavControllerOutput(const std::vector<NavControllerOutput> & /* msg */) {
    return;
  }
  void fetchSetQuadSwarmLedRollPitchYawThrust(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & /* msg */) {
    return;
  }
  void fetchStateCorrection(const std::vector<StateCorrection> & /* msg */) {
    return;
  }
  void fetchRequestDataStream(const std::vector<RequestDataStream> & /* msg */) {
    return;
  }
  void fetchDataStream(const std::vector<DataStream> & /* msg */) {
    return;
  }
  void fetchManualControl(const std::vector<ManualControl> & /* msg */) {
    return;
  }
  void fetchRcChannelsOverride(const std::vector<RcChannelsOverride> & /* msg */) {
    return;
  }
  void fetchVfrHud(const std::vector<VfrHud> & /* msg */) {
    return;
  }
  void fetchCommandLong(const std::vector<CommandLong> & /* msg */) {
    return;
  }
  void fetchCommandAck(const std::vector<CommandAck> & /* msg */) {
    return;
  }
  void fetchRollPitchYawRatesThrustSetpoint(const std::vector<RollPitchYawRatesThrustSetpoint> & /* msg */) {
    return;
  }
  void fetchManualSetpoint(const std::vector<ManualSetpoint> & /* msg */) {
    return;
  }
  void fetchLocalPositionNedSystemGlobalOffset(const std::vector<LocalPositionNedSystemGlobalOffset> & /* msg */) {
    return;
  }
  void fetchHilState(const std::vector<HilState> & /* msg */) {
    return;
  }
  void fetchHilControls(const std::vector<HilControls> & /* msg */) {
    return;
  }
  void fetchHilRcInputsRaw(const std::vector<HilRcInputsRaw> & /* msg */) {
    return;
  }
  void fetchOpticalFlow(const std::vector<OpticalFlow> & /* msg */) {
    return;
  }
  void fetchGlobalVisionPositionEstimate(const std::vector<GlobalVisionPositionEstimate> & /* msg */) {
    return;
  }
  void fetchVisionPositionEstimate(const std::vector<VisionPositionEstimate> & /* msg */) {
    return;
  }
  void fetchVisionSpeedEstimate(const std::vector<VisionSpeedEstimate> & /* msg */) {
    return;
  }
  void fetchViconPositionEstimate(const std::vector<ViconPositionEstimate> & /* msg */) {
    return;
  }
  void fetchHighresImu(const std::vector<HighresImu> & /* msg */) {
    return;
  }
  void fetchOmnidirectionalFlow(const std::vector<OmnidirectionalFlow> & /* msg */) {
    return;
  }
  void fetchFileTransferStart(const std::vector<FileTransferStart> & /* msg */) {
    return;
  }
  void fetchFileTransferDirList(const std::vector<FileTransferDirList> & /* msg */) {
    return;
  }
  void fetchFileTransferRes(const std::vector<FileTransferRes> & /* msg */) {
    return;
  }
  void fetchBatteryStatus(const std::vector<BatteryStatus> & /* msg */) {
    return;
  }
  void fetchSetpoint8dof(const std::vector<Setpoint8dof> & /* msg */) {
    return;
  }
  void fetchSetpoint6dof(const std::vector<Setpoint6dof> & /* msg */) {
    return;
  }
  void fetchMemoryVect(const std::vector<MemoryVect> & /* msg */) {
    return;
  }
  void fetchDebugVect(const std::vector<DebugVect> & /* msg */) {
    return;
  }
  void fetchNamedValueFloat(const std::vector<NamedValueFloat> & /* msg */) {
    return;
  }
  void fetchNamedValueInt(const std::vector<NamedValueInt> & /* msg */) {
    return;
  }
  void fetchStatustext(const std::vector<Statustext> & /* msg */) {
    return;
  }
  void fetchDebug(const std::vector<Debug> & /* msg */) {
    return;
  }
};


class CommonMessageFetchService_availableMessages_args {
 public:

  CommonMessageFetchService_availableMessages_args() {
  }

  virtual ~CommonMessageFetchService_availableMessages_args() throw() {}


  bool operator == (const CommonMessageFetchService_availableMessages_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_availableMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_availableMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_availableMessages_pargs {
 public:


  virtual ~CommonMessageFetchService_availableMessages_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetchService_availableMessages_result__isset {
  _CommonMessageFetchService_availableMessages_result__isset() : success(false) {}
  bool success;
} _CommonMessageFetchService_availableMessages_result__isset;

class CommonMessageFetchService_availableMessages_result {
 public:

  CommonMessageFetchService_availableMessages_result() {
  }

  virtual ~CommonMessageFetchService_availableMessages_result() throw() {}

  std::map<CommonMessageTypes::type, int32_t>  success;

  _CommonMessageFetchService_availableMessages_result__isset __isset;

  void __set_success(const std::map<CommonMessageTypes::type, int32_t> & val) {
    success = val;
  }

  bool operator == (const CommonMessageFetchService_availableMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_availableMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_availableMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonMessageFetchService_availableMessages_presult__isset {
  _CommonMessageFetchService_availableMessages_presult__isset() : success(false) {}
  bool success;
} _CommonMessageFetchService_availableMessages_presult__isset;

class CommonMessageFetchService_availableMessages_presult {
 public:


  virtual ~CommonMessageFetchService_availableMessages_presult() throw() {}

  std::map<CommonMessageTypes::type, int32_t> * success;

  _CommonMessageFetchService_availableMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchHeartbeat_args__isset {
  _CommonMessageFetchService_fetchHeartbeat_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchHeartbeat_args__isset;

class CommonMessageFetchService_fetchHeartbeat_args {
 public:

  CommonMessageFetchService_fetchHeartbeat_args() {
  }

  virtual ~CommonMessageFetchService_fetchHeartbeat_args() throw() {}

  std::vector<Heartbeat>  msg;

  _CommonMessageFetchService_fetchHeartbeat_args__isset __isset;

  void __set_msg(const std::vector<Heartbeat> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchHeartbeat_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHeartbeat_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchHeartbeat_pargs() throw() {}

  const std::vector<Heartbeat> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHeartbeat_result {
 public:

  CommonMessageFetchService_fetchHeartbeat_result() {
  }

  virtual ~CommonMessageFetchService_fetchHeartbeat_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchHeartbeat_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHeartbeat_presult {
 public:


  virtual ~CommonMessageFetchService_fetchHeartbeat_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSysStatus_args__isset {
  _CommonMessageFetchService_fetchSysStatus_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSysStatus_args__isset;

class CommonMessageFetchService_fetchSysStatus_args {
 public:

  CommonMessageFetchService_fetchSysStatus_args() {
  }

  virtual ~CommonMessageFetchService_fetchSysStatus_args() throw() {}

  std::vector<SysStatus>  msg;

  _CommonMessageFetchService_fetchSysStatus_args__isset __isset;

  void __set_msg(const std::vector<SysStatus> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSysStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSysStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSysStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSysStatus_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSysStatus_pargs() throw() {}

  const std::vector<SysStatus> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSysStatus_result {
 public:

  CommonMessageFetchService_fetchSysStatus_result() {
  }

  virtual ~CommonMessageFetchService_fetchSysStatus_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSysStatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSysStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSysStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSysStatus_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSysStatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSystemTime_args__isset {
  _CommonMessageFetchService_fetchSystemTime_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSystemTime_args__isset;

class CommonMessageFetchService_fetchSystemTime_args {
 public:

  CommonMessageFetchService_fetchSystemTime_args() {
  }

  virtual ~CommonMessageFetchService_fetchSystemTime_args() throw() {}

  std::vector<SystemTime>  msg;

  _CommonMessageFetchService_fetchSystemTime_args__isset __isset;

  void __set_msg(const std::vector<SystemTime> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSystemTime_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSystemTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSystemTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSystemTime_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSystemTime_pargs() throw() {}

  const std::vector<SystemTime> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSystemTime_result {
 public:

  CommonMessageFetchService_fetchSystemTime_result() {
  }

  virtual ~CommonMessageFetchService_fetchSystemTime_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSystemTime_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSystemTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSystemTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSystemTime_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSystemTime_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchPing_args__isset {
  _CommonMessageFetchService_fetchPing_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchPing_args__isset;

class CommonMessageFetchService_fetchPing_args {
 public:

  CommonMessageFetchService_fetchPing_args() {
  }

  virtual ~CommonMessageFetchService_fetchPing_args() throw() {}

  std::vector<Ping>  msg;

  _CommonMessageFetchService_fetchPing_args__isset __isset;

  void __set_msg(const std::vector<Ping> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchPing_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchPing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchPing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchPing_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchPing_pargs() throw() {}

  const std::vector<Ping> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchPing_result {
 public:

  CommonMessageFetchService_fetchPing_result() {
  }

  virtual ~CommonMessageFetchService_fetchPing_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchPing_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchPing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchPing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchPing_presult {
 public:


  virtual ~CommonMessageFetchService_fetchPing_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchChangeOperatorControl_args__isset {
  _CommonMessageFetchService_fetchChangeOperatorControl_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchChangeOperatorControl_args__isset;

class CommonMessageFetchService_fetchChangeOperatorControl_args {
 public:

  CommonMessageFetchService_fetchChangeOperatorControl_args() {
  }

  virtual ~CommonMessageFetchService_fetchChangeOperatorControl_args() throw() {}

  std::vector<ChangeOperatorControl>  msg;

  _CommonMessageFetchService_fetchChangeOperatorControl_args__isset __isset;

  void __set_msg(const std::vector<ChangeOperatorControl> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchChangeOperatorControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchChangeOperatorControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchChangeOperatorControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchChangeOperatorControl_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchChangeOperatorControl_pargs() throw() {}

  const std::vector<ChangeOperatorControl> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchChangeOperatorControl_result {
 public:

  CommonMessageFetchService_fetchChangeOperatorControl_result() {
  }

  virtual ~CommonMessageFetchService_fetchChangeOperatorControl_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchChangeOperatorControl_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchChangeOperatorControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchChangeOperatorControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchChangeOperatorControl_presult {
 public:


  virtual ~CommonMessageFetchService_fetchChangeOperatorControl_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchChangeOperatorControlAck_args__isset {
  _CommonMessageFetchService_fetchChangeOperatorControlAck_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchChangeOperatorControlAck_args__isset;

class CommonMessageFetchService_fetchChangeOperatorControlAck_args {
 public:

  CommonMessageFetchService_fetchChangeOperatorControlAck_args() {
  }

  virtual ~CommonMessageFetchService_fetchChangeOperatorControlAck_args() throw() {}

  std::vector<ChangeOperatorControlAck>  msg;

  _CommonMessageFetchService_fetchChangeOperatorControlAck_args__isset __isset;

  void __set_msg(const std::vector<ChangeOperatorControlAck> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchChangeOperatorControlAck_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchChangeOperatorControlAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchChangeOperatorControlAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchChangeOperatorControlAck_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchChangeOperatorControlAck_pargs() throw() {}

  const std::vector<ChangeOperatorControlAck> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchChangeOperatorControlAck_result {
 public:

  CommonMessageFetchService_fetchChangeOperatorControlAck_result() {
  }

  virtual ~CommonMessageFetchService_fetchChangeOperatorControlAck_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchChangeOperatorControlAck_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchChangeOperatorControlAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchChangeOperatorControlAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchChangeOperatorControlAck_presult {
 public:


  virtual ~CommonMessageFetchService_fetchChangeOperatorControlAck_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchAuthKey_args__isset {
  _CommonMessageFetchService_fetchAuthKey_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchAuthKey_args__isset;

class CommonMessageFetchService_fetchAuthKey_args {
 public:

  CommonMessageFetchService_fetchAuthKey_args() {
  }

  virtual ~CommonMessageFetchService_fetchAuthKey_args() throw() {}

  std::vector<AuthKey>  msg;

  _CommonMessageFetchService_fetchAuthKey_args__isset __isset;

  void __set_msg(const std::vector<AuthKey> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchAuthKey_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchAuthKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchAuthKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAuthKey_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchAuthKey_pargs() throw() {}

  const std::vector<AuthKey> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAuthKey_result {
 public:

  CommonMessageFetchService_fetchAuthKey_result() {
  }

  virtual ~CommonMessageFetchService_fetchAuthKey_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchAuthKey_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchAuthKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchAuthKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAuthKey_presult {
 public:


  virtual ~CommonMessageFetchService_fetchAuthKey_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetMode_args__isset {
  _CommonMessageFetchService_fetchSetMode_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetMode_args__isset;

class CommonMessageFetchService_fetchSetMode_args {
 public:

  CommonMessageFetchService_fetchSetMode_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetMode_args() throw() {}

  std::vector<SetMode>  msg;

  _CommonMessageFetchService_fetchSetMode_args__isset __isset;

  void __set_msg(const std::vector<SetMode> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetMode_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetMode_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetMode_pargs() throw() {}

  const std::vector<SetMode> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetMode_result {
 public:

  CommonMessageFetchService_fetchSetMode_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetMode_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetMode_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetMode_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetMode_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchParamRequestRead_args__isset {
  _CommonMessageFetchService_fetchParamRequestRead_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchParamRequestRead_args__isset;

class CommonMessageFetchService_fetchParamRequestRead_args {
 public:

  CommonMessageFetchService_fetchParamRequestRead_args() {
  }

  virtual ~CommonMessageFetchService_fetchParamRequestRead_args() throw() {}

  std::vector<ParamRequestRead>  msg;

  _CommonMessageFetchService_fetchParamRequestRead_args__isset __isset;

  void __set_msg(const std::vector<ParamRequestRead> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchParamRequestRead_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamRequestRead_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamRequestRead_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamRequestRead_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchParamRequestRead_pargs() throw() {}

  const std::vector<ParamRequestRead> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamRequestRead_result {
 public:

  CommonMessageFetchService_fetchParamRequestRead_result() {
  }

  virtual ~CommonMessageFetchService_fetchParamRequestRead_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchParamRequestRead_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamRequestRead_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamRequestRead_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamRequestRead_presult {
 public:


  virtual ~CommonMessageFetchService_fetchParamRequestRead_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchParamRequestList_args__isset {
  _CommonMessageFetchService_fetchParamRequestList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchParamRequestList_args__isset;

class CommonMessageFetchService_fetchParamRequestList_args {
 public:

  CommonMessageFetchService_fetchParamRequestList_args() {
  }

  virtual ~CommonMessageFetchService_fetchParamRequestList_args() throw() {}

  std::vector<ParamRequestList>  msg;

  _CommonMessageFetchService_fetchParamRequestList_args__isset __isset;

  void __set_msg(const std::vector<ParamRequestList> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchParamRequestList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamRequestList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamRequestList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamRequestList_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchParamRequestList_pargs() throw() {}

  const std::vector<ParamRequestList> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamRequestList_result {
 public:

  CommonMessageFetchService_fetchParamRequestList_result() {
  }

  virtual ~CommonMessageFetchService_fetchParamRequestList_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchParamRequestList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamRequestList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamRequestList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamRequestList_presult {
 public:


  virtual ~CommonMessageFetchService_fetchParamRequestList_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchParamValue_args__isset {
  _CommonMessageFetchService_fetchParamValue_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchParamValue_args__isset;

class CommonMessageFetchService_fetchParamValue_args {
 public:

  CommonMessageFetchService_fetchParamValue_args() {
  }

  virtual ~CommonMessageFetchService_fetchParamValue_args() throw() {}

  std::vector<ParamValue>  msg;

  _CommonMessageFetchService_fetchParamValue_args__isset __isset;

  void __set_msg(const std::vector<ParamValue> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchParamValue_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamValue_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchParamValue_pargs() throw() {}

  const std::vector<ParamValue> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamValue_result {
 public:

  CommonMessageFetchService_fetchParamValue_result() {
  }

  virtual ~CommonMessageFetchService_fetchParamValue_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchParamValue_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamValue_presult {
 public:


  virtual ~CommonMessageFetchService_fetchParamValue_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchParamSet_args__isset {
  _CommonMessageFetchService_fetchParamSet_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchParamSet_args__isset;

class CommonMessageFetchService_fetchParamSet_args {
 public:

  CommonMessageFetchService_fetchParamSet_args() {
  }

  virtual ~CommonMessageFetchService_fetchParamSet_args() throw() {}

  std::vector<ParamSet>  msg;

  _CommonMessageFetchService_fetchParamSet_args__isset __isset;

  void __set_msg(const std::vector<ParamSet> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchParamSet_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamSet_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchParamSet_pargs() throw() {}

  const std::vector<ParamSet> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamSet_result {
 public:

  CommonMessageFetchService_fetchParamSet_result() {
  }

  virtual ~CommonMessageFetchService_fetchParamSet_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchParamSet_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchParamSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchParamSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchParamSet_presult {
 public:


  virtual ~CommonMessageFetchService_fetchParamSet_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchGpsRawInt_args__isset {
  _CommonMessageFetchService_fetchGpsRawInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchGpsRawInt_args__isset;

class CommonMessageFetchService_fetchGpsRawInt_args {
 public:

  CommonMessageFetchService_fetchGpsRawInt_args() {
  }

  virtual ~CommonMessageFetchService_fetchGpsRawInt_args() throw() {}

  std::vector<GpsRawInt>  msg;

  _CommonMessageFetchService_fetchGpsRawInt_args__isset __isset;

  void __set_msg(const std::vector<GpsRawInt> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchGpsRawInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGpsRawInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGpsRawInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsRawInt_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchGpsRawInt_pargs() throw() {}

  const std::vector<GpsRawInt> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsRawInt_result {
 public:

  CommonMessageFetchService_fetchGpsRawInt_result() {
  }

  virtual ~CommonMessageFetchService_fetchGpsRawInt_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchGpsRawInt_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGpsRawInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGpsRawInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsRawInt_presult {
 public:


  virtual ~CommonMessageFetchService_fetchGpsRawInt_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchGpsStatus_args__isset {
  _CommonMessageFetchService_fetchGpsStatus_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchGpsStatus_args__isset;

class CommonMessageFetchService_fetchGpsStatus_args {
 public:

  CommonMessageFetchService_fetchGpsStatus_args() {
  }

  virtual ~CommonMessageFetchService_fetchGpsStatus_args() throw() {}

  std::vector<GpsStatus>  msg;

  _CommonMessageFetchService_fetchGpsStatus_args__isset __isset;

  void __set_msg(const std::vector<GpsStatus> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchGpsStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGpsStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGpsStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsStatus_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchGpsStatus_pargs() throw() {}

  const std::vector<GpsStatus> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsStatus_result {
 public:

  CommonMessageFetchService_fetchGpsStatus_result() {
  }

  virtual ~CommonMessageFetchService_fetchGpsStatus_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchGpsStatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGpsStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGpsStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsStatus_presult {
 public:


  virtual ~CommonMessageFetchService_fetchGpsStatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchScaledImu_args__isset {
  _CommonMessageFetchService_fetchScaledImu_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchScaledImu_args__isset;

class CommonMessageFetchService_fetchScaledImu_args {
 public:

  CommonMessageFetchService_fetchScaledImu_args() {
  }

  virtual ~CommonMessageFetchService_fetchScaledImu_args() throw() {}

  std::vector<ScaledImu>  msg;

  _CommonMessageFetchService_fetchScaledImu_args__isset __isset;

  void __set_msg(const std::vector<ScaledImu> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchScaledImu_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchScaledImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchScaledImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchScaledImu_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchScaledImu_pargs() throw() {}

  const std::vector<ScaledImu> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchScaledImu_result {
 public:

  CommonMessageFetchService_fetchScaledImu_result() {
  }

  virtual ~CommonMessageFetchService_fetchScaledImu_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchScaledImu_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchScaledImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchScaledImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchScaledImu_presult {
 public:


  virtual ~CommonMessageFetchService_fetchScaledImu_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRawImu_args__isset {
  _CommonMessageFetchService_fetchRawImu_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRawImu_args__isset;

class CommonMessageFetchService_fetchRawImu_args {
 public:

  CommonMessageFetchService_fetchRawImu_args() {
  }

  virtual ~CommonMessageFetchService_fetchRawImu_args() throw() {}

  std::vector<RawImu>  msg;

  _CommonMessageFetchService_fetchRawImu_args__isset __isset;

  void __set_msg(const std::vector<RawImu> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRawImu_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRawImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRawImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRawImu_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRawImu_pargs() throw() {}

  const std::vector<RawImu> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRawImu_result {
 public:

  CommonMessageFetchService_fetchRawImu_result() {
  }

  virtual ~CommonMessageFetchService_fetchRawImu_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRawImu_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRawImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRawImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRawImu_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRawImu_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRawPressure_args__isset {
  _CommonMessageFetchService_fetchRawPressure_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRawPressure_args__isset;

class CommonMessageFetchService_fetchRawPressure_args {
 public:

  CommonMessageFetchService_fetchRawPressure_args() {
  }

  virtual ~CommonMessageFetchService_fetchRawPressure_args() throw() {}

  std::vector<RawPressure>  msg;

  _CommonMessageFetchService_fetchRawPressure_args__isset __isset;

  void __set_msg(const std::vector<RawPressure> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRawPressure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRawPressure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRawPressure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRawPressure_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRawPressure_pargs() throw() {}

  const std::vector<RawPressure> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRawPressure_result {
 public:

  CommonMessageFetchService_fetchRawPressure_result() {
  }

  virtual ~CommonMessageFetchService_fetchRawPressure_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRawPressure_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRawPressure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRawPressure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRawPressure_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRawPressure_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchScaledPressure_args__isset {
  _CommonMessageFetchService_fetchScaledPressure_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchScaledPressure_args__isset;

class CommonMessageFetchService_fetchScaledPressure_args {
 public:

  CommonMessageFetchService_fetchScaledPressure_args() {
  }

  virtual ~CommonMessageFetchService_fetchScaledPressure_args() throw() {}

  std::vector<ScaledPressure>  msg;

  _CommonMessageFetchService_fetchScaledPressure_args__isset __isset;

  void __set_msg(const std::vector<ScaledPressure> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchScaledPressure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchScaledPressure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchScaledPressure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchScaledPressure_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchScaledPressure_pargs() throw() {}

  const std::vector<ScaledPressure> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchScaledPressure_result {
 public:

  CommonMessageFetchService_fetchScaledPressure_result() {
  }

  virtual ~CommonMessageFetchService_fetchScaledPressure_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchScaledPressure_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchScaledPressure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchScaledPressure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchScaledPressure_presult {
 public:


  virtual ~CommonMessageFetchService_fetchScaledPressure_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchAttitude_args__isset {
  _CommonMessageFetchService_fetchAttitude_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchAttitude_args__isset;

class CommonMessageFetchService_fetchAttitude_args {
 public:

  CommonMessageFetchService_fetchAttitude_args() {
  }

  virtual ~CommonMessageFetchService_fetchAttitude_args() throw() {}

  std::vector<Attitude>  msg;

  _CommonMessageFetchService_fetchAttitude_args__isset __isset;

  void __set_msg(const std::vector<Attitude> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchAttitude_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchAttitude_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchAttitude_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAttitude_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchAttitude_pargs() throw() {}

  const std::vector<Attitude> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAttitude_result {
 public:

  CommonMessageFetchService_fetchAttitude_result() {
  }

  virtual ~CommonMessageFetchService_fetchAttitude_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchAttitude_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchAttitude_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchAttitude_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAttitude_presult {
 public:


  virtual ~CommonMessageFetchService_fetchAttitude_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchAttitudeQuaternion_args__isset {
  _CommonMessageFetchService_fetchAttitudeQuaternion_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchAttitudeQuaternion_args__isset;

class CommonMessageFetchService_fetchAttitudeQuaternion_args {
 public:

  CommonMessageFetchService_fetchAttitudeQuaternion_args() {
  }

  virtual ~CommonMessageFetchService_fetchAttitudeQuaternion_args() throw() {}

  std::vector<AttitudeQuaternion>  msg;

  _CommonMessageFetchService_fetchAttitudeQuaternion_args__isset __isset;

  void __set_msg(const std::vector<AttitudeQuaternion> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchAttitudeQuaternion_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchAttitudeQuaternion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchAttitudeQuaternion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAttitudeQuaternion_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchAttitudeQuaternion_pargs() throw() {}

  const std::vector<AttitudeQuaternion> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAttitudeQuaternion_result {
 public:

  CommonMessageFetchService_fetchAttitudeQuaternion_result() {
  }

  virtual ~CommonMessageFetchService_fetchAttitudeQuaternion_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchAttitudeQuaternion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchAttitudeQuaternion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchAttitudeQuaternion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchAttitudeQuaternion_presult {
 public:


  virtual ~CommonMessageFetchService_fetchAttitudeQuaternion_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchLocalPositionNed_args__isset {
  _CommonMessageFetchService_fetchLocalPositionNed_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchLocalPositionNed_args__isset;

class CommonMessageFetchService_fetchLocalPositionNed_args {
 public:

  CommonMessageFetchService_fetchLocalPositionNed_args() {
  }

  virtual ~CommonMessageFetchService_fetchLocalPositionNed_args() throw() {}

  std::vector<LocalPositionNed>  msg;

  _CommonMessageFetchService_fetchLocalPositionNed_args__isset __isset;

  void __set_msg(const std::vector<LocalPositionNed> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchLocalPositionNed_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchLocalPositionNed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchLocalPositionNed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionNed_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchLocalPositionNed_pargs() throw() {}

  const std::vector<LocalPositionNed> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionNed_result {
 public:

  CommonMessageFetchService_fetchLocalPositionNed_result() {
  }

  virtual ~CommonMessageFetchService_fetchLocalPositionNed_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchLocalPositionNed_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchLocalPositionNed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchLocalPositionNed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionNed_presult {
 public:


  virtual ~CommonMessageFetchService_fetchLocalPositionNed_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchGlobalPositionInt_args__isset {
  _CommonMessageFetchService_fetchGlobalPositionInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchGlobalPositionInt_args__isset;

class CommonMessageFetchService_fetchGlobalPositionInt_args {
 public:

  CommonMessageFetchService_fetchGlobalPositionInt_args() {
  }

  virtual ~CommonMessageFetchService_fetchGlobalPositionInt_args() throw() {}

  std::vector<GlobalPositionInt>  msg;

  _CommonMessageFetchService_fetchGlobalPositionInt_args__isset __isset;

  void __set_msg(const std::vector<GlobalPositionInt> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchGlobalPositionInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGlobalPositionInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGlobalPositionInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalPositionInt_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchGlobalPositionInt_pargs() throw() {}

  const std::vector<GlobalPositionInt> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalPositionInt_result {
 public:

  CommonMessageFetchService_fetchGlobalPositionInt_result() {
  }

  virtual ~CommonMessageFetchService_fetchGlobalPositionInt_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchGlobalPositionInt_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGlobalPositionInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGlobalPositionInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalPositionInt_presult {
 public:


  virtual ~CommonMessageFetchService_fetchGlobalPositionInt_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRcChannelsScaled_args__isset {
  _CommonMessageFetchService_fetchRcChannelsScaled_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRcChannelsScaled_args__isset;

class CommonMessageFetchService_fetchRcChannelsScaled_args {
 public:

  CommonMessageFetchService_fetchRcChannelsScaled_args() {
  }

  virtual ~CommonMessageFetchService_fetchRcChannelsScaled_args() throw() {}

  std::vector<RcChannelsScaled>  msg;

  _CommonMessageFetchService_fetchRcChannelsScaled_args__isset __isset;

  void __set_msg(const std::vector<RcChannelsScaled> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRcChannelsScaled_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRcChannelsScaled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRcChannelsScaled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsScaled_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRcChannelsScaled_pargs() throw() {}

  const std::vector<RcChannelsScaled> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsScaled_result {
 public:

  CommonMessageFetchService_fetchRcChannelsScaled_result() {
  }

  virtual ~CommonMessageFetchService_fetchRcChannelsScaled_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRcChannelsScaled_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRcChannelsScaled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRcChannelsScaled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsScaled_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRcChannelsScaled_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRcChannelsRaw_args__isset {
  _CommonMessageFetchService_fetchRcChannelsRaw_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRcChannelsRaw_args__isset;

class CommonMessageFetchService_fetchRcChannelsRaw_args {
 public:

  CommonMessageFetchService_fetchRcChannelsRaw_args() {
  }

  virtual ~CommonMessageFetchService_fetchRcChannelsRaw_args() throw() {}

  std::vector<RcChannelsRaw>  msg;

  _CommonMessageFetchService_fetchRcChannelsRaw_args__isset __isset;

  void __set_msg(const std::vector<RcChannelsRaw> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRcChannelsRaw_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRcChannelsRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRcChannelsRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsRaw_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRcChannelsRaw_pargs() throw() {}

  const std::vector<RcChannelsRaw> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsRaw_result {
 public:

  CommonMessageFetchService_fetchRcChannelsRaw_result() {
  }

  virtual ~CommonMessageFetchService_fetchRcChannelsRaw_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRcChannelsRaw_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRcChannelsRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRcChannelsRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsRaw_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRcChannelsRaw_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchServoOutputRaw_args__isset {
  _CommonMessageFetchService_fetchServoOutputRaw_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchServoOutputRaw_args__isset;

class CommonMessageFetchService_fetchServoOutputRaw_args {
 public:

  CommonMessageFetchService_fetchServoOutputRaw_args() {
  }

  virtual ~CommonMessageFetchService_fetchServoOutputRaw_args() throw() {}

  std::vector<ServoOutputRaw>  msg;

  _CommonMessageFetchService_fetchServoOutputRaw_args__isset __isset;

  void __set_msg(const std::vector<ServoOutputRaw> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchServoOutputRaw_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchServoOutputRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchServoOutputRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchServoOutputRaw_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchServoOutputRaw_pargs() throw() {}

  const std::vector<ServoOutputRaw> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchServoOutputRaw_result {
 public:

  CommonMessageFetchService_fetchServoOutputRaw_result() {
  }

  virtual ~CommonMessageFetchService_fetchServoOutputRaw_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchServoOutputRaw_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchServoOutputRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchServoOutputRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchServoOutputRaw_presult {
 public:


  virtual ~CommonMessageFetchService_fetchServoOutputRaw_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionRequestPartialList_args__isset {
  _CommonMessageFetchService_fetchMissionRequestPartialList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionRequestPartialList_args__isset;

class CommonMessageFetchService_fetchMissionRequestPartialList_args {
 public:

  CommonMessageFetchService_fetchMissionRequestPartialList_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionRequestPartialList_args() throw() {}

  std::vector<MissionRequestPartialList>  msg;

  _CommonMessageFetchService_fetchMissionRequestPartialList_args__isset __isset;

  void __set_msg(const std::vector<MissionRequestPartialList> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionRequestPartialList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionRequestPartialList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionRequestPartialList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequestPartialList_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionRequestPartialList_pargs() throw() {}

  const std::vector<MissionRequestPartialList> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequestPartialList_result {
 public:

  CommonMessageFetchService_fetchMissionRequestPartialList_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionRequestPartialList_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionRequestPartialList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionRequestPartialList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionRequestPartialList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequestPartialList_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionRequestPartialList_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionWritePartialList_args__isset {
  _CommonMessageFetchService_fetchMissionWritePartialList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionWritePartialList_args__isset;

class CommonMessageFetchService_fetchMissionWritePartialList_args {
 public:

  CommonMessageFetchService_fetchMissionWritePartialList_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionWritePartialList_args() throw() {}

  std::vector<MissionWritePartialList>  msg;

  _CommonMessageFetchService_fetchMissionWritePartialList_args__isset __isset;

  void __set_msg(const std::vector<MissionWritePartialList> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionWritePartialList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionWritePartialList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionWritePartialList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionWritePartialList_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionWritePartialList_pargs() throw() {}

  const std::vector<MissionWritePartialList> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionWritePartialList_result {
 public:

  CommonMessageFetchService_fetchMissionWritePartialList_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionWritePartialList_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionWritePartialList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionWritePartialList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionWritePartialList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionWritePartialList_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionWritePartialList_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionItem_args__isset {
  _CommonMessageFetchService_fetchMissionItem_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionItem_args__isset;

class CommonMessageFetchService_fetchMissionItem_args {
 public:

  CommonMessageFetchService_fetchMissionItem_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionItem_args() throw() {}

  std::vector<MissionItem>  msg;

  _CommonMessageFetchService_fetchMissionItem_args__isset __isset;

  void __set_msg(const std::vector<MissionItem> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionItem_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionItem_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionItem_pargs() throw() {}

  const std::vector<MissionItem> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionItem_result {
 public:

  CommonMessageFetchService_fetchMissionItem_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionItem_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionItem_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionItem_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionItem_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionRequest_args__isset {
  _CommonMessageFetchService_fetchMissionRequest_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionRequest_args__isset;

class CommonMessageFetchService_fetchMissionRequest_args {
 public:

  CommonMessageFetchService_fetchMissionRequest_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionRequest_args() throw() {}

  std::vector<MissionRequest>  msg;

  _CommonMessageFetchService_fetchMissionRequest_args__isset __isset;

  void __set_msg(const std::vector<MissionRequest> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionRequest_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequest_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionRequest_pargs() throw() {}

  const std::vector<MissionRequest> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequest_result {
 public:

  CommonMessageFetchService_fetchMissionRequest_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionRequest_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionRequest_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequest_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionRequest_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionSetCurrent_args__isset {
  _CommonMessageFetchService_fetchMissionSetCurrent_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionSetCurrent_args__isset;

class CommonMessageFetchService_fetchMissionSetCurrent_args {
 public:

  CommonMessageFetchService_fetchMissionSetCurrent_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionSetCurrent_args() throw() {}

  std::vector<MissionSetCurrent>  msg;

  _CommonMessageFetchService_fetchMissionSetCurrent_args__isset __isset;

  void __set_msg(const std::vector<MissionSetCurrent> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionSetCurrent_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionSetCurrent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionSetCurrent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionSetCurrent_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionSetCurrent_pargs() throw() {}

  const std::vector<MissionSetCurrent> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionSetCurrent_result {
 public:

  CommonMessageFetchService_fetchMissionSetCurrent_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionSetCurrent_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionSetCurrent_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionSetCurrent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionSetCurrent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionSetCurrent_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionSetCurrent_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionCurrent_args__isset {
  _CommonMessageFetchService_fetchMissionCurrent_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionCurrent_args__isset;

class CommonMessageFetchService_fetchMissionCurrent_args {
 public:

  CommonMessageFetchService_fetchMissionCurrent_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionCurrent_args() throw() {}

  std::vector<MissionCurrent>  msg;

  _CommonMessageFetchService_fetchMissionCurrent_args__isset __isset;

  void __set_msg(const std::vector<MissionCurrent> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionCurrent_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionCurrent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionCurrent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionCurrent_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionCurrent_pargs() throw() {}

  const std::vector<MissionCurrent> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionCurrent_result {
 public:

  CommonMessageFetchService_fetchMissionCurrent_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionCurrent_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionCurrent_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionCurrent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionCurrent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionCurrent_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionCurrent_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionRequestList_args__isset {
  _CommonMessageFetchService_fetchMissionRequestList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionRequestList_args__isset;

class CommonMessageFetchService_fetchMissionRequestList_args {
 public:

  CommonMessageFetchService_fetchMissionRequestList_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionRequestList_args() throw() {}

  std::vector<MissionRequestList>  msg;

  _CommonMessageFetchService_fetchMissionRequestList_args__isset __isset;

  void __set_msg(const std::vector<MissionRequestList> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionRequestList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionRequestList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionRequestList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequestList_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionRequestList_pargs() throw() {}

  const std::vector<MissionRequestList> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequestList_result {
 public:

  CommonMessageFetchService_fetchMissionRequestList_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionRequestList_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionRequestList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionRequestList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionRequestList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionRequestList_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionRequestList_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionCount_args__isset {
  _CommonMessageFetchService_fetchMissionCount_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionCount_args__isset;

class CommonMessageFetchService_fetchMissionCount_args {
 public:

  CommonMessageFetchService_fetchMissionCount_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionCount_args() throw() {}

  std::vector<MissionCount>  msg;

  _CommonMessageFetchService_fetchMissionCount_args__isset __isset;

  void __set_msg(const std::vector<MissionCount> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionCount_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionCount_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionCount_pargs() throw() {}

  const std::vector<MissionCount> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionCount_result {
 public:

  CommonMessageFetchService_fetchMissionCount_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionCount_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionCount_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionCount_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionCount_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionClearAll_args__isset {
  _CommonMessageFetchService_fetchMissionClearAll_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionClearAll_args__isset;

class CommonMessageFetchService_fetchMissionClearAll_args {
 public:

  CommonMessageFetchService_fetchMissionClearAll_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionClearAll_args() throw() {}

  std::vector<MissionClearAll>  msg;

  _CommonMessageFetchService_fetchMissionClearAll_args__isset __isset;

  void __set_msg(const std::vector<MissionClearAll> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionClearAll_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionClearAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionClearAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionClearAll_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionClearAll_pargs() throw() {}

  const std::vector<MissionClearAll> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionClearAll_result {
 public:

  CommonMessageFetchService_fetchMissionClearAll_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionClearAll_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionClearAll_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionClearAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionClearAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionClearAll_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionClearAll_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionItemReached_args__isset {
  _CommonMessageFetchService_fetchMissionItemReached_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionItemReached_args__isset;

class CommonMessageFetchService_fetchMissionItemReached_args {
 public:

  CommonMessageFetchService_fetchMissionItemReached_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionItemReached_args() throw() {}

  std::vector<MissionItemReached>  msg;

  _CommonMessageFetchService_fetchMissionItemReached_args__isset __isset;

  void __set_msg(const std::vector<MissionItemReached> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionItemReached_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionItemReached_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionItemReached_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionItemReached_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionItemReached_pargs() throw() {}

  const std::vector<MissionItemReached> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionItemReached_result {
 public:

  CommonMessageFetchService_fetchMissionItemReached_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionItemReached_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionItemReached_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionItemReached_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionItemReached_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionItemReached_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionItemReached_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMissionAck_args__isset {
  _CommonMessageFetchService_fetchMissionAck_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMissionAck_args__isset;

class CommonMessageFetchService_fetchMissionAck_args {
 public:

  CommonMessageFetchService_fetchMissionAck_args() {
  }

  virtual ~CommonMessageFetchService_fetchMissionAck_args() throw() {}

  std::vector<MissionAck>  msg;

  _CommonMessageFetchService_fetchMissionAck_args__isset __isset;

  void __set_msg(const std::vector<MissionAck> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMissionAck_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionAck_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMissionAck_pargs() throw() {}

  const std::vector<MissionAck> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionAck_result {
 public:

  CommonMessageFetchService_fetchMissionAck_result() {
  }

  virtual ~CommonMessageFetchService_fetchMissionAck_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMissionAck_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMissionAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMissionAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMissionAck_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMissionAck_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetGpsGlobalOrigin_args__isset {
  _CommonMessageFetchService_fetchSetGpsGlobalOrigin_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetGpsGlobalOrigin_args__isset;

class CommonMessageFetchService_fetchSetGpsGlobalOrigin_args {
 public:

  CommonMessageFetchService_fetchSetGpsGlobalOrigin_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetGpsGlobalOrigin_args() throw() {}

  std::vector<SetGpsGlobalOrigin>  msg;

  _CommonMessageFetchService_fetchSetGpsGlobalOrigin_args__isset __isset;

  void __set_msg(const std::vector<SetGpsGlobalOrigin> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetGpsGlobalOrigin_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetGpsGlobalOrigin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetGpsGlobalOrigin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetGpsGlobalOrigin_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetGpsGlobalOrigin_pargs() throw() {}

  const std::vector<SetGpsGlobalOrigin> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetGpsGlobalOrigin_result {
 public:

  CommonMessageFetchService_fetchSetGpsGlobalOrigin_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetGpsGlobalOrigin_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetGpsGlobalOrigin_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetGpsGlobalOrigin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetGpsGlobalOrigin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetGpsGlobalOrigin_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetGpsGlobalOrigin_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchGpsGlobalOrigin_args__isset {
  _CommonMessageFetchService_fetchGpsGlobalOrigin_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchGpsGlobalOrigin_args__isset;

class CommonMessageFetchService_fetchGpsGlobalOrigin_args {
 public:

  CommonMessageFetchService_fetchGpsGlobalOrigin_args() {
  }

  virtual ~CommonMessageFetchService_fetchGpsGlobalOrigin_args() throw() {}

  std::vector<GpsGlobalOrigin>  msg;

  _CommonMessageFetchService_fetchGpsGlobalOrigin_args__isset __isset;

  void __set_msg(const std::vector<GpsGlobalOrigin> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchGpsGlobalOrigin_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGpsGlobalOrigin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGpsGlobalOrigin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsGlobalOrigin_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchGpsGlobalOrigin_pargs() throw() {}

  const std::vector<GpsGlobalOrigin> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsGlobalOrigin_result {
 public:

  CommonMessageFetchService_fetchGpsGlobalOrigin_result() {
  }

  virtual ~CommonMessageFetchService_fetchGpsGlobalOrigin_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchGpsGlobalOrigin_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGpsGlobalOrigin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGpsGlobalOrigin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGpsGlobalOrigin_presult {
 public:


  virtual ~CommonMessageFetchService_fetchGpsGlobalOrigin_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetLocalPositionSetpoint_args__isset {
  _CommonMessageFetchService_fetchSetLocalPositionSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetLocalPositionSetpoint_args__isset;

class CommonMessageFetchService_fetchSetLocalPositionSetpoint_args {
 public:

  CommonMessageFetchService_fetchSetLocalPositionSetpoint_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetLocalPositionSetpoint_args() throw() {}

  std::vector<SetLocalPositionSetpoint>  msg;

  _CommonMessageFetchService_fetchSetLocalPositionSetpoint_args__isset __isset;

  void __set_msg(const std::vector<SetLocalPositionSetpoint> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetLocalPositionSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetLocalPositionSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetLocalPositionSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetLocalPositionSetpoint_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetLocalPositionSetpoint_pargs() throw() {}

  const std::vector<SetLocalPositionSetpoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetLocalPositionSetpoint_result {
 public:

  CommonMessageFetchService_fetchSetLocalPositionSetpoint_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetLocalPositionSetpoint_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetLocalPositionSetpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetLocalPositionSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetLocalPositionSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetLocalPositionSetpoint_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetLocalPositionSetpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchLocalPositionSetpoint_args__isset {
  _CommonMessageFetchService_fetchLocalPositionSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchLocalPositionSetpoint_args__isset;

class CommonMessageFetchService_fetchLocalPositionSetpoint_args {
 public:

  CommonMessageFetchService_fetchLocalPositionSetpoint_args() {
  }

  virtual ~CommonMessageFetchService_fetchLocalPositionSetpoint_args() throw() {}

  std::vector<LocalPositionSetpoint>  msg;

  _CommonMessageFetchService_fetchLocalPositionSetpoint_args__isset __isset;

  void __set_msg(const std::vector<LocalPositionSetpoint> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchLocalPositionSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchLocalPositionSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchLocalPositionSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionSetpoint_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchLocalPositionSetpoint_pargs() throw() {}

  const std::vector<LocalPositionSetpoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionSetpoint_result {
 public:

  CommonMessageFetchService_fetchLocalPositionSetpoint_result() {
  }

  virtual ~CommonMessageFetchService_fetchLocalPositionSetpoint_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchLocalPositionSetpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchLocalPositionSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchLocalPositionSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionSetpoint_presult {
 public:


  virtual ~CommonMessageFetchService_fetchLocalPositionSetpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchGlobalPositionSetpointInt_args__isset {
  _CommonMessageFetchService_fetchGlobalPositionSetpointInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchGlobalPositionSetpointInt_args__isset;

class CommonMessageFetchService_fetchGlobalPositionSetpointInt_args {
 public:

  CommonMessageFetchService_fetchGlobalPositionSetpointInt_args() {
  }

  virtual ~CommonMessageFetchService_fetchGlobalPositionSetpointInt_args() throw() {}

  std::vector<GlobalPositionSetpointInt>  msg;

  _CommonMessageFetchService_fetchGlobalPositionSetpointInt_args__isset __isset;

  void __set_msg(const std::vector<GlobalPositionSetpointInt> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchGlobalPositionSetpointInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGlobalPositionSetpointInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGlobalPositionSetpointInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalPositionSetpointInt_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchGlobalPositionSetpointInt_pargs() throw() {}

  const std::vector<GlobalPositionSetpointInt> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalPositionSetpointInt_result {
 public:

  CommonMessageFetchService_fetchGlobalPositionSetpointInt_result() {
  }

  virtual ~CommonMessageFetchService_fetchGlobalPositionSetpointInt_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchGlobalPositionSetpointInt_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGlobalPositionSetpointInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGlobalPositionSetpointInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalPositionSetpointInt_presult {
 public:


  virtual ~CommonMessageFetchService_fetchGlobalPositionSetpointInt_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args__isset {
  _CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args__isset;

class CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args {
 public:

  CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args() throw() {}

  std::vector<SetGlobalPositionSetpointInt>  msg;

  _CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args__isset __isset;

  void __set_msg(const std::vector<SetGlobalPositionSetpointInt> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_pargs() throw() {}

  const std::vector<SetGlobalPositionSetpointInt> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_result {
 public:

  CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetGlobalPositionSetpointInt_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSafetySetAllowedArea_args__isset {
  _CommonMessageFetchService_fetchSafetySetAllowedArea_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSafetySetAllowedArea_args__isset;

class CommonMessageFetchService_fetchSafetySetAllowedArea_args {
 public:

  CommonMessageFetchService_fetchSafetySetAllowedArea_args() {
  }

  virtual ~CommonMessageFetchService_fetchSafetySetAllowedArea_args() throw() {}

  std::vector<SafetySetAllowedArea>  msg;

  _CommonMessageFetchService_fetchSafetySetAllowedArea_args__isset __isset;

  void __set_msg(const std::vector<SafetySetAllowedArea> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSafetySetAllowedArea_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSafetySetAllowedArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSafetySetAllowedArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSafetySetAllowedArea_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSafetySetAllowedArea_pargs() throw() {}

  const std::vector<SafetySetAllowedArea> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSafetySetAllowedArea_result {
 public:

  CommonMessageFetchService_fetchSafetySetAllowedArea_result() {
  }

  virtual ~CommonMessageFetchService_fetchSafetySetAllowedArea_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSafetySetAllowedArea_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSafetySetAllowedArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSafetySetAllowedArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSafetySetAllowedArea_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSafetySetAllowedArea_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSafetyAllowedArea_args__isset {
  _CommonMessageFetchService_fetchSafetyAllowedArea_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSafetyAllowedArea_args__isset;

class CommonMessageFetchService_fetchSafetyAllowedArea_args {
 public:

  CommonMessageFetchService_fetchSafetyAllowedArea_args() {
  }

  virtual ~CommonMessageFetchService_fetchSafetyAllowedArea_args() throw() {}

  std::vector<SafetyAllowedArea>  msg;

  _CommonMessageFetchService_fetchSafetyAllowedArea_args__isset __isset;

  void __set_msg(const std::vector<SafetyAllowedArea> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSafetyAllowedArea_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSafetyAllowedArea_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSafetyAllowedArea_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSafetyAllowedArea_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSafetyAllowedArea_pargs() throw() {}

  const std::vector<SafetyAllowedArea> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSafetyAllowedArea_result {
 public:

  CommonMessageFetchService_fetchSafetyAllowedArea_result() {
  }

  virtual ~CommonMessageFetchService_fetchSafetyAllowedArea_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSafetyAllowedArea_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSafetyAllowedArea_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSafetyAllowedArea_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSafetyAllowedArea_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSafetyAllowedArea_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetRollPitchYawThrust_args__isset {
  _CommonMessageFetchService_fetchSetRollPitchYawThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetRollPitchYawThrust_args__isset;

class CommonMessageFetchService_fetchSetRollPitchYawThrust_args {
 public:

  CommonMessageFetchService_fetchSetRollPitchYawThrust_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetRollPitchYawThrust_args() throw() {}

  std::vector<SetRollPitchYawThrust>  msg;

  _CommonMessageFetchService_fetchSetRollPitchYawThrust_args__isset __isset;

  void __set_msg(const std::vector<SetRollPitchYawThrust> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetRollPitchYawThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetRollPitchYawThrust_pargs() throw() {}

  const std::vector<SetRollPitchYawThrust> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetRollPitchYawThrust_result {
 public:

  CommonMessageFetchService_fetchSetRollPitchYawThrust_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetRollPitchYawThrust_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetRollPitchYawThrust_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetRollPitchYawThrust_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args__isset {
  _CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args__isset;

class CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args {
 public:

  CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args() throw() {}

  std::vector<SetRollPitchYawSpeedThrust>  msg;

  _CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args__isset __isset;

  void __set_msg(const std::vector<SetRollPitchYawSpeedThrust> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_pargs() throw() {}

  const std::vector<SetRollPitchYawSpeedThrust> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_result {
 public:

  CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetRollPitchYawSpeedThrust_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args__isset {
  _CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args__isset;

class CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args {
 public:

  CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args() {
  }

  virtual ~CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args() throw() {}

  std::vector<RollPitchYawThrustSetpoint>  msg;

  _CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args__isset __isset;

  void __set_msg(const std::vector<RollPitchYawThrustSetpoint> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_pargs() throw() {}

  const std::vector<RollPitchYawThrustSetpoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_result {
 public:

  CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_result() {
  }

  virtual ~CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRollPitchYawThrustSetpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args__isset {
  _CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args__isset;

class CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args {
 public:

  CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args() {
  }

  virtual ~CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args() throw() {}

  std::vector<RollPitchYawSpeedThrustSetpoint>  msg;

  _CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args__isset __isset;

  void __set_msg(const std::vector<RollPitchYawSpeedThrustSetpoint> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_pargs() throw() {}

  const std::vector<RollPitchYawSpeedThrustSetpoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_result {
 public:

  CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_result() {
  }

  virtual ~CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRollPitchYawSpeedThrustSetpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args__isset {
  _CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args__isset;

class CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args {
 public:

  CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args() throw() {}

  std::vector<SetQuadMotorsSetpoint>  msg;

  _CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args__isset __isset;

  void __set_msg(const std::vector<SetQuadMotorsSetpoint> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetQuadMotorsSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadMotorsSetpoint_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetQuadMotorsSetpoint_pargs() throw() {}

  const std::vector<SetQuadMotorsSetpoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadMotorsSetpoint_result {
 public:

  CommonMessageFetchService_fetchSetQuadMotorsSetpoint_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetQuadMotorsSetpoint_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetQuadMotorsSetpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetQuadMotorsSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetQuadMotorsSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadMotorsSetpoint_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetQuadMotorsSetpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args__isset {
  _CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args__isset;

class CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args {
 public:

  CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args() throw() {}

  std::vector<SetQuadSwarmRollPitchYawThrust>  msg;

  _CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args__isset __isset;

  void __set_msg(const std::vector<SetQuadSwarmRollPitchYawThrust> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_pargs() throw() {}

  const std::vector<SetQuadSwarmRollPitchYawThrust> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_result {
 public:

  CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetQuadSwarmRollPitchYawThrust_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchNavControllerOutput_args__isset {
  _CommonMessageFetchService_fetchNavControllerOutput_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchNavControllerOutput_args__isset;

class CommonMessageFetchService_fetchNavControllerOutput_args {
 public:

  CommonMessageFetchService_fetchNavControllerOutput_args() {
  }

  virtual ~CommonMessageFetchService_fetchNavControllerOutput_args() throw() {}

  std::vector<NavControllerOutput>  msg;

  _CommonMessageFetchService_fetchNavControllerOutput_args__isset __isset;

  void __set_msg(const std::vector<NavControllerOutput> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchNavControllerOutput_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchNavControllerOutput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchNavControllerOutput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNavControllerOutput_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchNavControllerOutput_pargs() throw() {}

  const std::vector<NavControllerOutput> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNavControllerOutput_result {
 public:

  CommonMessageFetchService_fetchNavControllerOutput_result() {
  }

  virtual ~CommonMessageFetchService_fetchNavControllerOutput_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchNavControllerOutput_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchNavControllerOutput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchNavControllerOutput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNavControllerOutput_presult {
 public:


  virtual ~CommonMessageFetchService_fetchNavControllerOutput_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args__isset {
  _CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args__isset;

class CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args {
 public:

  CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args() throw() {}

  std::vector<SetQuadSwarmLedRollPitchYawThrust>  msg;

  _CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args__isset __isset;

  void __set_msg(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_pargs() throw() {}

  const std::vector<SetQuadSwarmLedRollPitchYawThrust> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_result {
 public:

  CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetQuadSwarmLedRollPitchYawThrust_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchStateCorrection_args__isset {
  _CommonMessageFetchService_fetchStateCorrection_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchStateCorrection_args__isset;

class CommonMessageFetchService_fetchStateCorrection_args {
 public:

  CommonMessageFetchService_fetchStateCorrection_args() {
  }

  virtual ~CommonMessageFetchService_fetchStateCorrection_args() throw() {}

  std::vector<StateCorrection>  msg;

  _CommonMessageFetchService_fetchStateCorrection_args__isset __isset;

  void __set_msg(const std::vector<StateCorrection> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchStateCorrection_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchStateCorrection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchStateCorrection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchStateCorrection_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchStateCorrection_pargs() throw() {}

  const std::vector<StateCorrection> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchStateCorrection_result {
 public:

  CommonMessageFetchService_fetchStateCorrection_result() {
  }

  virtual ~CommonMessageFetchService_fetchStateCorrection_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchStateCorrection_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchStateCorrection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchStateCorrection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchStateCorrection_presult {
 public:


  virtual ~CommonMessageFetchService_fetchStateCorrection_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRequestDataStream_args__isset {
  _CommonMessageFetchService_fetchRequestDataStream_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRequestDataStream_args__isset;

class CommonMessageFetchService_fetchRequestDataStream_args {
 public:

  CommonMessageFetchService_fetchRequestDataStream_args() {
  }

  virtual ~CommonMessageFetchService_fetchRequestDataStream_args() throw() {}

  std::vector<RequestDataStream>  msg;

  _CommonMessageFetchService_fetchRequestDataStream_args__isset __isset;

  void __set_msg(const std::vector<RequestDataStream> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRequestDataStream_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRequestDataStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRequestDataStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRequestDataStream_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRequestDataStream_pargs() throw() {}

  const std::vector<RequestDataStream> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRequestDataStream_result {
 public:

  CommonMessageFetchService_fetchRequestDataStream_result() {
  }

  virtual ~CommonMessageFetchService_fetchRequestDataStream_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRequestDataStream_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRequestDataStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRequestDataStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRequestDataStream_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRequestDataStream_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchDataStream_args__isset {
  _CommonMessageFetchService_fetchDataStream_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchDataStream_args__isset;

class CommonMessageFetchService_fetchDataStream_args {
 public:

  CommonMessageFetchService_fetchDataStream_args() {
  }

  virtual ~CommonMessageFetchService_fetchDataStream_args() throw() {}

  std::vector<DataStream>  msg;

  _CommonMessageFetchService_fetchDataStream_args__isset __isset;

  void __set_msg(const std::vector<DataStream> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchDataStream_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchDataStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchDataStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDataStream_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchDataStream_pargs() throw() {}

  const std::vector<DataStream> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDataStream_result {
 public:

  CommonMessageFetchService_fetchDataStream_result() {
  }

  virtual ~CommonMessageFetchService_fetchDataStream_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchDataStream_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchDataStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchDataStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDataStream_presult {
 public:


  virtual ~CommonMessageFetchService_fetchDataStream_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchManualControl_args__isset {
  _CommonMessageFetchService_fetchManualControl_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchManualControl_args__isset;

class CommonMessageFetchService_fetchManualControl_args {
 public:

  CommonMessageFetchService_fetchManualControl_args() {
  }

  virtual ~CommonMessageFetchService_fetchManualControl_args() throw() {}

  std::vector<ManualControl>  msg;

  _CommonMessageFetchService_fetchManualControl_args__isset __isset;

  void __set_msg(const std::vector<ManualControl> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchManualControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchManualControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchManualControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchManualControl_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchManualControl_pargs() throw() {}

  const std::vector<ManualControl> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchManualControl_result {
 public:

  CommonMessageFetchService_fetchManualControl_result() {
  }

  virtual ~CommonMessageFetchService_fetchManualControl_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchManualControl_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchManualControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchManualControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchManualControl_presult {
 public:


  virtual ~CommonMessageFetchService_fetchManualControl_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRcChannelsOverride_args__isset {
  _CommonMessageFetchService_fetchRcChannelsOverride_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRcChannelsOverride_args__isset;

class CommonMessageFetchService_fetchRcChannelsOverride_args {
 public:

  CommonMessageFetchService_fetchRcChannelsOverride_args() {
  }

  virtual ~CommonMessageFetchService_fetchRcChannelsOverride_args() throw() {}

  std::vector<RcChannelsOverride>  msg;

  _CommonMessageFetchService_fetchRcChannelsOverride_args__isset __isset;

  void __set_msg(const std::vector<RcChannelsOverride> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRcChannelsOverride_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRcChannelsOverride_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRcChannelsOverride_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsOverride_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRcChannelsOverride_pargs() throw() {}

  const std::vector<RcChannelsOverride> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsOverride_result {
 public:

  CommonMessageFetchService_fetchRcChannelsOverride_result() {
  }

  virtual ~CommonMessageFetchService_fetchRcChannelsOverride_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRcChannelsOverride_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRcChannelsOverride_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRcChannelsOverride_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRcChannelsOverride_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRcChannelsOverride_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchVfrHud_args__isset {
  _CommonMessageFetchService_fetchVfrHud_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchVfrHud_args__isset;

class CommonMessageFetchService_fetchVfrHud_args {
 public:

  CommonMessageFetchService_fetchVfrHud_args() {
  }

  virtual ~CommonMessageFetchService_fetchVfrHud_args() throw() {}

  std::vector<VfrHud>  msg;

  _CommonMessageFetchService_fetchVfrHud_args__isset __isset;

  void __set_msg(const std::vector<VfrHud> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchVfrHud_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchVfrHud_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchVfrHud_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVfrHud_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchVfrHud_pargs() throw() {}

  const std::vector<VfrHud> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVfrHud_result {
 public:

  CommonMessageFetchService_fetchVfrHud_result() {
  }

  virtual ~CommonMessageFetchService_fetchVfrHud_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchVfrHud_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchVfrHud_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchVfrHud_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVfrHud_presult {
 public:


  virtual ~CommonMessageFetchService_fetchVfrHud_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchCommandLong_args__isset {
  _CommonMessageFetchService_fetchCommandLong_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchCommandLong_args__isset;

class CommonMessageFetchService_fetchCommandLong_args {
 public:

  CommonMessageFetchService_fetchCommandLong_args() {
  }

  virtual ~CommonMessageFetchService_fetchCommandLong_args() throw() {}

  std::vector<CommandLong>  msg;

  _CommonMessageFetchService_fetchCommandLong_args__isset __isset;

  void __set_msg(const std::vector<CommandLong> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchCommandLong_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchCommandLong_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchCommandLong_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchCommandLong_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchCommandLong_pargs() throw() {}

  const std::vector<CommandLong> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchCommandLong_result {
 public:

  CommonMessageFetchService_fetchCommandLong_result() {
  }

  virtual ~CommonMessageFetchService_fetchCommandLong_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchCommandLong_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchCommandLong_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchCommandLong_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchCommandLong_presult {
 public:


  virtual ~CommonMessageFetchService_fetchCommandLong_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchCommandAck_args__isset {
  _CommonMessageFetchService_fetchCommandAck_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchCommandAck_args__isset;

class CommonMessageFetchService_fetchCommandAck_args {
 public:

  CommonMessageFetchService_fetchCommandAck_args() {
  }

  virtual ~CommonMessageFetchService_fetchCommandAck_args() throw() {}

  std::vector<CommandAck>  msg;

  _CommonMessageFetchService_fetchCommandAck_args__isset __isset;

  void __set_msg(const std::vector<CommandAck> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchCommandAck_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchCommandAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchCommandAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchCommandAck_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchCommandAck_pargs() throw() {}

  const std::vector<CommandAck> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchCommandAck_result {
 public:

  CommonMessageFetchService_fetchCommandAck_result() {
  }

  virtual ~CommonMessageFetchService_fetchCommandAck_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchCommandAck_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchCommandAck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchCommandAck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchCommandAck_presult {
 public:


  virtual ~CommonMessageFetchService_fetchCommandAck_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args__isset {
  _CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args__isset;

class CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args {
 public:

  CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args() {
  }

  virtual ~CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args() throw() {}

  std::vector<RollPitchYawRatesThrustSetpoint>  msg;

  _CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args__isset __isset;

  void __set_msg(const std::vector<RollPitchYawRatesThrustSetpoint> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_pargs() throw() {}

  const std::vector<RollPitchYawRatesThrustSetpoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_result {
 public:

  CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_result() {
  }

  virtual ~CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_presult {
 public:


  virtual ~CommonMessageFetchService_fetchRollPitchYawRatesThrustSetpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchManualSetpoint_args__isset {
  _CommonMessageFetchService_fetchManualSetpoint_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchManualSetpoint_args__isset;

class CommonMessageFetchService_fetchManualSetpoint_args {
 public:

  CommonMessageFetchService_fetchManualSetpoint_args() {
  }

  virtual ~CommonMessageFetchService_fetchManualSetpoint_args() throw() {}

  std::vector<ManualSetpoint>  msg;

  _CommonMessageFetchService_fetchManualSetpoint_args__isset __isset;

  void __set_msg(const std::vector<ManualSetpoint> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchManualSetpoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchManualSetpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchManualSetpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchManualSetpoint_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchManualSetpoint_pargs() throw() {}

  const std::vector<ManualSetpoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchManualSetpoint_result {
 public:

  CommonMessageFetchService_fetchManualSetpoint_result() {
  }

  virtual ~CommonMessageFetchService_fetchManualSetpoint_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchManualSetpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchManualSetpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchManualSetpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchManualSetpoint_presult {
 public:


  virtual ~CommonMessageFetchService_fetchManualSetpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args__isset {
  _CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args__isset;

class CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args {
 public:

  CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args() {
  }

  virtual ~CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args() throw() {}

  std::vector<LocalPositionNedSystemGlobalOffset>  msg;

  _CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args__isset __isset;

  void __set_msg(const std::vector<LocalPositionNedSystemGlobalOffset> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_pargs() throw() {}

  const std::vector<LocalPositionNedSystemGlobalOffset> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_result {
 public:

  CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_result() {
  }

  virtual ~CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_presult {
 public:


  virtual ~CommonMessageFetchService_fetchLocalPositionNedSystemGlobalOffset_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchHilState_args__isset {
  _CommonMessageFetchService_fetchHilState_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchHilState_args__isset;

class CommonMessageFetchService_fetchHilState_args {
 public:

  CommonMessageFetchService_fetchHilState_args() {
  }

  virtual ~CommonMessageFetchService_fetchHilState_args() throw() {}

  std::vector<HilState>  msg;

  _CommonMessageFetchService_fetchHilState_args__isset __isset;

  void __set_msg(const std::vector<HilState> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchHilState_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHilState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHilState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilState_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchHilState_pargs() throw() {}

  const std::vector<HilState> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilState_result {
 public:

  CommonMessageFetchService_fetchHilState_result() {
  }

  virtual ~CommonMessageFetchService_fetchHilState_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchHilState_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHilState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHilState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilState_presult {
 public:


  virtual ~CommonMessageFetchService_fetchHilState_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchHilControls_args__isset {
  _CommonMessageFetchService_fetchHilControls_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchHilControls_args__isset;

class CommonMessageFetchService_fetchHilControls_args {
 public:

  CommonMessageFetchService_fetchHilControls_args() {
  }

  virtual ~CommonMessageFetchService_fetchHilControls_args() throw() {}

  std::vector<HilControls>  msg;

  _CommonMessageFetchService_fetchHilControls_args__isset __isset;

  void __set_msg(const std::vector<HilControls> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchHilControls_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHilControls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHilControls_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilControls_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchHilControls_pargs() throw() {}

  const std::vector<HilControls> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilControls_result {
 public:

  CommonMessageFetchService_fetchHilControls_result() {
  }

  virtual ~CommonMessageFetchService_fetchHilControls_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchHilControls_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHilControls_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHilControls_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilControls_presult {
 public:


  virtual ~CommonMessageFetchService_fetchHilControls_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchHilRcInputsRaw_args__isset {
  _CommonMessageFetchService_fetchHilRcInputsRaw_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchHilRcInputsRaw_args__isset;

class CommonMessageFetchService_fetchHilRcInputsRaw_args {
 public:

  CommonMessageFetchService_fetchHilRcInputsRaw_args() {
  }

  virtual ~CommonMessageFetchService_fetchHilRcInputsRaw_args() throw() {}

  std::vector<HilRcInputsRaw>  msg;

  _CommonMessageFetchService_fetchHilRcInputsRaw_args__isset __isset;

  void __set_msg(const std::vector<HilRcInputsRaw> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchHilRcInputsRaw_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHilRcInputsRaw_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHilRcInputsRaw_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilRcInputsRaw_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchHilRcInputsRaw_pargs() throw() {}

  const std::vector<HilRcInputsRaw> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilRcInputsRaw_result {
 public:

  CommonMessageFetchService_fetchHilRcInputsRaw_result() {
  }

  virtual ~CommonMessageFetchService_fetchHilRcInputsRaw_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchHilRcInputsRaw_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHilRcInputsRaw_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHilRcInputsRaw_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHilRcInputsRaw_presult {
 public:


  virtual ~CommonMessageFetchService_fetchHilRcInputsRaw_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchOpticalFlow_args__isset {
  _CommonMessageFetchService_fetchOpticalFlow_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchOpticalFlow_args__isset;

class CommonMessageFetchService_fetchOpticalFlow_args {
 public:

  CommonMessageFetchService_fetchOpticalFlow_args() {
  }

  virtual ~CommonMessageFetchService_fetchOpticalFlow_args() throw() {}

  std::vector<OpticalFlow>  msg;

  _CommonMessageFetchService_fetchOpticalFlow_args__isset __isset;

  void __set_msg(const std::vector<OpticalFlow> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchOpticalFlow_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchOpticalFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchOpticalFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchOpticalFlow_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchOpticalFlow_pargs() throw() {}

  const std::vector<OpticalFlow> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchOpticalFlow_result {
 public:

  CommonMessageFetchService_fetchOpticalFlow_result() {
  }

  virtual ~CommonMessageFetchService_fetchOpticalFlow_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchOpticalFlow_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchOpticalFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchOpticalFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchOpticalFlow_presult {
 public:


  virtual ~CommonMessageFetchService_fetchOpticalFlow_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args__isset {
  _CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args__isset;

class CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args {
 public:

  CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args() {
  }

  virtual ~CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args() throw() {}

  std::vector<GlobalVisionPositionEstimate>  msg;

  _CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args__isset __isset;

  void __set_msg(const std::vector<GlobalVisionPositionEstimate> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGlobalVisionPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalVisionPositionEstimate_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchGlobalVisionPositionEstimate_pargs() throw() {}

  const std::vector<GlobalVisionPositionEstimate> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalVisionPositionEstimate_result {
 public:

  CommonMessageFetchService_fetchGlobalVisionPositionEstimate_result() {
  }

  virtual ~CommonMessageFetchService_fetchGlobalVisionPositionEstimate_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchGlobalVisionPositionEstimate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchGlobalVisionPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchGlobalVisionPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchGlobalVisionPositionEstimate_presult {
 public:


  virtual ~CommonMessageFetchService_fetchGlobalVisionPositionEstimate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchVisionPositionEstimate_args__isset {
  _CommonMessageFetchService_fetchVisionPositionEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchVisionPositionEstimate_args__isset;

class CommonMessageFetchService_fetchVisionPositionEstimate_args {
 public:

  CommonMessageFetchService_fetchVisionPositionEstimate_args() {
  }

  virtual ~CommonMessageFetchService_fetchVisionPositionEstimate_args() throw() {}

  std::vector<VisionPositionEstimate>  msg;

  _CommonMessageFetchService_fetchVisionPositionEstimate_args__isset __isset;

  void __set_msg(const std::vector<VisionPositionEstimate> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchVisionPositionEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchVisionPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchVisionPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVisionPositionEstimate_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchVisionPositionEstimate_pargs() throw() {}

  const std::vector<VisionPositionEstimate> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVisionPositionEstimate_result {
 public:

  CommonMessageFetchService_fetchVisionPositionEstimate_result() {
  }

  virtual ~CommonMessageFetchService_fetchVisionPositionEstimate_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchVisionPositionEstimate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchVisionPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchVisionPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVisionPositionEstimate_presult {
 public:


  virtual ~CommonMessageFetchService_fetchVisionPositionEstimate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchVisionSpeedEstimate_args__isset {
  _CommonMessageFetchService_fetchVisionSpeedEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchVisionSpeedEstimate_args__isset;

class CommonMessageFetchService_fetchVisionSpeedEstimate_args {
 public:

  CommonMessageFetchService_fetchVisionSpeedEstimate_args() {
  }

  virtual ~CommonMessageFetchService_fetchVisionSpeedEstimate_args() throw() {}

  std::vector<VisionSpeedEstimate>  msg;

  _CommonMessageFetchService_fetchVisionSpeedEstimate_args__isset __isset;

  void __set_msg(const std::vector<VisionSpeedEstimate> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchVisionSpeedEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchVisionSpeedEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchVisionSpeedEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVisionSpeedEstimate_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchVisionSpeedEstimate_pargs() throw() {}

  const std::vector<VisionSpeedEstimate> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVisionSpeedEstimate_result {
 public:

  CommonMessageFetchService_fetchVisionSpeedEstimate_result() {
  }

  virtual ~CommonMessageFetchService_fetchVisionSpeedEstimate_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchVisionSpeedEstimate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchVisionSpeedEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchVisionSpeedEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchVisionSpeedEstimate_presult {
 public:


  virtual ~CommonMessageFetchService_fetchVisionSpeedEstimate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchViconPositionEstimate_args__isset {
  _CommonMessageFetchService_fetchViconPositionEstimate_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchViconPositionEstimate_args__isset;

class CommonMessageFetchService_fetchViconPositionEstimate_args {
 public:

  CommonMessageFetchService_fetchViconPositionEstimate_args() {
  }

  virtual ~CommonMessageFetchService_fetchViconPositionEstimate_args() throw() {}

  std::vector<ViconPositionEstimate>  msg;

  _CommonMessageFetchService_fetchViconPositionEstimate_args__isset __isset;

  void __set_msg(const std::vector<ViconPositionEstimate> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchViconPositionEstimate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchViconPositionEstimate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchViconPositionEstimate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchViconPositionEstimate_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchViconPositionEstimate_pargs() throw() {}

  const std::vector<ViconPositionEstimate> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchViconPositionEstimate_result {
 public:

  CommonMessageFetchService_fetchViconPositionEstimate_result() {
  }

  virtual ~CommonMessageFetchService_fetchViconPositionEstimate_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchViconPositionEstimate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchViconPositionEstimate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchViconPositionEstimate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchViconPositionEstimate_presult {
 public:


  virtual ~CommonMessageFetchService_fetchViconPositionEstimate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchHighresImu_args__isset {
  _CommonMessageFetchService_fetchHighresImu_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchHighresImu_args__isset;

class CommonMessageFetchService_fetchHighresImu_args {
 public:

  CommonMessageFetchService_fetchHighresImu_args() {
  }

  virtual ~CommonMessageFetchService_fetchHighresImu_args() throw() {}

  std::vector<HighresImu>  msg;

  _CommonMessageFetchService_fetchHighresImu_args__isset __isset;

  void __set_msg(const std::vector<HighresImu> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchHighresImu_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHighresImu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHighresImu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHighresImu_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchHighresImu_pargs() throw() {}

  const std::vector<HighresImu> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHighresImu_result {
 public:

  CommonMessageFetchService_fetchHighresImu_result() {
  }

  virtual ~CommonMessageFetchService_fetchHighresImu_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchHighresImu_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchHighresImu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchHighresImu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchHighresImu_presult {
 public:


  virtual ~CommonMessageFetchService_fetchHighresImu_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchOmnidirectionalFlow_args__isset {
  _CommonMessageFetchService_fetchOmnidirectionalFlow_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchOmnidirectionalFlow_args__isset;

class CommonMessageFetchService_fetchOmnidirectionalFlow_args {
 public:

  CommonMessageFetchService_fetchOmnidirectionalFlow_args() {
  }

  virtual ~CommonMessageFetchService_fetchOmnidirectionalFlow_args() throw() {}

  std::vector<OmnidirectionalFlow>  msg;

  _CommonMessageFetchService_fetchOmnidirectionalFlow_args__isset __isset;

  void __set_msg(const std::vector<OmnidirectionalFlow> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchOmnidirectionalFlow_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchOmnidirectionalFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchOmnidirectionalFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchOmnidirectionalFlow_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchOmnidirectionalFlow_pargs() throw() {}

  const std::vector<OmnidirectionalFlow> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchOmnidirectionalFlow_result {
 public:

  CommonMessageFetchService_fetchOmnidirectionalFlow_result() {
  }

  virtual ~CommonMessageFetchService_fetchOmnidirectionalFlow_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchOmnidirectionalFlow_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchOmnidirectionalFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchOmnidirectionalFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchOmnidirectionalFlow_presult {
 public:


  virtual ~CommonMessageFetchService_fetchOmnidirectionalFlow_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchFileTransferStart_args__isset {
  _CommonMessageFetchService_fetchFileTransferStart_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchFileTransferStart_args__isset;

class CommonMessageFetchService_fetchFileTransferStart_args {
 public:

  CommonMessageFetchService_fetchFileTransferStart_args() {
  }

  virtual ~CommonMessageFetchService_fetchFileTransferStart_args() throw() {}

  std::vector<FileTransferStart>  msg;

  _CommonMessageFetchService_fetchFileTransferStart_args__isset __isset;

  void __set_msg(const std::vector<FileTransferStart> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchFileTransferStart_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchFileTransferStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchFileTransferStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferStart_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchFileTransferStart_pargs() throw() {}

  const std::vector<FileTransferStart> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferStart_result {
 public:

  CommonMessageFetchService_fetchFileTransferStart_result() {
  }

  virtual ~CommonMessageFetchService_fetchFileTransferStart_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchFileTransferStart_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchFileTransferStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchFileTransferStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferStart_presult {
 public:


  virtual ~CommonMessageFetchService_fetchFileTransferStart_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchFileTransferDirList_args__isset {
  _CommonMessageFetchService_fetchFileTransferDirList_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchFileTransferDirList_args__isset;

class CommonMessageFetchService_fetchFileTransferDirList_args {
 public:

  CommonMessageFetchService_fetchFileTransferDirList_args() {
  }

  virtual ~CommonMessageFetchService_fetchFileTransferDirList_args() throw() {}

  std::vector<FileTransferDirList>  msg;

  _CommonMessageFetchService_fetchFileTransferDirList_args__isset __isset;

  void __set_msg(const std::vector<FileTransferDirList> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchFileTransferDirList_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchFileTransferDirList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchFileTransferDirList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferDirList_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchFileTransferDirList_pargs() throw() {}

  const std::vector<FileTransferDirList> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferDirList_result {
 public:

  CommonMessageFetchService_fetchFileTransferDirList_result() {
  }

  virtual ~CommonMessageFetchService_fetchFileTransferDirList_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchFileTransferDirList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchFileTransferDirList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchFileTransferDirList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferDirList_presult {
 public:


  virtual ~CommonMessageFetchService_fetchFileTransferDirList_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchFileTransferRes_args__isset {
  _CommonMessageFetchService_fetchFileTransferRes_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchFileTransferRes_args__isset;

class CommonMessageFetchService_fetchFileTransferRes_args {
 public:

  CommonMessageFetchService_fetchFileTransferRes_args() {
  }

  virtual ~CommonMessageFetchService_fetchFileTransferRes_args() throw() {}

  std::vector<FileTransferRes>  msg;

  _CommonMessageFetchService_fetchFileTransferRes_args__isset __isset;

  void __set_msg(const std::vector<FileTransferRes> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchFileTransferRes_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchFileTransferRes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchFileTransferRes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferRes_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchFileTransferRes_pargs() throw() {}

  const std::vector<FileTransferRes> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferRes_result {
 public:

  CommonMessageFetchService_fetchFileTransferRes_result() {
  }

  virtual ~CommonMessageFetchService_fetchFileTransferRes_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchFileTransferRes_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchFileTransferRes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchFileTransferRes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchFileTransferRes_presult {
 public:


  virtual ~CommonMessageFetchService_fetchFileTransferRes_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchBatteryStatus_args__isset {
  _CommonMessageFetchService_fetchBatteryStatus_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchBatteryStatus_args__isset;

class CommonMessageFetchService_fetchBatteryStatus_args {
 public:

  CommonMessageFetchService_fetchBatteryStatus_args() {
  }

  virtual ~CommonMessageFetchService_fetchBatteryStatus_args() throw() {}

  std::vector<BatteryStatus>  msg;

  _CommonMessageFetchService_fetchBatteryStatus_args__isset __isset;

  void __set_msg(const std::vector<BatteryStatus> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchBatteryStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchBatteryStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchBatteryStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchBatteryStatus_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchBatteryStatus_pargs() throw() {}

  const std::vector<BatteryStatus> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchBatteryStatus_result {
 public:

  CommonMessageFetchService_fetchBatteryStatus_result() {
  }

  virtual ~CommonMessageFetchService_fetchBatteryStatus_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchBatteryStatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchBatteryStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchBatteryStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchBatteryStatus_presult {
 public:


  virtual ~CommonMessageFetchService_fetchBatteryStatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetpoint8dof_args__isset {
  _CommonMessageFetchService_fetchSetpoint8dof_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetpoint8dof_args__isset;

class CommonMessageFetchService_fetchSetpoint8dof_args {
 public:

  CommonMessageFetchService_fetchSetpoint8dof_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetpoint8dof_args() throw() {}

  std::vector<Setpoint8dof>  msg;

  _CommonMessageFetchService_fetchSetpoint8dof_args__isset __isset;

  void __set_msg(const std::vector<Setpoint8dof> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetpoint8dof_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetpoint8dof_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetpoint8dof_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetpoint8dof_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetpoint8dof_pargs() throw() {}

  const std::vector<Setpoint8dof> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetpoint8dof_result {
 public:

  CommonMessageFetchService_fetchSetpoint8dof_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetpoint8dof_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetpoint8dof_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetpoint8dof_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetpoint8dof_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetpoint8dof_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetpoint8dof_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchSetpoint6dof_args__isset {
  _CommonMessageFetchService_fetchSetpoint6dof_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchSetpoint6dof_args__isset;

class CommonMessageFetchService_fetchSetpoint6dof_args {
 public:

  CommonMessageFetchService_fetchSetpoint6dof_args() {
  }

  virtual ~CommonMessageFetchService_fetchSetpoint6dof_args() throw() {}

  std::vector<Setpoint6dof>  msg;

  _CommonMessageFetchService_fetchSetpoint6dof_args__isset __isset;

  void __set_msg(const std::vector<Setpoint6dof> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchSetpoint6dof_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetpoint6dof_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetpoint6dof_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetpoint6dof_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchSetpoint6dof_pargs() throw() {}

  const std::vector<Setpoint6dof> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetpoint6dof_result {
 public:

  CommonMessageFetchService_fetchSetpoint6dof_result() {
  }

  virtual ~CommonMessageFetchService_fetchSetpoint6dof_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchSetpoint6dof_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchSetpoint6dof_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchSetpoint6dof_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchSetpoint6dof_presult {
 public:


  virtual ~CommonMessageFetchService_fetchSetpoint6dof_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchMemoryVect_args__isset {
  _CommonMessageFetchService_fetchMemoryVect_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchMemoryVect_args__isset;

class CommonMessageFetchService_fetchMemoryVect_args {
 public:

  CommonMessageFetchService_fetchMemoryVect_args() {
  }

  virtual ~CommonMessageFetchService_fetchMemoryVect_args() throw() {}

  std::vector<MemoryVect>  msg;

  _CommonMessageFetchService_fetchMemoryVect_args__isset __isset;

  void __set_msg(const std::vector<MemoryVect> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchMemoryVect_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMemoryVect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMemoryVect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMemoryVect_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchMemoryVect_pargs() throw() {}

  const std::vector<MemoryVect> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMemoryVect_result {
 public:

  CommonMessageFetchService_fetchMemoryVect_result() {
  }

  virtual ~CommonMessageFetchService_fetchMemoryVect_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchMemoryVect_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchMemoryVect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchMemoryVect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchMemoryVect_presult {
 public:


  virtual ~CommonMessageFetchService_fetchMemoryVect_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchDebugVect_args__isset {
  _CommonMessageFetchService_fetchDebugVect_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchDebugVect_args__isset;

class CommonMessageFetchService_fetchDebugVect_args {
 public:

  CommonMessageFetchService_fetchDebugVect_args() {
  }

  virtual ~CommonMessageFetchService_fetchDebugVect_args() throw() {}

  std::vector<DebugVect>  msg;

  _CommonMessageFetchService_fetchDebugVect_args__isset __isset;

  void __set_msg(const std::vector<DebugVect> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchDebugVect_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchDebugVect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchDebugVect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDebugVect_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchDebugVect_pargs() throw() {}

  const std::vector<DebugVect> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDebugVect_result {
 public:

  CommonMessageFetchService_fetchDebugVect_result() {
  }

  virtual ~CommonMessageFetchService_fetchDebugVect_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchDebugVect_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchDebugVect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchDebugVect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDebugVect_presult {
 public:


  virtual ~CommonMessageFetchService_fetchDebugVect_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchNamedValueFloat_args__isset {
  _CommonMessageFetchService_fetchNamedValueFloat_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchNamedValueFloat_args__isset;

class CommonMessageFetchService_fetchNamedValueFloat_args {
 public:

  CommonMessageFetchService_fetchNamedValueFloat_args() {
  }

  virtual ~CommonMessageFetchService_fetchNamedValueFloat_args() throw() {}

  std::vector<NamedValueFloat>  msg;

  _CommonMessageFetchService_fetchNamedValueFloat_args__isset __isset;

  void __set_msg(const std::vector<NamedValueFloat> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchNamedValueFloat_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchNamedValueFloat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchNamedValueFloat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNamedValueFloat_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchNamedValueFloat_pargs() throw() {}

  const std::vector<NamedValueFloat> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNamedValueFloat_result {
 public:

  CommonMessageFetchService_fetchNamedValueFloat_result() {
  }

  virtual ~CommonMessageFetchService_fetchNamedValueFloat_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchNamedValueFloat_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchNamedValueFloat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchNamedValueFloat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNamedValueFloat_presult {
 public:


  virtual ~CommonMessageFetchService_fetchNamedValueFloat_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchNamedValueInt_args__isset {
  _CommonMessageFetchService_fetchNamedValueInt_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchNamedValueInt_args__isset;

class CommonMessageFetchService_fetchNamedValueInt_args {
 public:

  CommonMessageFetchService_fetchNamedValueInt_args() {
  }

  virtual ~CommonMessageFetchService_fetchNamedValueInt_args() throw() {}

  std::vector<NamedValueInt>  msg;

  _CommonMessageFetchService_fetchNamedValueInt_args__isset __isset;

  void __set_msg(const std::vector<NamedValueInt> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchNamedValueInt_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchNamedValueInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchNamedValueInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNamedValueInt_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchNamedValueInt_pargs() throw() {}

  const std::vector<NamedValueInt> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNamedValueInt_result {
 public:

  CommonMessageFetchService_fetchNamedValueInt_result() {
  }

  virtual ~CommonMessageFetchService_fetchNamedValueInt_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchNamedValueInt_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchNamedValueInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchNamedValueInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchNamedValueInt_presult {
 public:


  virtual ~CommonMessageFetchService_fetchNamedValueInt_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchStatustext_args__isset {
  _CommonMessageFetchService_fetchStatustext_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchStatustext_args__isset;

class CommonMessageFetchService_fetchStatustext_args {
 public:

  CommonMessageFetchService_fetchStatustext_args() {
  }

  virtual ~CommonMessageFetchService_fetchStatustext_args() throw() {}

  std::vector<Statustext>  msg;

  _CommonMessageFetchService_fetchStatustext_args__isset __isset;

  void __set_msg(const std::vector<Statustext> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchStatustext_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchStatustext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchStatustext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchStatustext_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchStatustext_pargs() throw() {}

  const std::vector<Statustext> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchStatustext_result {
 public:

  CommonMessageFetchService_fetchStatustext_result() {
  }

  virtual ~CommonMessageFetchService_fetchStatustext_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchStatustext_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchStatustext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchStatustext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchStatustext_presult {
 public:


  virtual ~CommonMessageFetchService_fetchStatustext_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonMessageFetchService_fetchDebug_args__isset {
  _CommonMessageFetchService_fetchDebug_args__isset() : msg(false) {}
  bool msg;
} _CommonMessageFetchService_fetchDebug_args__isset;

class CommonMessageFetchService_fetchDebug_args {
 public:

  CommonMessageFetchService_fetchDebug_args() {
  }

  virtual ~CommonMessageFetchService_fetchDebug_args() throw() {}

  std::vector<Debug>  msg;

  _CommonMessageFetchService_fetchDebug_args__isset __isset;

  void __set_msg(const std::vector<Debug> & val) {
    msg = val;
  }

  bool operator == (const CommonMessageFetchService_fetchDebug_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchDebug_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchDebug_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDebug_pargs {
 public:


  virtual ~CommonMessageFetchService_fetchDebug_pargs() throw() {}

  const std::vector<Debug> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDebug_result {
 public:

  CommonMessageFetchService_fetchDebug_result() {
  }

  virtual ~CommonMessageFetchService_fetchDebug_result() throw() {}


  bool operator == (const CommonMessageFetchService_fetchDebug_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonMessageFetchService_fetchDebug_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonMessageFetchService_fetchDebug_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonMessageFetchService_fetchDebug_presult {
 public:


  virtual ~CommonMessageFetchService_fetchDebug_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CommonMessageFetchServiceClient : virtual public CommonMessageFetchServiceIf {
 public:
  CommonMessageFetchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CommonMessageFetchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return);
  void send_availableMessages();
  void recv_availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return);
  void fetchHeartbeat(const std::vector<Heartbeat> & msg);
  void send_fetchHeartbeat(const std::vector<Heartbeat> & msg);
  void recv_fetchHeartbeat();
  void fetchSysStatus(const std::vector<SysStatus> & msg);
  void send_fetchSysStatus(const std::vector<SysStatus> & msg);
  void recv_fetchSysStatus();
  void fetchSystemTime(const std::vector<SystemTime> & msg);
  void send_fetchSystemTime(const std::vector<SystemTime> & msg);
  void recv_fetchSystemTime();
  void fetchPing(const std::vector<Ping> & msg);
  void send_fetchPing(const std::vector<Ping> & msg);
  void recv_fetchPing();
  void fetchChangeOperatorControl(const std::vector<ChangeOperatorControl> & msg);
  void send_fetchChangeOperatorControl(const std::vector<ChangeOperatorControl> & msg);
  void recv_fetchChangeOperatorControl();
  void fetchChangeOperatorControlAck(const std::vector<ChangeOperatorControlAck> & msg);
  void send_fetchChangeOperatorControlAck(const std::vector<ChangeOperatorControlAck> & msg);
  void recv_fetchChangeOperatorControlAck();
  void fetchAuthKey(const std::vector<AuthKey> & msg);
  void send_fetchAuthKey(const std::vector<AuthKey> & msg);
  void recv_fetchAuthKey();
  void fetchSetMode(const std::vector<SetMode> & msg);
  void send_fetchSetMode(const std::vector<SetMode> & msg);
  void recv_fetchSetMode();
  void fetchParamRequestRead(const std::vector<ParamRequestRead> & msg);
  void send_fetchParamRequestRead(const std::vector<ParamRequestRead> & msg);
  void recv_fetchParamRequestRead();
  void fetchParamRequestList(const std::vector<ParamRequestList> & msg);
  void send_fetchParamRequestList(const std::vector<ParamRequestList> & msg);
  void recv_fetchParamRequestList();
  void fetchParamValue(const std::vector<ParamValue> & msg);
  void send_fetchParamValue(const std::vector<ParamValue> & msg);
  void recv_fetchParamValue();
  void fetchParamSet(const std::vector<ParamSet> & msg);
  void send_fetchParamSet(const std::vector<ParamSet> & msg);
  void recv_fetchParamSet();
  void fetchGpsRawInt(const std::vector<GpsRawInt> & msg);
  void send_fetchGpsRawInt(const std::vector<GpsRawInt> & msg);
  void recv_fetchGpsRawInt();
  void fetchGpsStatus(const std::vector<GpsStatus> & msg);
  void send_fetchGpsStatus(const std::vector<GpsStatus> & msg);
  void recv_fetchGpsStatus();
  void fetchScaledImu(const std::vector<ScaledImu> & msg);
  void send_fetchScaledImu(const std::vector<ScaledImu> & msg);
  void recv_fetchScaledImu();
  void fetchRawImu(const std::vector<RawImu> & msg);
  void send_fetchRawImu(const std::vector<RawImu> & msg);
  void recv_fetchRawImu();
  void fetchRawPressure(const std::vector<RawPressure> & msg);
  void send_fetchRawPressure(const std::vector<RawPressure> & msg);
  void recv_fetchRawPressure();
  void fetchScaledPressure(const std::vector<ScaledPressure> & msg);
  void send_fetchScaledPressure(const std::vector<ScaledPressure> & msg);
  void recv_fetchScaledPressure();
  void fetchAttitude(const std::vector<Attitude> & msg);
  void send_fetchAttitude(const std::vector<Attitude> & msg);
  void recv_fetchAttitude();
  void fetchAttitudeQuaternion(const std::vector<AttitudeQuaternion> & msg);
  void send_fetchAttitudeQuaternion(const std::vector<AttitudeQuaternion> & msg);
  void recv_fetchAttitudeQuaternion();
  void fetchLocalPositionNed(const std::vector<LocalPositionNed> & msg);
  void send_fetchLocalPositionNed(const std::vector<LocalPositionNed> & msg);
  void recv_fetchLocalPositionNed();
  void fetchGlobalPositionInt(const std::vector<GlobalPositionInt> & msg);
  void send_fetchGlobalPositionInt(const std::vector<GlobalPositionInt> & msg);
  void recv_fetchGlobalPositionInt();
  void fetchRcChannelsScaled(const std::vector<RcChannelsScaled> & msg);
  void send_fetchRcChannelsScaled(const std::vector<RcChannelsScaled> & msg);
  void recv_fetchRcChannelsScaled();
  void fetchRcChannelsRaw(const std::vector<RcChannelsRaw> & msg);
  void send_fetchRcChannelsRaw(const std::vector<RcChannelsRaw> & msg);
  void recv_fetchRcChannelsRaw();
  void fetchServoOutputRaw(const std::vector<ServoOutputRaw> & msg);
  void send_fetchServoOutputRaw(const std::vector<ServoOutputRaw> & msg);
  void recv_fetchServoOutputRaw();
  void fetchMissionRequestPartialList(const std::vector<MissionRequestPartialList> & msg);
  void send_fetchMissionRequestPartialList(const std::vector<MissionRequestPartialList> & msg);
  void recv_fetchMissionRequestPartialList();
  void fetchMissionWritePartialList(const std::vector<MissionWritePartialList> & msg);
  void send_fetchMissionWritePartialList(const std::vector<MissionWritePartialList> & msg);
  void recv_fetchMissionWritePartialList();
  void fetchMissionItem(const std::vector<MissionItem> & msg);
  void send_fetchMissionItem(const std::vector<MissionItem> & msg);
  void recv_fetchMissionItem();
  void fetchMissionRequest(const std::vector<MissionRequest> & msg);
  void send_fetchMissionRequest(const std::vector<MissionRequest> & msg);
  void recv_fetchMissionRequest();
  void fetchMissionSetCurrent(const std::vector<MissionSetCurrent> & msg);
  void send_fetchMissionSetCurrent(const std::vector<MissionSetCurrent> & msg);
  void recv_fetchMissionSetCurrent();
  void fetchMissionCurrent(const std::vector<MissionCurrent> & msg);
  void send_fetchMissionCurrent(const std::vector<MissionCurrent> & msg);
  void recv_fetchMissionCurrent();
  void fetchMissionRequestList(const std::vector<MissionRequestList> & msg);
  void send_fetchMissionRequestList(const std::vector<MissionRequestList> & msg);
  void recv_fetchMissionRequestList();
  void fetchMissionCount(const std::vector<MissionCount> & msg);
  void send_fetchMissionCount(const std::vector<MissionCount> & msg);
  void recv_fetchMissionCount();
  void fetchMissionClearAll(const std::vector<MissionClearAll> & msg);
  void send_fetchMissionClearAll(const std::vector<MissionClearAll> & msg);
  void recv_fetchMissionClearAll();
  void fetchMissionItemReached(const std::vector<MissionItemReached> & msg);
  void send_fetchMissionItemReached(const std::vector<MissionItemReached> & msg);
  void recv_fetchMissionItemReached();
  void fetchMissionAck(const std::vector<MissionAck> & msg);
  void send_fetchMissionAck(const std::vector<MissionAck> & msg);
  void recv_fetchMissionAck();
  void fetchSetGpsGlobalOrigin(const std::vector<SetGpsGlobalOrigin> & msg);
  void send_fetchSetGpsGlobalOrigin(const std::vector<SetGpsGlobalOrigin> & msg);
  void recv_fetchSetGpsGlobalOrigin();
  void fetchGpsGlobalOrigin(const std::vector<GpsGlobalOrigin> & msg);
  void send_fetchGpsGlobalOrigin(const std::vector<GpsGlobalOrigin> & msg);
  void recv_fetchGpsGlobalOrigin();
  void fetchSetLocalPositionSetpoint(const std::vector<SetLocalPositionSetpoint> & msg);
  void send_fetchSetLocalPositionSetpoint(const std::vector<SetLocalPositionSetpoint> & msg);
  void recv_fetchSetLocalPositionSetpoint();
  void fetchLocalPositionSetpoint(const std::vector<LocalPositionSetpoint> & msg);
  void send_fetchLocalPositionSetpoint(const std::vector<LocalPositionSetpoint> & msg);
  void recv_fetchLocalPositionSetpoint();
  void fetchGlobalPositionSetpointInt(const std::vector<GlobalPositionSetpointInt> & msg);
  void send_fetchGlobalPositionSetpointInt(const std::vector<GlobalPositionSetpointInt> & msg);
  void recv_fetchGlobalPositionSetpointInt();
  void fetchSetGlobalPositionSetpointInt(const std::vector<SetGlobalPositionSetpointInt> & msg);
  void send_fetchSetGlobalPositionSetpointInt(const std::vector<SetGlobalPositionSetpointInt> & msg);
  void recv_fetchSetGlobalPositionSetpointInt();
  void fetchSafetySetAllowedArea(const std::vector<SafetySetAllowedArea> & msg);
  void send_fetchSafetySetAllowedArea(const std::vector<SafetySetAllowedArea> & msg);
  void recv_fetchSafetySetAllowedArea();
  void fetchSafetyAllowedArea(const std::vector<SafetyAllowedArea> & msg);
  void send_fetchSafetyAllowedArea(const std::vector<SafetyAllowedArea> & msg);
  void recv_fetchSafetyAllowedArea();
  void fetchSetRollPitchYawThrust(const std::vector<SetRollPitchYawThrust> & msg);
  void send_fetchSetRollPitchYawThrust(const std::vector<SetRollPitchYawThrust> & msg);
  void recv_fetchSetRollPitchYawThrust();
  void fetchSetRollPitchYawSpeedThrust(const std::vector<SetRollPitchYawSpeedThrust> & msg);
  void send_fetchSetRollPitchYawSpeedThrust(const std::vector<SetRollPitchYawSpeedThrust> & msg);
  void recv_fetchSetRollPitchYawSpeedThrust();
  void fetchRollPitchYawThrustSetpoint(const std::vector<RollPitchYawThrustSetpoint> & msg);
  void send_fetchRollPitchYawThrustSetpoint(const std::vector<RollPitchYawThrustSetpoint> & msg);
  void recv_fetchRollPitchYawThrustSetpoint();
  void fetchRollPitchYawSpeedThrustSetpoint(const std::vector<RollPitchYawSpeedThrustSetpoint> & msg);
  void send_fetchRollPitchYawSpeedThrustSetpoint(const std::vector<RollPitchYawSpeedThrustSetpoint> & msg);
  void recv_fetchRollPitchYawSpeedThrustSetpoint();
  void fetchSetQuadMotorsSetpoint(const std::vector<SetQuadMotorsSetpoint> & msg);
  void send_fetchSetQuadMotorsSetpoint(const std::vector<SetQuadMotorsSetpoint> & msg);
  void recv_fetchSetQuadMotorsSetpoint();
  void fetchSetQuadSwarmRollPitchYawThrust(const std::vector<SetQuadSwarmRollPitchYawThrust> & msg);
  void send_fetchSetQuadSwarmRollPitchYawThrust(const std::vector<SetQuadSwarmRollPitchYawThrust> & msg);
  void recv_fetchSetQuadSwarmRollPitchYawThrust();
  void fetchNavControllerOutput(const std::vector<NavControllerOutput> & msg);
  void send_fetchNavControllerOutput(const std::vector<NavControllerOutput> & msg);
  void recv_fetchNavControllerOutput();
  void fetchSetQuadSwarmLedRollPitchYawThrust(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & msg);
  void send_fetchSetQuadSwarmLedRollPitchYawThrust(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & msg);
  void recv_fetchSetQuadSwarmLedRollPitchYawThrust();
  void fetchStateCorrection(const std::vector<StateCorrection> & msg);
  void send_fetchStateCorrection(const std::vector<StateCorrection> & msg);
  void recv_fetchStateCorrection();
  void fetchRequestDataStream(const std::vector<RequestDataStream> & msg);
  void send_fetchRequestDataStream(const std::vector<RequestDataStream> & msg);
  void recv_fetchRequestDataStream();
  void fetchDataStream(const std::vector<DataStream> & msg);
  void send_fetchDataStream(const std::vector<DataStream> & msg);
  void recv_fetchDataStream();
  void fetchManualControl(const std::vector<ManualControl> & msg);
  void send_fetchManualControl(const std::vector<ManualControl> & msg);
  void recv_fetchManualControl();
  void fetchRcChannelsOverride(const std::vector<RcChannelsOverride> & msg);
  void send_fetchRcChannelsOverride(const std::vector<RcChannelsOverride> & msg);
  void recv_fetchRcChannelsOverride();
  void fetchVfrHud(const std::vector<VfrHud> & msg);
  void send_fetchVfrHud(const std::vector<VfrHud> & msg);
  void recv_fetchVfrHud();
  void fetchCommandLong(const std::vector<CommandLong> & msg);
  void send_fetchCommandLong(const std::vector<CommandLong> & msg);
  void recv_fetchCommandLong();
  void fetchCommandAck(const std::vector<CommandAck> & msg);
  void send_fetchCommandAck(const std::vector<CommandAck> & msg);
  void recv_fetchCommandAck();
  void fetchRollPitchYawRatesThrustSetpoint(const std::vector<RollPitchYawRatesThrustSetpoint> & msg);
  void send_fetchRollPitchYawRatesThrustSetpoint(const std::vector<RollPitchYawRatesThrustSetpoint> & msg);
  void recv_fetchRollPitchYawRatesThrustSetpoint();
  void fetchManualSetpoint(const std::vector<ManualSetpoint> & msg);
  void send_fetchManualSetpoint(const std::vector<ManualSetpoint> & msg);
  void recv_fetchManualSetpoint();
  void fetchLocalPositionNedSystemGlobalOffset(const std::vector<LocalPositionNedSystemGlobalOffset> & msg);
  void send_fetchLocalPositionNedSystemGlobalOffset(const std::vector<LocalPositionNedSystemGlobalOffset> & msg);
  void recv_fetchLocalPositionNedSystemGlobalOffset();
  void fetchHilState(const std::vector<HilState> & msg);
  void send_fetchHilState(const std::vector<HilState> & msg);
  void recv_fetchHilState();
  void fetchHilControls(const std::vector<HilControls> & msg);
  void send_fetchHilControls(const std::vector<HilControls> & msg);
  void recv_fetchHilControls();
  void fetchHilRcInputsRaw(const std::vector<HilRcInputsRaw> & msg);
  void send_fetchHilRcInputsRaw(const std::vector<HilRcInputsRaw> & msg);
  void recv_fetchHilRcInputsRaw();
  void fetchOpticalFlow(const std::vector<OpticalFlow> & msg);
  void send_fetchOpticalFlow(const std::vector<OpticalFlow> & msg);
  void recv_fetchOpticalFlow();
  void fetchGlobalVisionPositionEstimate(const std::vector<GlobalVisionPositionEstimate> & msg);
  void send_fetchGlobalVisionPositionEstimate(const std::vector<GlobalVisionPositionEstimate> & msg);
  void recv_fetchGlobalVisionPositionEstimate();
  void fetchVisionPositionEstimate(const std::vector<VisionPositionEstimate> & msg);
  void send_fetchVisionPositionEstimate(const std::vector<VisionPositionEstimate> & msg);
  void recv_fetchVisionPositionEstimate();
  void fetchVisionSpeedEstimate(const std::vector<VisionSpeedEstimate> & msg);
  void send_fetchVisionSpeedEstimate(const std::vector<VisionSpeedEstimate> & msg);
  void recv_fetchVisionSpeedEstimate();
  void fetchViconPositionEstimate(const std::vector<ViconPositionEstimate> & msg);
  void send_fetchViconPositionEstimate(const std::vector<ViconPositionEstimate> & msg);
  void recv_fetchViconPositionEstimate();
  void fetchHighresImu(const std::vector<HighresImu> & msg);
  void send_fetchHighresImu(const std::vector<HighresImu> & msg);
  void recv_fetchHighresImu();
  void fetchOmnidirectionalFlow(const std::vector<OmnidirectionalFlow> & msg);
  void send_fetchOmnidirectionalFlow(const std::vector<OmnidirectionalFlow> & msg);
  void recv_fetchOmnidirectionalFlow();
  void fetchFileTransferStart(const std::vector<FileTransferStart> & msg);
  void send_fetchFileTransferStart(const std::vector<FileTransferStart> & msg);
  void recv_fetchFileTransferStart();
  void fetchFileTransferDirList(const std::vector<FileTransferDirList> & msg);
  void send_fetchFileTransferDirList(const std::vector<FileTransferDirList> & msg);
  void recv_fetchFileTransferDirList();
  void fetchFileTransferRes(const std::vector<FileTransferRes> & msg);
  void send_fetchFileTransferRes(const std::vector<FileTransferRes> & msg);
  void recv_fetchFileTransferRes();
  void fetchBatteryStatus(const std::vector<BatteryStatus> & msg);
  void send_fetchBatteryStatus(const std::vector<BatteryStatus> & msg);
  void recv_fetchBatteryStatus();
  void fetchSetpoint8dof(const std::vector<Setpoint8dof> & msg);
  void send_fetchSetpoint8dof(const std::vector<Setpoint8dof> & msg);
  void recv_fetchSetpoint8dof();
  void fetchSetpoint6dof(const std::vector<Setpoint6dof> & msg);
  void send_fetchSetpoint6dof(const std::vector<Setpoint6dof> & msg);
  void recv_fetchSetpoint6dof();
  void fetchMemoryVect(const std::vector<MemoryVect> & msg);
  void send_fetchMemoryVect(const std::vector<MemoryVect> & msg);
  void recv_fetchMemoryVect();
  void fetchDebugVect(const std::vector<DebugVect> & msg);
  void send_fetchDebugVect(const std::vector<DebugVect> & msg);
  void recv_fetchDebugVect();
  void fetchNamedValueFloat(const std::vector<NamedValueFloat> & msg);
  void send_fetchNamedValueFloat(const std::vector<NamedValueFloat> & msg);
  void recv_fetchNamedValueFloat();
  void fetchNamedValueInt(const std::vector<NamedValueInt> & msg);
  void send_fetchNamedValueInt(const std::vector<NamedValueInt> & msg);
  void recv_fetchNamedValueInt();
  void fetchStatustext(const std::vector<Statustext> & msg);
  void send_fetchStatustext(const std::vector<Statustext> & msg);
  void recv_fetchStatustext();
  void fetchDebug(const std::vector<Debug> & msg);
  void send_fetchDebug(const std::vector<Debug> & msg);
  void recv_fetchDebug();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CommonMessageFetchServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CommonMessageFetchServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CommonMessageFetchServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_availableMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSysStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSystemTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchPing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchChangeOperatorControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchChangeOperatorControlAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAuthKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamRequestRead(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamRequestList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchParamSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGpsRawInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGpsStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchScaledImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRawImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRawPressure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchScaledPressure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAttitude(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAttitudeQuaternion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLocalPositionNed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGlobalPositionInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRcChannelsScaled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRcChannelsRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchServoOutputRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionRequestPartialList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionWritePartialList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionSetCurrent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionCurrent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionRequestList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionClearAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionItemReached(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMissionAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetGpsGlobalOrigin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGpsGlobalOrigin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetLocalPositionSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLocalPositionSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGlobalPositionSetpointInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetGlobalPositionSetpointInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSafetySetAllowedArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSafetyAllowedArea(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetRollPitchYawSpeedThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRollPitchYawThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRollPitchYawSpeedThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetQuadMotorsSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetQuadSwarmRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchNavControllerOutput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetQuadSwarmLedRollPitchYawThrust(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchStateCorrection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRequestDataStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDataStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchManualControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRcChannelsOverride(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchVfrHud(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchCommandLong(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchCommandAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRollPitchYawRatesThrustSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchManualSetpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLocalPositionNedSystemGlobalOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHilState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHilControls(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHilRcInputsRaw(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOpticalFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchGlobalVisionPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchVisionPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchVisionSpeedEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchViconPositionEstimate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHighresImu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOmnidirectionalFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFileTransferStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFileTransferDirList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFileTransferRes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchBatteryStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetpoint8dof(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetpoint6dof(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMemoryVect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDebugVect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchNamedValueFloat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchNamedValueInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchStatustext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDebug(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CommonMessageFetchServiceProcessor(boost::shared_ptr<CommonMessageFetchServiceIf> iface) :
    iface_(iface) {
    processMap_["availableMessages"] = &CommonMessageFetchServiceProcessor::process_availableMessages;
    processMap_["fetchHeartbeat"] = &CommonMessageFetchServiceProcessor::process_fetchHeartbeat;
    processMap_["fetchSysStatus"] = &CommonMessageFetchServiceProcessor::process_fetchSysStatus;
    processMap_["fetchSystemTime"] = &CommonMessageFetchServiceProcessor::process_fetchSystemTime;
    processMap_["fetchPing"] = &CommonMessageFetchServiceProcessor::process_fetchPing;
    processMap_["fetchChangeOperatorControl"] = &CommonMessageFetchServiceProcessor::process_fetchChangeOperatorControl;
    processMap_["fetchChangeOperatorControlAck"] = &CommonMessageFetchServiceProcessor::process_fetchChangeOperatorControlAck;
    processMap_["fetchAuthKey"] = &CommonMessageFetchServiceProcessor::process_fetchAuthKey;
    processMap_["fetchSetMode"] = &CommonMessageFetchServiceProcessor::process_fetchSetMode;
    processMap_["fetchParamRequestRead"] = &CommonMessageFetchServiceProcessor::process_fetchParamRequestRead;
    processMap_["fetchParamRequestList"] = &CommonMessageFetchServiceProcessor::process_fetchParamRequestList;
    processMap_["fetchParamValue"] = &CommonMessageFetchServiceProcessor::process_fetchParamValue;
    processMap_["fetchParamSet"] = &CommonMessageFetchServiceProcessor::process_fetchParamSet;
    processMap_["fetchGpsRawInt"] = &CommonMessageFetchServiceProcessor::process_fetchGpsRawInt;
    processMap_["fetchGpsStatus"] = &CommonMessageFetchServiceProcessor::process_fetchGpsStatus;
    processMap_["fetchScaledImu"] = &CommonMessageFetchServiceProcessor::process_fetchScaledImu;
    processMap_["fetchRawImu"] = &CommonMessageFetchServiceProcessor::process_fetchRawImu;
    processMap_["fetchRawPressure"] = &CommonMessageFetchServiceProcessor::process_fetchRawPressure;
    processMap_["fetchScaledPressure"] = &CommonMessageFetchServiceProcessor::process_fetchScaledPressure;
    processMap_["fetchAttitude"] = &CommonMessageFetchServiceProcessor::process_fetchAttitude;
    processMap_["fetchAttitudeQuaternion"] = &CommonMessageFetchServiceProcessor::process_fetchAttitudeQuaternion;
    processMap_["fetchLocalPositionNed"] = &CommonMessageFetchServiceProcessor::process_fetchLocalPositionNed;
    processMap_["fetchGlobalPositionInt"] = &CommonMessageFetchServiceProcessor::process_fetchGlobalPositionInt;
    processMap_["fetchRcChannelsScaled"] = &CommonMessageFetchServiceProcessor::process_fetchRcChannelsScaled;
    processMap_["fetchRcChannelsRaw"] = &CommonMessageFetchServiceProcessor::process_fetchRcChannelsRaw;
    processMap_["fetchServoOutputRaw"] = &CommonMessageFetchServiceProcessor::process_fetchServoOutputRaw;
    processMap_["fetchMissionRequestPartialList"] = &CommonMessageFetchServiceProcessor::process_fetchMissionRequestPartialList;
    processMap_["fetchMissionWritePartialList"] = &CommonMessageFetchServiceProcessor::process_fetchMissionWritePartialList;
    processMap_["fetchMissionItem"] = &CommonMessageFetchServiceProcessor::process_fetchMissionItem;
    processMap_["fetchMissionRequest"] = &CommonMessageFetchServiceProcessor::process_fetchMissionRequest;
    processMap_["fetchMissionSetCurrent"] = &CommonMessageFetchServiceProcessor::process_fetchMissionSetCurrent;
    processMap_["fetchMissionCurrent"] = &CommonMessageFetchServiceProcessor::process_fetchMissionCurrent;
    processMap_["fetchMissionRequestList"] = &CommonMessageFetchServiceProcessor::process_fetchMissionRequestList;
    processMap_["fetchMissionCount"] = &CommonMessageFetchServiceProcessor::process_fetchMissionCount;
    processMap_["fetchMissionClearAll"] = &CommonMessageFetchServiceProcessor::process_fetchMissionClearAll;
    processMap_["fetchMissionItemReached"] = &CommonMessageFetchServiceProcessor::process_fetchMissionItemReached;
    processMap_["fetchMissionAck"] = &CommonMessageFetchServiceProcessor::process_fetchMissionAck;
    processMap_["fetchSetGpsGlobalOrigin"] = &CommonMessageFetchServiceProcessor::process_fetchSetGpsGlobalOrigin;
    processMap_["fetchGpsGlobalOrigin"] = &CommonMessageFetchServiceProcessor::process_fetchGpsGlobalOrigin;
    processMap_["fetchSetLocalPositionSetpoint"] = &CommonMessageFetchServiceProcessor::process_fetchSetLocalPositionSetpoint;
    processMap_["fetchLocalPositionSetpoint"] = &CommonMessageFetchServiceProcessor::process_fetchLocalPositionSetpoint;
    processMap_["fetchGlobalPositionSetpointInt"] = &CommonMessageFetchServiceProcessor::process_fetchGlobalPositionSetpointInt;
    processMap_["fetchSetGlobalPositionSetpointInt"] = &CommonMessageFetchServiceProcessor::process_fetchSetGlobalPositionSetpointInt;
    processMap_["fetchSafetySetAllowedArea"] = &CommonMessageFetchServiceProcessor::process_fetchSafetySetAllowedArea;
    processMap_["fetchSafetyAllowedArea"] = &CommonMessageFetchServiceProcessor::process_fetchSafetyAllowedArea;
    processMap_["fetchSetRollPitchYawThrust"] = &CommonMessageFetchServiceProcessor::process_fetchSetRollPitchYawThrust;
    processMap_["fetchSetRollPitchYawSpeedThrust"] = &CommonMessageFetchServiceProcessor::process_fetchSetRollPitchYawSpeedThrust;
    processMap_["fetchRollPitchYawThrustSetpoint"] = &CommonMessageFetchServiceProcessor::process_fetchRollPitchYawThrustSetpoint;
    processMap_["fetchRollPitchYawSpeedThrustSetpoint"] = &CommonMessageFetchServiceProcessor::process_fetchRollPitchYawSpeedThrustSetpoint;
    processMap_["fetchSetQuadMotorsSetpoint"] = &CommonMessageFetchServiceProcessor::process_fetchSetQuadMotorsSetpoint;
    processMap_["fetchSetQuadSwarmRollPitchYawThrust"] = &CommonMessageFetchServiceProcessor::process_fetchSetQuadSwarmRollPitchYawThrust;
    processMap_["fetchNavControllerOutput"] = &CommonMessageFetchServiceProcessor::process_fetchNavControllerOutput;
    processMap_["fetchSetQuadSwarmLedRollPitchYawThrust"] = &CommonMessageFetchServiceProcessor::process_fetchSetQuadSwarmLedRollPitchYawThrust;
    processMap_["fetchStateCorrection"] = &CommonMessageFetchServiceProcessor::process_fetchStateCorrection;
    processMap_["fetchRequestDataStream"] = &CommonMessageFetchServiceProcessor::process_fetchRequestDataStream;
    processMap_["fetchDataStream"] = &CommonMessageFetchServiceProcessor::process_fetchDataStream;
    processMap_["fetchManualControl"] = &CommonMessageFetchServiceProcessor::process_fetchManualControl;
    processMap_["fetchRcChannelsOverride"] = &CommonMessageFetchServiceProcessor::process_fetchRcChannelsOverride;
    processMap_["fetchVfrHud"] = &CommonMessageFetchServiceProcessor::process_fetchVfrHud;
    processMap_["fetchCommandLong"] = &CommonMessageFetchServiceProcessor::process_fetchCommandLong;
    processMap_["fetchCommandAck"] = &CommonMessageFetchServiceProcessor::process_fetchCommandAck;
    processMap_["fetchRollPitchYawRatesThrustSetpoint"] = &CommonMessageFetchServiceProcessor::process_fetchRollPitchYawRatesThrustSetpoint;
    processMap_["fetchManualSetpoint"] = &CommonMessageFetchServiceProcessor::process_fetchManualSetpoint;
    processMap_["fetchLocalPositionNedSystemGlobalOffset"] = &CommonMessageFetchServiceProcessor::process_fetchLocalPositionNedSystemGlobalOffset;
    processMap_["fetchHilState"] = &CommonMessageFetchServiceProcessor::process_fetchHilState;
    processMap_["fetchHilControls"] = &CommonMessageFetchServiceProcessor::process_fetchHilControls;
    processMap_["fetchHilRcInputsRaw"] = &CommonMessageFetchServiceProcessor::process_fetchHilRcInputsRaw;
    processMap_["fetchOpticalFlow"] = &CommonMessageFetchServiceProcessor::process_fetchOpticalFlow;
    processMap_["fetchGlobalVisionPositionEstimate"] = &CommonMessageFetchServiceProcessor::process_fetchGlobalVisionPositionEstimate;
    processMap_["fetchVisionPositionEstimate"] = &CommonMessageFetchServiceProcessor::process_fetchVisionPositionEstimate;
    processMap_["fetchVisionSpeedEstimate"] = &CommonMessageFetchServiceProcessor::process_fetchVisionSpeedEstimate;
    processMap_["fetchViconPositionEstimate"] = &CommonMessageFetchServiceProcessor::process_fetchViconPositionEstimate;
    processMap_["fetchHighresImu"] = &CommonMessageFetchServiceProcessor::process_fetchHighresImu;
    processMap_["fetchOmnidirectionalFlow"] = &CommonMessageFetchServiceProcessor::process_fetchOmnidirectionalFlow;
    processMap_["fetchFileTransferStart"] = &CommonMessageFetchServiceProcessor::process_fetchFileTransferStart;
    processMap_["fetchFileTransferDirList"] = &CommonMessageFetchServiceProcessor::process_fetchFileTransferDirList;
    processMap_["fetchFileTransferRes"] = &CommonMessageFetchServiceProcessor::process_fetchFileTransferRes;
    processMap_["fetchBatteryStatus"] = &CommonMessageFetchServiceProcessor::process_fetchBatteryStatus;
    processMap_["fetchSetpoint8dof"] = &CommonMessageFetchServiceProcessor::process_fetchSetpoint8dof;
    processMap_["fetchSetpoint6dof"] = &CommonMessageFetchServiceProcessor::process_fetchSetpoint6dof;
    processMap_["fetchMemoryVect"] = &CommonMessageFetchServiceProcessor::process_fetchMemoryVect;
    processMap_["fetchDebugVect"] = &CommonMessageFetchServiceProcessor::process_fetchDebugVect;
    processMap_["fetchNamedValueFloat"] = &CommonMessageFetchServiceProcessor::process_fetchNamedValueFloat;
    processMap_["fetchNamedValueInt"] = &CommonMessageFetchServiceProcessor::process_fetchNamedValueInt;
    processMap_["fetchStatustext"] = &CommonMessageFetchServiceProcessor::process_fetchStatustext;
    processMap_["fetchDebug"] = &CommonMessageFetchServiceProcessor::process_fetchDebug;
  }

  virtual ~CommonMessageFetchServiceProcessor() {}
};

class CommonMessageFetchServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CommonMessageFetchServiceProcessorFactory(const ::boost::shared_ptr< CommonMessageFetchServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CommonMessageFetchServiceIfFactory > handlerFactory_;
};

class CommonMessageFetchServiceMultiface : virtual public CommonMessageFetchServiceIf {
 public:
  CommonMessageFetchServiceMultiface(std::vector<boost::shared_ptr<CommonMessageFetchServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CommonMessageFetchServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CommonMessageFetchServiceIf> > ifaces_;
  CommonMessageFetchServiceMultiface() {}
  void add(boost::shared_ptr<CommonMessageFetchServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->availableMessages(_return);
    }
    ifaces_[i]->availableMessages(_return);
    return;
  }

  void fetchHeartbeat(const std::vector<Heartbeat> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHeartbeat(msg);
    }
    ifaces_[i]->fetchHeartbeat(msg);
  }

  void fetchSysStatus(const std::vector<SysStatus> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSysStatus(msg);
    }
    ifaces_[i]->fetchSysStatus(msg);
  }

  void fetchSystemTime(const std::vector<SystemTime> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSystemTime(msg);
    }
    ifaces_[i]->fetchSystemTime(msg);
  }

  void fetchPing(const std::vector<Ping> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchPing(msg);
    }
    ifaces_[i]->fetchPing(msg);
  }

  void fetchChangeOperatorControl(const std::vector<ChangeOperatorControl> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchChangeOperatorControl(msg);
    }
    ifaces_[i]->fetchChangeOperatorControl(msg);
  }

  void fetchChangeOperatorControlAck(const std::vector<ChangeOperatorControlAck> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchChangeOperatorControlAck(msg);
    }
    ifaces_[i]->fetchChangeOperatorControlAck(msg);
  }

  void fetchAuthKey(const std::vector<AuthKey> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAuthKey(msg);
    }
    ifaces_[i]->fetchAuthKey(msg);
  }

  void fetchSetMode(const std::vector<SetMode> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetMode(msg);
    }
    ifaces_[i]->fetchSetMode(msg);
  }

  void fetchParamRequestRead(const std::vector<ParamRequestRead> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamRequestRead(msg);
    }
    ifaces_[i]->fetchParamRequestRead(msg);
  }

  void fetchParamRequestList(const std::vector<ParamRequestList> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamRequestList(msg);
    }
    ifaces_[i]->fetchParamRequestList(msg);
  }

  void fetchParamValue(const std::vector<ParamValue> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamValue(msg);
    }
    ifaces_[i]->fetchParamValue(msg);
  }

  void fetchParamSet(const std::vector<ParamSet> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchParamSet(msg);
    }
    ifaces_[i]->fetchParamSet(msg);
  }

  void fetchGpsRawInt(const std::vector<GpsRawInt> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGpsRawInt(msg);
    }
    ifaces_[i]->fetchGpsRawInt(msg);
  }

  void fetchGpsStatus(const std::vector<GpsStatus> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGpsStatus(msg);
    }
    ifaces_[i]->fetchGpsStatus(msg);
  }

  void fetchScaledImu(const std::vector<ScaledImu> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchScaledImu(msg);
    }
    ifaces_[i]->fetchScaledImu(msg);
  }

  void fetchRawImu(const std::vector<RawImu> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRawImu(msg);
    }
    ifaces_[i]->fetchRawImu(msg);
  }

  void fetchRawPressure(const std::vector<RawPressure> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRawPressure(msg);
    }
    ifaces_[i]->fetchRawPressure(msg);
  }

  void fetchScaledPressure(const std::vector<ScaledPressure> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchScaledPressure(msg);
    }
    ifaces_[i]->fetchScaledPressure(msg);
  }

  void fetchAttitude(const std::vector<Attitude> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAttitude(msg);
    }
    ifaces_[i]->fetchAttitude(msg);
  }

  void fetchAttitudeQuaternion(const std::vector<AttitudeQuaternion> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAttitudeQuaternion(msg);
    }
    ifaces_[i]->fetchAttitudeQuaternion(msg);
  }

  void fetchLocalPositionNed(const std::vector<LocalPositionNed> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLocalPositionNed(msg);
    }
    ifaces_[i]->fetchLocalPositionNed(msg);
  }

  void fetchGlobalPositionInt(const std::vector<GlobalPositionInt> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGlobalPositionInt(msg);
    }
    ifaces_[i]->fetchGlobalPositionInt(msg);
  }

  void fetchRcChannelsScaled(const std::vector<RcChannelsScaled> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRcChannelsScaled(msg);
    }
    ifaces_[i]->fetchRcChannelsScaled(msg);
  }

  void fetchRcChannelsRaw(const std::vector<RcChannelsRaw> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRcChannelsRaw(msg);
    }
    ifaces_[i]->fetchRcChannelsRaw(msg);
  }

  void fetchServoOutputRaw(const std::vector<ServoOutputRaw> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchServoOutputRaw(msg);
    }
    ifaces_[i]->fetchServoOutputRaw(msg);
  }

  void fetchMissionRequestPartialList(const std::vector<MissionRequestPartialList> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionRequestPartialList(msg);
    }
    ifaces_[i]->fetchMissionRequestPartialList(msg);
  }

  void fetchMissionWritePartialList(const std::vector<MissionWritePartialList> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionWritePartialList(msg);
    }
    ifaces_[i]->fetchMissionWritePartialList(msg);
  }

  void fetchMissionItem(const std::vector<MissionItem> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionItem(msg);
    }
    ifaces_[i]->fetchMissionItem(msg);
  }

  void fetchMissionRequest(const std::vector<MissionRequest> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionRequest(msg);
    }
    ifaces_[i]->fetchMissionRequest(msg);
  }

  void fetchMissionSetCurrent(const std::vector<MissionSetCurrent> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionSetCurrent(msg);
    }
    ifaces_[i]->fetchMissionSetCurrent(msg);
  }

  void fetchMissionCurrent(const std::vector<MissionCurrent> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionCurrent(msg);
    }
    ifaces_[i]->fetchMissionCurrent(msg);
  }

  void fetchMissionRequestList(const std::vector<MissionRequestList> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionRequestList(msg);
    }
    ifaces_[i]->fetchMissionRequestList(msg);
  }

  void fetchMissionCount(const std::vector<MissionCount> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionCount(msg);
    }
    ifaces_[i]->fetchMissionCount(msg);
  }

  void fetchMissionClearAll(const std::vector<MissionClearAll> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionClearAll(msg);
    }
    ifaces_[i]->fetchMissionClearAll(msg);
  }

  void fetchMissionItemReached(const std::vector<MissionItemReached> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionItemReached(msg);
    }
    ifaces_[i]->fetchMissionItemReached(msg);
  }

  void fetchMissionAck(const std::vector<MissionAck> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMissionAck(msg);
    }
    ifaces_[i]->fetchMissionAck(msg);
  }

  void fetchSetGpsGlobalOrigin(const std::vector<SetGpsGlobalOrigin> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetGpsGlobalOrigin(msg);
    }
    ifaces_[i]->fetchSetGpsGlobalOrigin(msg);
  }

  void fetchGpsGlobalOrigin(const std::vector<GpsGlobalOrigin> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGpsGlobalOrigin(msg);
    }
    ifaces_[i]->fetchGpsGlobalOrigin(msg);
  }

  void fetchSetLocalPositionSetpoint(const std::vector<SetLocalPositionSetpoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetLocalPositionSetpoint(msg);
    }
    ifaces_[i]->fetchSetLocalPositionSetpoint(msg);
  }

  void fetchLocalPositionSetpoint(const std::vector<LocalPositionSetpoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLocalPositionSetpoint(msg);
    }
    ifaces_[i]->fetchLocalPositionSetpoint(msg);
  }

  void fetchGlobalPositionSetpointInt(const std::vector<GlobalPositionSetpointInt> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGlobalPositionSetpointInt(msg);
    }
    ifaces_[i]->fetchGlobalPositionSetpointInt(msg);
  }

  void fetchSetGlobalPositionSetpointInt(const std::vector<SetGlobalPositionSetpointInt> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetGlobalPositionSetpointInt(msg);
    }
    ifaces_[i]->fetchSetGlobalPositionSetpointInt(msg);
  }

  void fetchSafetySetAllowedArea(const std::vector<SafetySetAllowedArea> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSafetySetAllowedArea(msg);
    }
    ifaces_[i]->fetchSafetySetAllowedArea(msg);
  }

  void fetchSafetyAllowedArea(const std::vector<SafetyAllowedArea> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSafetyAllowedArea(msg);
    }
    ifaces_[i]->fetchSafetyAllowedArea(msg);
  }

  void fetchSetRollPitchYawThrust(const std::vector<SetRollPitchYawThrust> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetRollPitchYawThrust(msg);
    }
    ifaces_[i]->fetchSetRollPitchYawThrust(msg);
  }

  void fetchSetRollPitchYawSpeedThrust(const std::vector<SetRollPitchYawSpeedThrust> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetRollPitchYawSpeedThrust(msg);
    }
    ifaces_[i]->fetchSetRollPitchYawSpeedThrust(msg);
  }

  void fetchRollPitchYawThrustSetpoint(const std::vector<RollPitchYawThrustSetpoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRollPitchYawThrustSetpoint(msg);
    }
    ifaces_[i]->fetchRollPitchYawThrustSetpoint(msg);
  }

  void fetchRollPitchYawSpeedThrustSetpoint(const std::vector<RollPitchYawSpeedThrustSetpoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRollPitchYawSpeedThrustSetpoint(msg);
    }
    ifaces_[i]->fetchRollPitchYawSpeedThrustSetpoint(msg);
  }

  void fetchSetQuadMotorsSetpoint(const std::vector<SetQuadMotorsSetpoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetQuadMotorsSetpoint(msg);
    }
    ifaces_[i]->fetchSetQuadMotorsSetpoint(msg);
  }

  void fetchSetQuadSwarmRollPitchYawThrust(const std::vector<SetQuadSwarmRollPitchYawThrust> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetQuadSwarmRollPitchYawThrust(msg);
    }
    ifaces_[i]->fetchSetQuadSwarmRollPitchYawThrust(msg);
  }

  void fetchNavControllerOutput(const std::vector<NavControllerOutput> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchNavControllerOutput(msg);
    }
    ifaces_[i]->fetchNavControllerOutput(msg);
  }

  void fetchSetQuadSwarmLedRollPitchYawThrust(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetQuadSwarmLedRollPitchYawThrust(msg);
    }
    ifaces_[i]->fetchSetQuadSwarmLedRollPitchYawThrust(msg);
  }

  void fetchStateCorrection(const std::vector<StateCorrection> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchStateCorrection(msg);
    }
    ifaces_[i]->fetchStateCorrection(msg);
  }

  void fetchRequestDataStream(const std::vector<RequestDataStream> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRequestDataStream(msg);
    }
    ifaces_[i]->fetchRequestDataStream(msg);
  }

  void fetchDataStream(const std::vector<DataStream> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDataStream(msg);
    }
    ifaces_[i]->fetchDataStream(msg);
  }

  void fetchManualControl(const std::vector<ManualControl> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchManualControl(msg);
    }
    ifaces_[i]->fetchManualControl(msg);
  }

  void fetchRcChannelsOverride(const std::vector<RcChannelsOverride> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRcChannelsOverride(msg);
    }
    ifaces_[i]->fetchRcChannelsOverride(msg);
  }

  void fetchVfrHud(const std::vector<VfrHud> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchVfrHud(msg);
    }
    ifaces_[i]->fetchVfrHud(msg);
  }

  void fetchCommandLong(const std::vector<CommandLong> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchCommandLong(msg);
    }
    ifaces_[i]->fetchCommandLong(msg);
  }

  void fetchCommandAck(const std::vector<CommandAck> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchCommandAck(msg);
    }
    ifaces_[i]->fetchCommandAck(msg);
  }

  void fetchRollPitchYawRatesThrustSetpoint(const std::vector<RollPitchYawRatesThrustSetpoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRollPitchYawRatesThrustSetpoint(msg);
    }
    ifaces_[i]->fetchRollPitchYawRatesThrustSetpoint(msg);
  }

  void fetchManualSetpoint(const std::vector<ManualSetpoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchManualSetpoint(msg);
    }
    ifaces_[i]->fetchManualSetpoint(msg);
  }

  void fetchLocalPositionNedSystemGlobalOffset(const std::vector<LocalPositionNedSystemGlobalOffset> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLocalPositionNedSystemGlobalOffset(msg);
    }
    ifaces_[i]->fetchLocalPositionNedSystemGlobalOffset(msg);
  }

  void fetchHilState(const std::vector<HilState> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHilState(msg);
    }
    ifaces_[i]->fetchHilState(msg);
  }

  void fetchHilControls(const std::vector<HilControls> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHilControls(msg);
    }
    ifaces_[i]->fetchHilControls(msg);
  }

  void fetchHilRcInputsRaw(const std::vector<HilRcInputsRaw> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHilRcInputsRaw(msg);
    }
    ifaces_[i]->fetchHilRcInputsRaw(msg);
  }

  void fetchOpticalFlow(const std::vector<OpticalFlow> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOpticalFlow(msg);
    }
    ifaces_[i]->fetchOpticalFlow(msg);
  }

  void fetchGlobalVisionPositionEstimate(const std::vector<GlobalVisionPositionEstimate> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchGlobalVisionPositionEstimate(msg);
    }
    ifaces_[i]->fetchGlobalVisionPositionEstimate(msg);
  }

  void fetchVisionPositionEstimate(const std::vector<VisionPositionEstimate> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchVisionPositionEstimate(msg);
    }
    ifaces_[i]->fetchVisionPositionEstimate(msg);
  }

  void fetchVisionSpeedEstimate(const std::vector<VisionSpeedEstimate> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchVisionSpeedEstimate(msg);
    }
    ifaces_[i]->fetchVisionSpeedEstimate(msg);
  }

  void fetchViconPositionEstimate(const std::vector<ViconPositionEstimate> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchViconPositionEstimate(msg);
    }
    ifaces_[i]->fetchViconPositionEstimate(msg);
  }

  void fetchHighresImu(const std::vector<HighresImu> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHighresImu(msg);
    }
    ifaces_[i]->fetchHighresImu(msg);
  }

  void fetchOmnidirectionalFlow(const std::vector<OmnidirectionalFlow> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOmnidirectionalFlow(msg);
    }
    ifaces_[i]->fetchOmnidirectionalFlow(msg);
  }

  void fetchFileTransferStart(const std::vector<FileTransferStart> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFileTransferStart(msg);
    }
    ifaces_[i]->fetchFileTransferStart(msg);
  }

  void fetchFileTransferDirList(const std::vector<FileTransferDirList> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFileTransferDirList(msg);
    }
    ifaces_[i]->fetchFileTransferDirList(msg);
  }

  void fetchFileTransferRes(const std::vector<FileTransferRes> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFileTransferRes(msg);
    }
    ifaces_[i]->fetchFileTransferRes(msg);
  }

  void fetchBatteryStatus(const std::vector<BatteryStatus> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchBatteryStatus(msg);
    }
    ifaces_[i]->fetchBatteryStatus(msg);
  }

  void fetchSetpoint8dof(const std::vector<Setpoint8dof> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetpoint8dof(msg);
    }
    ifaces_[i]->fetchSetpoint8dof(msg);
  }

  void fetchSetpoint6dof(const std::vector<Setpoint6dof> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetpoint6dof(msg);
    }
    ifaces_[i]->fetchSetpoint6dof(msg);
  }

  void fetchMemoryVect(const std::vector<MemoryVect> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMemoryVect(msg);
    }
    ifaces_[i]->fetchMemoryVect(msg);
  }

  void fetchDebugVect(const std::vector<DebugVect> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDebugVect(msg);
    }
    ifaces_[i]->fetchDebugVect(msg);
  }

  void fetchNamedValueFloat(const std::vector<NamedValueFloat> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchNamedValueFloat(msg);
    }
    ifaces_[i]->fetchNamedValueFloat(msg);
  }

  void fetchNamedValueInt(const std::vector<NamedValueInt> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchNamedValueInt(msg);
    }
    ifaces_[i]->fetchNamedValueInt(msg);
  }

  void fetchStatustext(const std::vector<Statustext> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchStatustext(msg);
    }
    ifaces_[i]->fetchStatustext(msg);
  }

  void fetchDebug(const std::vector<Debug> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDebug(msg);
    }
    ifaces_[i]->fetchDebug(msg);
  }

};

}} // namespace

#endif
