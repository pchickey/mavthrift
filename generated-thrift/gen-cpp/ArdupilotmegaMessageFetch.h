/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ArdupilotmegaMessageFetch_H
#define ArdupilotmegaMessageFetch_H

#include <thrift/TDispatchProcessor.h>
#include "ardupilotmega_types.h"
#include "CommonMessageFetch.h"

namespace mavlink { namespace thrift {

class ArdupilotmegaMessageFetchIf : virtual public  ::mavlink::thrift::CommonMessageFetchIf {
 public:
  virtual ~ArdupilotmegaMessageFetchIf() {}
  virtual void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return) = 0;
  virtual void fetchSensorOffsets(std::vector<SensorOffsets> & _return) = 0;
  virtual void fetchSetMagOffsets(std::vector<SetMagOffsets> & _return) = 0;
  virtual void fetchMeminfo(std::vector<Meminfo> & _return) = 0;
  virtual void fetchApAdc(std::vector<ApAdc> & _return) = 0;
  virtual void fetchDigicamConfigure(std::vector<DigicamConfigure> & _return) = 0;
  virtual void fetchDigicamControl(std::vector<DigicamControl> & _return) = 0;
  virtual void fetchMountConfigure(std::vector<MountConfigure> & _return) = 0;
  virtual void fetchMountControl(std::vector<MountControl> & _return) = 0;
  virtual void fetchMountStatus(std::vector<MountStatus> & _return) = 0;
  virtual void fetchFencePoint(std::vector<FencePoint> & _return) = 0;
  virtual void fetchFenceFetchPoint(std::vector<FenceFetchPoint> & _return) = 0;
  virtual void fetchFenceStatus(std::vector<FenceStatus> & _return) = 0;
  virtual void fetchAhrs(std::vector<Ahrs> & _return) = 0;
  virtual void fetchSimstate(std::vector<Simstate> & _return) = 0;
  virtual void fetchHwstatus(std::vector<Hwstatus> & _return) = 0;
  virtual void fetchRadio(std::vector<Radio> & _return) = 0;
  virtual void fetchLimitsStatus(std::vector<LimitsStatus> & _return) = 0;
  virtual void fetchWind(std::vector<Wind> & _return) = 0;
  virtual void fetchData16(std::vector<Data16> & _return) = 0;
  virtual void fetchData32(std::vector<Data32> & _return) = 0;
  virtual void fetchData64(std::vector<Data64> & _return) = 0;
  virtual void fetchData96(std::vector<Data96> & _return) = 0;
  virtual void fetchRangefinder(std::vector<Rangefinder> & _return) = 0;
};

class ArdupilotmegaMessageFetchIfFactory : virtual public  ::mavlink::thrift::CommonMessageFetchIfFactory {
 public:
  typedef ArdupilotmegaMessageFetchIf Handler;

  virtual ~ArdupilotmegaMessageFetchIfFactory() {}

  virtual ArdupilotmegaMessageFetchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::mavlink::thrift::CommonMessageFetchIf* /* handler */) = 0;
};

class ArdupilotmegaMessageFetchIfSingletonFactory : virtual public ArdupilotmegaMessageFetchIfFactory {
 public:
  ArdupilotmegaMessageFetchIfSingletonFactory(const boost::shared_ptr<ArdupilotmegaMessageFetchIf>& iface) : iface_(iface) {}
  virtual ~ArdupilotmegaMessageFetchIfSingletonFactory() {}

  virtual ArdupilotmegaMessageFetchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::mavlink::thrift::CommonMessageFetchIf* /* handler */) {}

 protected:
  boost::shared_ptr<ArdupilotmegaMessageFetchIf> iface_;
};

class ArdupilotmegaMessageFetchNull : virtual public ArdupilotmegaMessageFetchIf , virtual public  ::mavlink::thrift::CommonMessageFetchNull {
 public:
  virtual ~ArdupilotmegaMessageFetchNull() {}
  void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & /* _return */) {
    return;
  }
  void fetchSensorOffsets(std::vector<SensorOffsets> & /* _return */) {
    return;
  }
  void fetchSetMagOffsets(std::vector<SetMagOffsets> & /* _return */) {
    return;
  }
  void fetchMeminfo(std::vector<Meminfo> & /* _return */) {
    return;
  }
  void fetchApAdc(std::vector<ApAdc> & /* _return */) {
    return;
  }
  void fetchDigicamConfigure(std::vector<DigicamConfigure> & /* _return */) {
    return;
  }
  void fetchDigicamControl(std::vector<DigicamControl> & /* _return */) {
    return;
  }
  void fetchMountConfigure(std::vector<MountConfigure> & /* _return */) {
    return;
  }
  void fetchMountControl(std::vector<MountControl> & /* _return */) {
    return;
  }
  void fetchMountStatus(std::vector<MountStatus> & /* _return */) {
    return;
  }
  void fetchFencePoint(std::vector<FencePoint> & /* _return */) {
    return;
  }
  void fetchFenceFetchPoint(std::vector<FenceFetchPoint> & /* _return */) {
    return;
  }
  void fetchFenceStatus(std::vector<FenceStatus> & /* _return */) {
    return;
  }
  void fetchAhrs(std::vector<Ahrs> & /* _return */) {
    return;
  }
  void fetchSimstate(std::vector<Simstate> & /* _return */) {
    return;
  }
  void fetchHwstatus(std::vector<Hwstatus> & /* _return */) {
    return;
  }
  void fetchRadio(std::vector<Radio> & /* _return */) {
    return;
  }
  void fetchLimitsStatus(std::vector<LimitsStatus> & /* _return */) {
    return;
  }
  void fetchWind(std::vector<Wind> & /* _return */) {
    return;
  }
  void fetchData16(std::vector<Data16> & /* _return */) {
    return;
  }
  void fetchData32(std::vector<Data32> & /* _return */) {
    return;
  }
  void fetchData64(std::vector<Data64> & /* _return */) {
    return;
  }
  void fetchData96(std::vector<Data96> & /* _return */) {
    return;
  }
  void fetchRangefinder(std::vector<Rangefinder> & /* _return */) {
    return;
  }
};


class ArdupilotmegaMessageFetch_availableMessages_args {
 public:

  ArdupilotmegaMessageFetch_availableMessages_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_availableMessages_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_availableMessages_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_availableMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_availableMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_availableMessages_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_availableMessages_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_availableMessages_result__isset {
  _ArdupilotmegaMessageFetch_availableMessages_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_availableMessages_result__isset;

class ArdupilotmegaMessageFetch_availableMessages_result {
 public:

  ArdupilotmegaMessageFetch_availableMessages_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_availableMessages_result() throw() {}

  std::map<ArdupilotmegaMessageTypes::type, int32_t>  success;

  _ArdupilotmegaMessageFetch_availableMessages_result__isset __isset;

  void __set_success(const std::map<ArdupilotmegaMessageTypes::type, int32_t> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_availableMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_availableMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_availableMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_availableMessages_presult__isset {
  _ArdupilotmegaMessageFetch_availableMessages_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_availableMessages_presult__isset;

class ArdupilotmegaMessageFetch_availableMessages_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_availableMessages_presult() throw() {}

  std::map<ArdupilotmegaMessageTypes::type, int32_t> * success;

  _ArdupilotmegaMessageFetch_availableMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchSensorOffsets_args {
 public:

  ArdupilotmegaMessageFetch_fetchSensorOffsets_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchSensorOffsets_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchSensorOffsets_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchSensorOffsets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchSensorOffsets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchSensorOffsets_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchSensorOffsets_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchSensorOffsets_result__isset {
  _ArdupilotmegaMessageFetch_fetchSensorOffsets_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchSensorOffsets_result__isset;

class ArdupilotmegaMessageFetch_fetchSensorOffsets_result {
 public:

  ArdupilotmegaMessageFetch_fetchSensorOffsets_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchSensorOffsets_result() throw() {}

  std::vector<SensorOffsets>  success;

  _ArdupilotmegaMessageFetch_fetchSensorOffsets_result__isset __isset;

  void __set_success(const std::vector<SensorOffsets> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchSensorOffsets_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchSensorOffsets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchSensorOffsets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchSensorOffsets_presult__isset {
  _ArdupilotmegaMessageFetch_fetchSensorOffsets_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchSensorOffsets_presult__isset;

class ArdupilotmegaMessageFetch_fetchSensorOffsets_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchSensorOffsets_presult() throw() {}

  std::vector<SensorOffsets> * success;

  _ArdupilotmegaMessageFetch_fetchSensorOffsets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchSetMagOffsets_args {
 public:

  ArdupilotmegaMessageFetch_fetchSetMagOffsets_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchSetMagOffsets_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchSetMagOffsets_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchSetMagOffsets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchSetMagOffsets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchSetMagOffsets_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchSetMagOffsets_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchSetMagOffsets_result__isset {
  _ArdupilotmegaMessageFetch_fetchSetMagOffsets_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchSetMagOffsets_result__isset;

class ArdupilotmegaMessageFetch_fetchSetMagOffsets_result {
 public:

  ArdupilotmegaMessageFetch_fetchSetMagOffsets_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchSetMagOffsets_result() throw() {}

  std::vector<SetMagOffsets>  success;

  _ArdupilotmegaMessageFetch_fetchSetMagOffsets_result__isset __isset;

  void __set_success(const std::vector<SetMagOffsets> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchSetMagOffsets_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchSetMagOffsets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchSetMagOffsets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchSetMagOffsets_presult__isset {
  _ArdupilotmegaMessageFetch_fetchSetMagOffsets_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchSetMagOffsets_presult__isset;

class ArdupilotmegaMessageFetch_fetchSetMagOffsets_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchSetMagOffsets_presult() throw() {}

  std::vector<SetMagOffsets> * success;

  _ArdupilotmegaMessageFetch_fetchSetMagOffsets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchMeminfo_args {
 public:

  ArdupilotmegaMessageFetch_fetchMeminfo_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMeminfo_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchMeminfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMeminfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMeminfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchMeminfo_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMeminfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMeminfo_result__isset {
  _ArdupilotmegaMessageFetch_fetchMeminfo_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMeminfo_result__isset;

class ArdupilotmegaMessageFetch_fetchMeminfo_result {
 public:

  ArdupilotmegaMessageFetch_fetchMeminfo_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMeminfo_result() throw() {}

  std::vector<Meminfo>  success;

  _ArdupilotmegaMessageFetch_fetchMeminfo_result__isset __isset;

  void __set_success(const std::vector<Meminfo> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchMeminfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMeminfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMeminfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMeminfo_presult__isset {
  _ArdupilotmegaMessageFetch_fetchMeminfo_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMeminfo_presult__isset;

class ArdupilotmegaMessageFetch_fetchMeminfo_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMeminfo_presult() throw() {}

  std::vector<Meminfo> * success;

  _ArdupilotmegaMessageFetch_fetchMeminfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchApAdc_args {
 public:

  ArdupilotmegaMessageFetch_fetchApAdc_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchApAdc_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchApAdc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchApAdc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchApAdc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchApAdc_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchApAdc_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchApAdc_result__isset {
  _ArdupilotmegaMessageFetch_fetchApAdc_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchApAdc_result__isset;

class ArdupilotmegaMessageFetch_fetchApAdc_result {
 public:

  ArdupilotmegaMessageFetch_fetchApAdc_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchApAdc_result() throw() {}

  std::vector<ApAdc>  success;

  _ArdupilotmegaMessageFetch_fetchApAdc_result__isset __isset;

  void __set_success(const std::vector<ApAdc> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchApAdc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchApAdc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchApAdc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchApAdc_presult__isset {
  _ArdupilotmegaMessageFetch_fetchApAdc_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchApAdc_presult__isset;

class ArdupilotmegaMessageFetch_fetchApAdc_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchApAdc_presult() throw() {}

  std::vector<ApAdc> * success;

  _ArdupilotmegaMessageFetch_fetchApAdc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchDigicamConfigure_args {
 public:

  ArdupilotmegaMessageFetch_fetchDigicamConfigure_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchDigicamConfigure_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchDigicamConfigure_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchDigicamConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchDigicamConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchDigicamConfigure_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchDigicamConfigure_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchDigicamConfigure_result__isset {
  _ArdupilotmegaMessageFetch_fetchDigicamConfigure_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchDigicamConfigure_result__isset;

class ArdupilotmegaMessageFetch_fetchDigicamConfigure_result {
 public:

  ArdupilotmegaMessageFetch_fetchDigicamConfigure_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchDigicamConfigure_result() throw() {}

  std::vector<DigicamConfigure>  success;

  _ArdupilotmegaMessageFetch_fetchDigicamConfigure_result__isset __isset;

  void __set_success(const std::vector<DigicamConfigure> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchDigicamConfigure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchDigicamConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchDigicamConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchDigicamConfigure_presult__isset {
  _ArdupilotmegaMessageFetch_fetchDigicamConfigure_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchDigicamConfigure_presult__isset;

class ArdupilotmegaMessageFetch_fetchDigicamConfigure_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchDigicamConfigure_presult() throw() {}

  std::vector<DigicamConfigure> * success;

  _ArdupilotmegaMessageFetch_fetchDigicamConfigure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchDigicamControl_args {
 public:

  ArdupilotmegaMessageFetch_fetchDigicamControl_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchDigicamControl_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchDigicamControl_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchDigicamControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchDigicamControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchDigicamControl_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchDigicamControl_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchDigicamControl_result__isset {
  _ArdupilotmegaMessageFetch_fetchDigicamControl_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchDigicamControl_result__isset;

class ArdupilotmegaMessageFetch_fetchDigicamControl_result {
 public:

  ArdupilotmegaMessageFetch_fetchDigicamControl_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchDigicamControl_result() throw() {}

  std::vector<DigicamControl>  success;

  _ArdupilotmegaMessageFetch_fetchDigicamControl_result__isset __isset;

  void __set_success(const std::vector<DigicamControl> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchDigicamControl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchDigicamControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchDigicamControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchDigicamControl_presult__isset {
  _ArdupilotmegaMessageFetch_fetchDigicamControl_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchDigicamControl_presult__isset;

class ArdupilotmegaMessageFetch_fetchDigicamControl_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchDigicamControl_presult() throw() {}

  std::vector<DigicamControl> * success;

  _ArdupilotmegaMessageFetch_fetchDigicamControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchMountConfigure_args {
 public:

  ArdupilotmegaMessageFetch_fetchMountConfigure_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMountConfigure_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchMountConfigure_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMountConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMountConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchMountConfigure_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMountConfigure_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMountConfigure_result__isset {
  _ArdupilotmegaMessageFetch_fetchMountConfigure_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMountConfigure_result__isset;

class ArdupilotmegaMessageFetch_fetchMountConfigure_result {
 public:

  ArdupilotmegaMessageFetch_fetchMountConfigure_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMountConfigure_result() throw() {}

  std::vector<MountConfigure>  success;

  _ArdupilotmegaMessageFetch_fetchMountConfigure_result__isset __isset;

  void __set_success(const std::vector<MountConfigure> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchMountConfigure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMountConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMountConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMountConfigure_presult__isset {
  _ArdupilotmegaMessageFetch_fetchMountConfigure_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMountConfigure_presult__isset;

class ArdupilotmegaMessageFetch_fetchMountConfigure_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMountConfigure_presult() throw() {}

  std::vector<MountConfigure> * success;

  _ArdupilotmegaMessageFetch_fetchMountConfigure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchMountControl_args {
 public:

  ArdupilotmegaMessageFetch_fetchMountControl_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMountControl_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchMountControl_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMountControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMountControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchMountControl_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMountControl_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMountControl_result__isset {
  _ArdupilotmegaMessageFetch_fetchMountControl_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMountControl_result__isset;

class ArdupilotmegaMessageFetch_fetchMountControl_result {
 public:

  ArdupilotmegaMessageFetch_fetchMountControl_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMountControl_result() throw() {}

  std::vector<MountControl>  success;

  _ArdupilotmegaMessageFetch_fetchMountControl_result__isset __isset;

  void __set_success(const std::vector<MountControl> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchMountControl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMountControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMountControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMountControl_presult__isset {
  _ArdupilotmegaMessageFetch_fetchMountControl_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMountControl_presult__isset;

class ArdupilotmegaMessageFetch_fetchMountControl_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMountControl_presult() throw() {}

  std::vector<MountControl> * success;

  _ArdupilotmegaMessageFetch_fetchMountControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchMountStatus_args {
 public:

  ArdupilotmegaMessageFetch_fetchMountStatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMountStatus_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchMountStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMountStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMountStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchMountStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMountStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMountStatus_result__isset {
  _ArdupilotmegaMessageFetch_fetchMountStatus_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMountStatus_result__isset;

class ArdupilotmegaMessageFetch_fetchMountStatus_result {
 public:

  ArdupilotmegaMessageFetch_fetchMountStatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchMountStatus_result() throw() {}

  std::vector<MountStatus>  success;

  _ArdupilotmegaMessageFetch_fetchMountStatus_result__isset __isset;

  void __set_success(const std::vector<MountStatus> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchMountStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchMountStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchMountStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchMountStatus_presult__isset {
  _ArdupilotmegaMessageFetch_fetchMountStatus_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchMountStatus_presult__isset;

class ArdupilotmegaMessageFetch_fetchMountStatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchMountStatus_presult() throw() {}

  std::vector<MountStatus> * success;

  _ArdupilotmegaMessageFetch_fetchMountStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchFencePoint_args {
 public:

  ArdupilotmegaMessageFetch_fetchFencePoint_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchFencePoint_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchFencePoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchFencePoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchFencePoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchFencePoint_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchFencePoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchFencePoint_result__isset {
  _ArdupilotmegaMessageFetch_fetchFencePoint_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchFencePoint_result__isset;

class ArdupilotmegaMessageFetch_fetchFencePoint_result {
 public:

  ArdupilotmegaMessageFetch_fetchFencePoint_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchFencePoint_result() throw() {}

  std::vector<FencePoint>  success;

  _ArdupilotmegaMessageFetch_fetchFencePoint_result__isset __isset;

  void __set_success(const std::vector<FencePoint> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchFencePoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchFencePoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchFencePoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchFencePoint_presult__isset {
  _ArdupilotmegaMessageFetch_fetchFencePoint_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchFencePoint_presult__isset;

class ArdupilotmegaMessageFetch_fetchFencePoint_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchFencePoint_presult() throw() {}

  std::vector<FencePoint> * success;

  _ArdupilotmegaMessageFetch_fetchFencePoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchFenceFetchPoint_args {
 public:

  ArdupilotmegaMessageFetch_fetchFenceFetchPoint_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchFenceFetchPoint_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchFenceFetchPoint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchFenceFetchPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchFenceFetchPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchFenceFetchPoint_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchFenceFetchPoint_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result__isset {
  _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result__isset;

class ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result {
 public:

  ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result() throw() {}

  std::vector<FenceFetchPoint>  success;

  _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result__isset __isset;

  void __set_success(const std::vector<FenceFetchPoint> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchFenceFetchPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_presult__isset {
  _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_presult__isset;

class ArdupilotmegaMessageFetch_fetchFenceFetchPoint_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchFenceFetchPoint_presult() throw() {}

  std::vector<FenceFetchPoint> * success;

  _ArdupilotmegaMessageFetch_fetchFenceFetchPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchFenceStatus_args {
 public:

  ArdupilotmegaMessageFetch_fetchFenceStatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchFenceStatus_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchFenceStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchFenceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchFenceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchFenceStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchFenceStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchFenceStatus_result__isset {
  _ArdupilotmegaMessageFetch_fetchFenceStatus_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchFenceStatus_result__isset;

class ArdupilotmegaMessageFetch_fetchFenceStatus_result {
 public:

  ArdupilotmegaMessageFetch_fetchFenceStatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchFenceStatus_result() throw() {}

  std::vector<FenceStatus>  success;

  _ArdupilotmegaMessageFetch_fetchFenceStatus_result__isset __isset;

  void __set_success(const std::vector<FenceStatus> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchFenceStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchFenceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchFenceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchFenceStatus_presult__isset {
  _ArdupilotmegaMessageFetch_fetchFenceStatus_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchFenceStatus_presult__isset;

class ArdupilotmegaMessageFetch_fetchFenceStatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchFenceStatus_presult() throw() {}

  std::vector<FenceStatus> * success;

  _ArdupilotmegaMessageFetch_fetchFenceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchAhrs_args {
 public:

  ArdupilotmegaMessageFetch_fetchAhrs_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchAhrs_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchAhrs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchAhrs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchAhrs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchAhrs_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchAhrs_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchAhrs_result__isset {
  _ArdupilotmegaMessageFetch_fetchAhrs_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchAhrs_result__isset;

class ArdupilotmegaMessageFetch_fetchAhrs_result {
 public:

  ArdupilotmegaMessageFetch_fetchAhrs_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchAhrs_result() throw() {}

  std::vector<Ahrs>  success;

  _ArdupilotmegaMessageFetch_fetchAhrs_result__isset __isset;

  void __set_success(const std::vector<Ahrs> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchAhrs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchAhrs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchAhrs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchAhrs_presult__isset {
  _ArdupilotmegaMessageFetch_fetchAhrs_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchAhrs_presult__isset;

class ArdupilotmegaMessageFetch_fetchAhrs_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchAhrs_presult() throw() {}

  std::vector<Ahrs> * success;

  _ArdupilotmegaMessageFetch_fetchAhrs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchSimstate_args {
 public:

  ArdupilotmegaMessageFetch_fetchSimstate_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchSimstate_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchSimstate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchSimstate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchSimstate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchSimstate_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchSimstate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchSimstate_result__isset {
  _ArdupilotmegaMessageFetch_fetchSimstate_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchSimstate_result__isset;

class ArdupilotmegaMessageFetch_fetchSimstate_result {
 public:

  ArdupilotmegaMessageFetch_fetchSimstate_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchSimstate_result() throw() {}

  std::vector<Simstate>  success;

  _ArdupilotmegaMessageFetch_fetchSimstate_result__isset __isset;

  void __set_success(const std::vector<Simstate> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchSimstate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchSimstate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchSimstate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchSimstate_presult__isset {
  _ArdupilotmegaMessageFetch_fetchSimstate_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchSimstate_presult__isset;

class ArdupilotmegaMessageFetch_fetchSimstate_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchSimstate_presult() throw() {}

  std::vector<Simstate> * success;

  _ArdupilotmegaMessageFetch_fetchSimstate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchHwstatus_args {
 public:

  ArdupilotmegaMessageFetch_fetchHwstatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchHwstatus_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchHwstatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchHwstatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchHwstatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchHwstatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchHwstatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchHwstatus_result__isset {
  _ArdupilotmegaMessageFetch_fetchHwstatus_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchHwstatus_result__isset;

class ArdupilotmegaMessageFetch_fetchHwstatus_result {
 public:

  ArdupilotmegaMessageFetch_fetchHwstatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchHwstatus_result() throw() {}

  std::vector<Hwstatus>  success;

  _ArdupilotmegaMessageFetch_fetchHwstatus_result__isset __isset;

  void __set_success(const std::vector<Hwstatus> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchHwstatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchHwstatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchHwstatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchHwstatus_presult__isset {
  _ArdupilotmegaMessageFetch_fetchHwstatus_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchHwstatus_presult__isset;

class ArdupilotmegaMessageFetch_fetchHwstatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchHwstatus_presult() throw() {}

  std::vector<Hwstatus> * success;

  _ArdupilotmegaMessageFetch_fetchHwstatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchRadio_args {
 public:

  ArdupilotmegaMessageFetch_fetchRadio_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchRadio_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchRadio_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchRadio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchRadio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchRadio_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchRadio_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchRadio_result__isset {
  _ArdupilotmegaMessageFetch_fetchRadio_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchRadio_result__isset;

class ArdupilotmegaMessageFetch_fetchRadio_result {
 public:

  ArdupilotmegaMessageFetch_fetchRadio_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchRadio_result() throw() {}

  std::vector<Radio>  success;

  _ArdupilotmegaMessageFetch_fetchRadio_result__isset __isset;

  void __set_success(const std::vector<Radio> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchRadio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchRadio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchRadio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchRadio_presult__isset {
  _ArdupilotmegaMessageFetch_fetchRadio_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchRadio_presult__isset;

class ArdupilotmegaMessageFetch_fetchRadio_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchRadio_presult() throw() {}

  std::vector<Radio> * success;

  _ArdupilotmegaMessageFetch_fetchRadio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchLimitsStatus_args {
 public:

  ArdupilotmegaMessageFetch_fetchLimitsStatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchLimitsStatus_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchLimitsStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchLimitsStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchLimitsStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchLimitsStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchLimitsStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchLimitsStatus_result__isset {
  _ArdupilotmegaMessageFetch_fetchLimitsStatus_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchLimitsStatus_result__isset;

class ArdupilotmegaMessageFetch_fetchLimitsStatus_result {
 public:

  ArdupilotmegaMessageFetch_fetchLimitsStatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchLimitsStatus_result() throw() {}

  std::vector<LimitsStatus>  success;

  _ArdupilotmegaMessageFetch_fetchLimitsStatus_result__isset __isset;

  void __set_success(const std::vector<LimitsStatus> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchLimitsStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchLimitsStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchLimitsStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchLimitsStatus_presult__isset {
  _ArdupilotmegaMessageFetch_fetchLimitsStatus_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchLimitsStatus_presult__isset;

class ArdupilotmegaMessageFetch_fetchLimitsStatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchLimitsStatus_presult() throw() {}

  std::vector<LimitsStatus> * success;

  _ArdupilotmegaMessageFetch_fetchLimitsStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchWind_args {
 public:

  ArdupilotmegaMessageFetch_fetchWind_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchWind_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchWind_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchWind_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchWind_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchWind_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchWind_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchWind_result__isset {
  _ArdupilotmegaMessageFetch_fetchWind_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchWind_result__isset;

class ArdupilotmegaMessageFetch_fetchWind_result {
 public:

  ArdupilotmegaMessageFetch_fetchWind_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchWind_result() throw() {}

  std::vector<Wind>  success;

  _ArdupilotmegaMessageFetch_fetchWind_result__isset __isset;

  void __set_success(const std::vector<Wind> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchWind_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchWind_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchWind_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchWind_presult__isset {
  _ArdupilotmegaMessageFetch_fetchWind_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchWind_presult__isset;

class ArdupilotmegaMessageFetch_fetchWind_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchWind_presult() throw() {}

  std::vector<Wind> * success;

  _ArdupilotmegaMessageFetch_fetchWind_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchData16_args {
 public:

  ArdupilotmegaMessageFetch_fetchData16_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData16_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchData16_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchData16_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData16_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData16_result__isset {
  _ArdupilotmegaMessageFetch_fetchData16_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData16_result__isset;

class ArdupilotmegaMessageFetch_fetchData16_result {
 public:

  ArdupilotmegaMessageFetch_fetchData16_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData16_result() throw() {}

  std::vector<Data16>  success;

  _ArdupilotmegaMessageFetch_fetchData16_result__isset __isset;

  void __set_success(const std::vector<Data16> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchData16_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData16_presult__isset {
  _ArdupilotmegaMessageFetch_fetchData16_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData16_presult__isset;

class ArdupilotmegaMessageFetch_fetchData16_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData16_presult() throw() {}

  std::vector<Data16> * success;

  _ArdupilotmegaMessageFetch_fetchData16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchData32_args {
 public:

  ArdupilotmegaMessageFetch_fetchData32_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData32_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchData32_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchData32_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData32_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData32_result__isset {
  _ArdupilotmegaMessageFetch_fetchData32_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData32_result__isset;

class ArdupilotmegaMessageFetch_fetchData32_result {
 public:

  ArdupilotmegaMessageFetch_fetchData32_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData32_result() throw() {}

  std::vector<Data32>  success;

  _ArdupilotmegaMessageFetch_fetchData32_result__isset __isset;

  void __set_success(const std::vector<Data32> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchData32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData32_presult__isset {
  _ArdupilotmegaMessageFetch_fetchData32_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData32_presult__isset;

class ArdupilotmegaMessageFetch_fetchData32_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData32_presult() throw() {}

  std::vector<Data32> * success;

  _ArdupilotmegaMessageFetch_fetchData32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchData64_args {
 public:

  ArdupilotmegaMessageFetch_fetchData64_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData64_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchData64_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchData64_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData64_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData64_result__isset {
  _ArdupilotmegaMessageFetch_fetchData64_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData64_result__isset;

class ArdupilotmegaMessageFetch_fetchData64_result {
 public:

  ArdupilotmegaMessageFetch_fetchData64_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData64_result() throw() {}

  std::vector<Data64>  success;

  _ArdupilotmegaMessageFetch_fetchData64_result__isset __isset;

  void __set_success(const std::vector<Data64> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchData64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData64_presult__isset {
  _ArdupilotmegaMessageFetch_fetchData64_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData64_presult__isset;

class ArdupilotmegaMessageFetch_fetchData64_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData64_presult() throw() {}

  std::vector<Data64> * success;

  _ArdupilotmegaMessageFetch_fetchData64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchData96_args {
 public:

  ArdupilotmegaMessageFetch_fetchData96_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData96_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchData96_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData96_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData96_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchData96_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData96_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData96_result__isset {
  _ArdupilotmegaMessageFetch_fetchData96_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData96_result__isset;

class ArdupilotmegaMessageFetch_fetchData96_result {
 public:

  ArdupilotmegaMessageFetch_fetchData96_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchData96_result() throw() {}

  std::vector<Data96>  success;

  _ArdupilotmegaMessageFetch_fetchData96_result__isset __isset;

  void __set_success(const std::vector<Data96> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchData96_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchData96_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchData96_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchData96_presult__isset {
  _ArdupilotmegaMessageFetch_fetchData96_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchData96_presult__isset;

class ArdupilotmegaMessageFetch_fetchData96_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchData96_presult() throw() {}

  std::vector<Data96> * success;

  _ArdupilotmegaMessageFetch_fetchData96_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ArdupilotmegaMessageFetch_fetchRangefinder_args {
 public:

  ArdupilotmegaMessageFetch_fetchRangefinder_args() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchRangefinder_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetch_fetchRangefinder_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchRangefinder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchRangefinder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetch_fetchRangefinder_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchRangefinder_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchRangefinder_result__isset {
  _ArdupilotmegaMessageFetch_fetchRangefinder_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchRangefinder_result__isset;

class ArdupilotmegaMessageFetch_fetchRangefinder_result {
 public:

  ArdupilotmegaMessageFetch_fetchRangefinder_result() {
  }

  virtual ~ArdupilotmegaMessageFetch_fetchRangefinder_result() throw() {}

  std::vector<Rangefinder>  success;

  _ArdupilotmegaMessageFetch_fetchRangefinder_result__isset __isset;

  void __set_success(const std::vector<Rangefinder> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetch_fetchRangefinder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetch_fetchRangefinder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetch_fetchRangefinder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetch_fetchRangefinder_presult__isset {
  _ArdupilotmegaMessageFetch_fetchRangefinder_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetch_fetchRangefinder_presult__isset;

class ArdupilotmegaMessageFetch_fetchRangefinder_presult {
 public:


  virtual ~ArdupilotmegaMessageFetch_fetchRangefinder_presult() throw() {}

  std::vector<Rangefinder> * success;

  _ArdupilotmegaMessageFetch_fetchRangefinder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ArdupilotmegaMessageFetchClient : virtual public ArdupilotmegaMessageFetchIf, public  ::mavlink::thrift::CommonMessageFetchClient {
 public:
  ArdupilotmegaMessageFetchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::mavlink::thrift::CommonMessageFetchClient(prot, prot) {}
  ArdupilotmegaMessageFetchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::mavlink::thrift::CommonMessageFetchClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return);
  void send_availableMessages();
  void recv_availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return);
  void fetchSensorOffsets(std::vector<SensorOffsets> & _return);
  void send_fetchSensorOffsets();
  void recv_fetchSensorOffsets(std::vector<SensorOffsets> & _return);
  void fetchSetMagOffsets(std::vector<SetMagOffsets> & _return);
  void send_fetchSetMagOffsets();
  void recv_fetchSetMagOffsets(std::vector<SetMagOffsets> & _return);
  void fetchMeminfo(std::vector<Meminfo> & _return);
  void send_fetchMeminfo();
  void recv_fetchMeminfo(std::vector<Meminfo> & _return);
  void fetchApAdc(std::vector<ApAdc> & _return);
  void send_fetchApAdc();
  void recv_fetchApAdc(std::vector<ApAdc> & _return);
  void fetchDigicamConfigure(std::vector<DigicamConfigure> & _return);
  void send_fetchDigicamConfigure();
  void recv_fetchDigicamConfigure(std::vector<DigicamConfigure> & _return);
  void fetchDigicamControl(std::vector<DigicamControl> & _return);
  void send_fetchDigicamControl();
  void recv_fetchDigicamControl(std::vector<DigicamControl> & _return);
  void fetchMountConfigure(std::vector<MountConfigure> & _return);
  void send_fetchMountConfigure();
  void recv_fetchMountConfigure(std::vector<MountConfigure> & _return);
  void fetchMountControl(std::vector<MountControl> & _return);
  void send_fetchMountControl();
  void recv_fetchMountControl(std::vector<MountControl> & _return);
  void fetchMountStatus(std::vector<MountStatus> & _return);
  void send_fetchMountStatus();
  void recv_fetchMountStatus(std::vector<MountStatus> & _return);
  void fetchFencePoint(std::vector<FencePoint> & _return);
  void send_fetchFencePoint();
  void recv_fetchFencePoint(std::vector<FencePoint> & _return);
  void fetchFenceFetchPoint(std::vector<FenceFetchPoint> & _return);
  void send_fetchFenceFetchPoint();
  void recv_fetchFenceFetchPoint(std::vector<FenceFetchPoint> & _return);
  void fetchFenceStatus(std::vector<FenceStatus> & _return);
  void send_fetchFenceStatus();
  void recv_fetchFenceStatus(std::vector<FenceStatus> & _return);
  void fetchAhrs(std::vector<Ahrs> & _return);
  void send_fetchAhrs();
  void recv_fetchAhrs(std::vector<Ahrs> & _return);
  void fetchSimstate(std::vector<Simstate> & _return);
  void send_fetchSimstate();
  void recv_fetchSimstate(std::vector<Simstate> & _return);
  void fetchHwstatus(std::vector<Hwstatus> & _return);
  void send_fetchHwstatus();
  void recv_fetchHwstatus(std::vector<Hwstatus> & _return);
  void fetchRadio(std::vector<Radio> & _return);
  void send_fetchRadio();
  void recv_fetchRadio(std::vector<Radio> & _return);
  void fetchLimitsStatus(std::vector<LimitsStatus> & _return);
  void send_fetchLimitsStatus();
  void recv_fetchLimitsStatus(std::vector<LimitsStatus> & _return);
  void fetchWind(std::vector<Wind> & _return);
  void send_fetchWind();
  void recv_fetchWind(std::vector<Wind> & _return);
  void fetchData16(std::vector<Data16> & _return);
  void send_fetchData16();
  void recv_fetchData16(std::vector<Data16> & _return);
  void fetchData32(std::vector<Data32> & _return);
  void send_fetchData32();
  void recv_fetchData32(std::vector<Data32> & _return);
  void fetchData64(std::vector<Data64> & _return);
  void send_fetchData64();
  void recv_fetchData64(std::vector<Data64> & _return);
  void fetchData96(std::vector<Data96> & _return);
  void send_fetchData96();
  void recv_fetchData96(std::vector<Data96> & _return);
  void fetchRangefinder(std::vector<Rangefinder> & _return);
  void send_fetchRangefinder();
  void recv_fetchRangefinder(std::vector<Rangefinder> & _return);
};

class ArdupilotmegaMessageFetchProcessor : public  ::mavlink::thrift::CommonMessageFetchProcessor {
 protected:
  boost::shared_ptr<ArdupilotmegaMessageFetchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ArdupilotmegaMessageFetchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_availableMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSensorOffsets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetMagOffsets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMeminfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchApAdc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDigicamConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDigicamControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMountConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMountControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMountStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFencePoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFenceFetchPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFenceStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAhrs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSimstate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHwstatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRadio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLimitsStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchWind(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData96(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRangefinder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ArdupilotmegaMessageFetchProcessor(boost::shared_ptr<ArdupilotmegaMessageFetchIf> iface) :
     ::mavlink::thrift::CommonMessageFetchProcessor(iface),
    iface_(iface) {
    processMap_["availableMessages"] = &ArdupilotmegaMessageFetchProcessor::process_availableMessages;
    processMap_["fetchSensorOffsets"] = &ArdupilotmegaMessageFetchProcessor::process_fetchSensorOffsets;
    processMap_["fetchSetMagOffsets"] = &ArdupilotmegaMessageFetchProcessor::process_fetchSetMagOffsets;
    processMap_["fetchMeminfo"] = &ArdupilotmegaMessageFetchProcessor::process_fetchMeminfo;
    processMap_["fetchApAdc"] = &ArdupilotmegaMessageFetchProcessor::process_fetchApAdc;
    processMap_["fetchDigicamConfigure"] = &ArdupilotmegaMessageFetchProcessor::process_fetchDigicamConfigure;
    processMap_["fetchDigicamControl"] = &ArdupilotmegaMessageFetchProcessor::process_fetchDigicamControl;
    processMap_["fetchMountConfigure"] = &ArdupilotmegaMessageFetchProcessor::process_fetchMountConfigure;
    processMap_["fetchMountControl"] = &ArdupilotmegaMessageFetchProcessor::process_fetchMountControl;
    processMap_["fetchMountStatus"] = &ArdupilotmegaMessageFetchProcessor::process_fetchMountStatus;
    processMap_["fetchFencePoint"] = &ArdupilotmegaMessageFetchProcessor::process_fetchFencePoint;
    processMap_["fetchFenceFetchPoint"] = &ArdupilotmegaMessageFetchProcessor::process_fetchFenceFetchPoint;
    processMap_["fetchFenceStatus"] = &ArdupilotmegaMessageFetchProcessor::process_fetchFenceStatus;
    processMap_["fetchAhrs"] = &ArdupilotmegaMessageFetchProcessor::process_fetchAhrs;
    processMap_["fetchSimstate"] = &ArdupilotmegaMessageFetchProcessor::process_fetchSimstate;
    processMap_["fetchHwstatus"] = &ArdupilotmegaMessageFetchProcessor::process_fetchHwstatus;
    processMap_["fetchRadio"] = &ArdupilotmegaMessageFetchProcessor::process_fetchRadio;
    processMap_["fetchLimitsStatus"] = &ArdupilotmegaMessageFetchProcessor::process_fetchLimitsStatus;
    processMap_["fetchWind"] = &ArdupilotmegaMessageFetchProcessor::process_fetchWind;
    processMap_["fetchData16"] = &ArdupilotmegaMessageFetchProcessor::process_fetchData16;
    processMap_["fetchData32"] = &ArdupilotmegaMessageFetchProcessor::process_fetchData32;
    processMap_["fetchData64"] = &ArdupilotmegaMessageFetchProcessor::process_fetchData64;
    processMap_["fetchData96"] = &ArdupilotmegaMessageFetchProcessor::process_fetchData96;
    processMap_["fetchRangefinder"] = &ArdupilotmegaMessageFetchProcessor::process_fetchRangefinder;
  }

  virtual ~ArdupilotmegaMessageFetchProcessor() {}
};

class ArdupilotmegaMessageFetchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ArdupilotmegaMessageFetchProcessorFactory(const ::boost::shared_ptr< ArdupilotmegaMessageFetchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ArdupilotmegaMessageFetchIfFactory > handlerFactory_;
};

class ArdupilotmegaMessageFetchMultiface : virtual public ArdupilotmegaMessageFetchIf, public  ::mavlink::thrift::CommonMessageFetchMultiface {
 public:
  ArdupilotmegaMessageFetchMultiface(std::vector<boost::shared_ptr<ArdupilotmegaMessageFetchIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ArdupilotmegaMessageFetchIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::mavlink::thrift::CommonMessageFetchMultiface::add(*iter);
    }
  }
  virtual ~ArdupilotmegaMessageFetchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ArdupilotmegaMessageFetchIf> > ifaces_;
  ArdupilotmegaMessageFetchMultiface() {}
  void add(boost::shared_ptr<ArdupilotmegaMessageFetchIf> iface) {
     ::mavlink::thrift::CommonMessageFetchMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->availableMessages(_return);
    }
    ifaces_[i]->availableMessages(_return);
    return;
  }

  void fetchSensorOffsets(std::vector<SensorOffsets> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSensorOffsets(_return);
    }
    ifaces_[i]->fetchSensorOffsets(_return);
    return;
  }

  void fetchSetMagOffsets(std::vector<SetMagOffsets> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetMagOffsets(_return);
    }
    ifaces_[i]->fetchSetMagOffsets(_return);
    return;
  }

  void fetchMeminfo(std::vector<Meminfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMeminfo(_return);
    }
    ifaces_[i]->fetchMeminfo(_return);
    return;
  }

  void fetchApAdc(std::vector<ApAdc> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchApAdc(_return);
    }
    ifaces_[i]->fetchApAdc(_return);
    return;
  }

  void fetchDigicamConfigure(std::vector<DigicamConfigure> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDigicamConfigure(_return);
    }
    ifaces_[i]->fetchDigicamConfigure(_return);
    return;
  }

  void fetchDigicamControl(std::vector<DigicamControl> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDigicamControl(_return);
    }
    ifaces_[i]->fetchDigicamControl(_return);
    return;
  }

  void fetchMountConfigure(std::vector<MountConfigure> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMountConfigure(_return);
    }
    ifaces_[i]->fetchMountConfigure(_return);
    return;
  }

  void fetchMountControl(std::vector<MountControl> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMountControl(_return);
    }
    ifaces_[i]->fetchMountControl(_return);
    return;
  }

  void fetchMountStatus(std::vector<MountStatus> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMountStatus(_return);
    }
    ifaces_[i]->fetchMountStatus(_return);
    return;
  }

  void fetchFencePoint(std::vector<FencePoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFencePoint(_return);
    }
    ifaces_[i]->fetchFencePoint(_return);
    return;
  }

  void fetchFenceFetchPoint(std::vector<FenceFetchPoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFenceFetchPoint(_return);
    }
    ifaces_[i]->fetchFenceFetchPoint(_return);
    return;
  }

  void fetchFenceStatus(std::vector<FenceStatus> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFenceStatus(_return);
    }
    ifaces_[i]->fetchFenceStatus(_return);
    return;
  }

  void fetchAhrs(std::vector<Ahrs> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAhrs(_return);
    }
    ifaces_[i]->fetchAhrs(_return);
    return;
  }

  void fetchSimstate(std::vector<Simstate> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSimstate(_return);
    }
    ifaces_[i]->fetchSimstate(_return);
    return;
  }

  void fetchHwstatus(std::vector<Hwstatus> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHwstatus(_return);
    }
    ifaces_[i]->fetchHwstatus(_return);
    return;
  }

  void fetchRadio(std::vector<Radio> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRadio(_return);
    }
    ifaces_[i]->fetchRadio(_return);
    return;
  }

  void fetchLimitsStatus(std::vector<LimitsStatus> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLimitsStatus(_return);
    }
    ifaces_[i]->fetchLimitsStatus(_return);
    return;
  }

  void fetchWind(std::vector<Wind> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchWind(_return);
    }
    ifaces_[i]->fetchWind(_return);
    return;
  }

  void fetchData16(std::vector<Data16> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData16(_return);
    }
    ifaces_[i]->fetchData16(_return);
    return;
  }

  void fetchData32(std::vector<Data32> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData32(_return);
    }
    ifaces_[i]->fetchData32(_return);
    return;
  }

  void fetchData64(std::vector<Data64> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData64(_return);
    }
    ifaces_[i]->fetchData64(_return);
    return;
  }

  void fetchData96(std::vector<Data96> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData96(_return);
    }
    ifaces_[i]->fetchData96(_return);
    return;
  }

  void fetchRangefinder(std::vector<Rangefinder> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRangefinder(_return);
    }
    ifaces_[i]->fetchRangefinder(_return);
    return;
  }

};

}} // namespace

#endif
