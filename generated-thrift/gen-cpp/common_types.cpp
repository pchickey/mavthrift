/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "common_types.h"

#include <algorithm>

namespace mavlink { namespace thrift {

int _kCommonMessageTypesValues[] = {
  CommonMessageTypes::HEARTBEAT,
  CommonMessageTypes::SYS_STATUS,
  CommonMessageTypes::SYSTEM_TIME,
  CommonMessageTypes::PING,
  CommonMessageTypes::CHANGE_OPERATOR_CONTROL,
  CommonMessageTypes::CHANGE_OPERATOR_CONTROL_ACK,
  CommonMessageTypes::AUTH_KEY,
  CommonMessageTypes::SET_MODE,
  CommonMessageTypes::PARAM_REQUEST_READ,
  CommonMessageTypes::PARAM_REQUEST_LIST,
  CommonMessageTypes::PARAM_VALUE,
  CommonMessageTypes::PARAM_SET,
  CommonMessageTypes::GPS_RAW_INT,
  CommonMessageTypes::GPS_STATUS,
  CommonMessageTypes::SCALED_IMU,
  CommonMessageTypes::RAW_IMU,
  CommonMessageTypes::RAW_PRESSURE,
  CommonMessageTypes::SCALED_PRESSURE,
  CommonMessageTypes::ATTITUDE,
  CommonMessageTypes::ATTITUDE_QUATERNION,
  CommonMessageTypes::LOCAL_POSITION_NED,
  CommonMessageTypes::GLOBAL_POSITION_INT,
  CommonMessageTypes::RC_CHANNELS_SCALED,
  CommonMessageTypes::RC_CHANNELS_RAW,
  CommonMessageTypes::SERVO_OUTPUT_RAW,
  CommonMessageTypes::MISSION_REQUEST_PARTIAL_LIST,
  CommonMessageTypes::MISSION_WRITE_PARTIAL_LIST,
  CommonMessageTypes::MISSION_ITEM,
  CommonMessageTypes::MISSION_REQUEST,
  CommonMessageTypes::MISSION_SET_CURRENT,
  CommonMessageTypes::MISSION_CURRENT,
  CommonMessageTypes::MISSION_REQUEST_LIST,
  CommonMessageTypes::MISSION_COUNT,
  CommonMessageTypes::MISSION_CLEAR_ALL,
  CommonMessageTypes::MISSION_ITEM_REACHED,
  CommonMessageTypes::MISSION_ACK,
  CommonMessageTypes::SET_GPS_GLOBAL_ORIGIN,
  CommonMessageTypes::GPS_GLOBAL_ORIGIN,
  CommonMessageTypes::SET_LOCAL_POSITION_SETPOINT,
  CommonMessageTypes::LOCAL_POSITION_SETPOINT,
  CommonMessageTypes::GLOBAL_POSITION_SETPOINT_INT,
  CommonMessageTypes::SET_GLOBAL_POSITION_SETPOINT_INT,
  CommonMessageTypes::SAFETY_SET_ALLOWED_AREA,
  CommonMessageTypes::SAFETY_ALLOWED_AREA,
  CommonMessageTypes::SET_ROLL_PITCH_YAW_THRUST,
  CommonMessageTypes::SET_ROLL_PITCH_YAW_SPEED_THRUST,
  CommonMessageTypes::ROLL_PITCH_YAW_THRUST_SETPOINT,
  CommonMessageTypes::ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT,
  CommonMessageTypes::SET_QUAD_MOTORS_SETPOINT,
  CommonMessageTypes::SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST,
  CommonMessageTypes::NAV_CONTROLLER_OUTPUT,
  CommonMessageTypes::SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST,
  CommonMessageTypes::STATE_CORRECTION,
  CommonMessageTypes::REQUEST_DATA_STREAM,
  CommonMessageTypes::DATA_STREAM,
  CommonMessageTypes::MANUAL_CONTROL,
  CommonMessageTypes::RC_CHANNELS_OVERRIDE,
  CommonMessageTypes::VFR_HUD,
  CommonMessageTypes::COMMAND_LONG,
  CommonMessageTypes::COMMAND_ACK,
  CommonMessageTypes::ROLL_PITCH_YAW_RATES_THRUST_SETPOINT,
  CommonMessageTypes::MANUAL_SETPOINT,
  CommonMessageTypes::LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET,
  CommonMessageTypes::HIL_STATE,
  CommonMessageTypes::HIL_CONTROLS,
  CommonMessageTypes::HIL_RC_INPUTS_RAW,
  CommonMessageTypes::OPTICAL_FLOW,
  CommonMessageTypes::GLOBAL_VISION_POSITION_ESTIMATE,
  CommonMessageTypes::VISION_POSITION_ESTIMATE,
  CommonMessageTypes::VISION_SPEED_ESTIMATE,
  CommonMessageTypes::VICON_POSITION_ESTIMATE,
  CommonMessageTypes::HIGHRES_IMU,
  CommonMessageTypes::OMNIDIRECTIONAL_FLOW,
  CommonMessageTypes::FILE_TRANSFER_START,
  CommonMessageTypes::FILE_TRANSFER_DIR_LIST,
  CommonMessageTypes::FILE_TRANSFER_RES,
  CommonMessageTypes::BATTERY_STATUS,
  CommonMessageTypes::SETPOINT_8DOF,
  CommonMessageTypes::SETPOINT_6DOF,
  CommonMessageTypes::MEMORY_VECT,
  CommonMessageTypes::DEBUG_VECT,
  CommonMessageTypes::NAMED_VALUE_FLOAT,
  CommonMessageTypes::NAMED_VALUE_INT,
  CommonMessageTypes::STATUSTEXT,
  CommonMessageTypes::DEBUG
};
const char* _kCommonMessageTypesNames[] = {
  "HEARTBEAT",
  "SYS_STATUS",
  "SYSTEM_TIME",
  "PING",
  "CHANGE_OPERATOR_CONTROL",
  "CHANGE_OPERATOR_CONTROL_ACK",
  "AUTH_KEY",
  "SET_MODE",
  "PARAM_REQUEST_READ",
  "PARAM_REQUEST_LIST",
  "PARAM_VALUE",
  "PARAM_SET",
  "GPS_RAW_INT",
  "GPS_STATUS",
  "SCALED_IMU",
  "RAW_IMU",
  "RAW_PRESSURE",
  "SCALED_PRESSURE",
  "ATTITUDE",
  "ATTITUDE_QUATERNION",
  "LOCAL_POSITION_NED",
  "GLOBAL_POSITION_INT",
  "RC_CHANNELS_SCALED",
  "RC_CHANNELS_RAW",
  "SERVO_OUTPUT_RAW",
  "MISSION_REQUEST_PARTIAL_LIST",
  "MISSION_WRITE_PARTIAL_LIST",
  "MISSION_ITEM",
  "MISSION_REQUEST",
  "MISSION_SET_CURRENT",
  "MISSION_CURRENT",
  "MISSION_REQUEST_LIST",
  "MISSION_COUNT",
  "MISSION_CLEAR_ALL",
  "MISSION_ITEM_REACHED",
  "MISSION_ACK",
  "SET_GPS_GLOBAL_ORIGIN",
  "GPS_GLOBAL_ORIGIN",
  "SET_LOCAL_POSITION_SETPOINT",
  "LOCAL_POSITION_SETPOINT",
  "GLOBAL_POSITION_SETPOINT_INT",
  "SET_GLOBAL_POSITION_SETPOINT_INT",
  "SAFETY_SET_ALLOWED_AREA",
  "SAFETY_ALLOWED_AREA",
  "SET_ROLL_PITCH_YAW_THRUST",
  "SET_ROLL_PITCH_YAW_SPEED_THRUST",
  "ROLL_PITCH_YAW_THRUST_SETPOINT",
  "ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT",
  "SET_QUAD_MOTORS_SETPOINT",
  "SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST",
  "NAV_CONTROLLER_OUTPUT",
  "SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST",
  "STATE_CORRECTION",
  "REQUEST_DATA_STREAM",
  "DATA_STREAM",
  "MANUAL_CONTROL",
  "RC_CHANNELS_OVERRIDE",
  "VFR_HUD",
  "COMMAND_LONG",
  "COMMAND_ACK",
  "ROLL_PITCH_YAW_RATES_THRUST_SETPOINT",
  "MANUAL_SETPOINT",
  "LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET",
  "HIL_STATE",
  "HIL_CONTROLS",
  "HIL_RC_INPUTS_RAW",
  "OPTICAL_FLOW",
  "GLOBAL_VISION_POSITION_ESTIMATE",
  "VISION_POSITION_ESTIMATE",
  "VISION_SPEED_ESTIMATE",
  "VICON_POSITION_ESTIMATE",
  "HIGHRES_IMU",
  "OMNIDIRECTIONAL_FLOW",
  "FILE_TRANSFER_START",
  "FILE_TRANSFER_DIR_LIST",
  "FILE_TRANSFER_RES",
  "BATTERY_STATUS",
  "SETPOINT_8DOF",
  "SETPOINT_6DOF",
  "MEMORY_VECT",
  "DEBUG_VECT",
  "NAMED_VALUE_FLOAT",
  "NAMED_VALUE_INT",
  "STATUSTEXT",
  "DEBUG"
};
const std::map<int, const char*> _CommonMessageTypes_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(85, _kCommonMessageTypesValues, _kCommonMessageTypesNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAutopilotValues[] = {
  Autopilot::GENERIC,
  Autopilot::PIXHAWK,
  Autopilot::SLUGS,
  Autopilot::ARDUPILOTMEGA,
  Autopilot::OPENPILOT,
  Autopilot::GENERIC_WAYPOINTS_ONLY,
  Autopilot::GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY,
  Autopilot::GENERIC_MISSION_FULL,
  Autopilot::INVALID,
  Autopilot::PPZ,
  Autopilot::UDB,
  Autopilot::FP,
  Autopilot::PX4,
  Autopilot::SMACCMPILOT
};
const char* _kAutopilotNames[] = {
  "GENERIC",
  "PIXHAWK",
  "SLUGS",
  "ARDUPILOTMEGA",
  "OPENPILOT",
  "GENERIC_WAYPOINTS_ONLY",
  "GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY",
  "GENERIC_MISSION_FULL",
  "INVALID",
  "PPZ",
  "UDB",
  "FP",
  "PX4",
  "SMACCMPILOT"
};
const std::map<int, const char*> _Autopilot_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kAutopilotValues, _kAutopilotNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTypeValues[] = {
  Type::GENERIC,
  Type::FIXED_WING,
  Type::QUADROTOR,
  Type::COAXIAL,
  Type::HELICOPTER,
  Type::ANTENNA_TRACKER,
  Type::GCS,
  Type::AIRSHIP,
  Type::FREE_BALLOON,
  Type::ROCKET,
  Type::GROUND_ROVER,
  Type::SURFACE_BOAT,
  Type::SUBMARINE,
  Type::HEXAROTOR,
  Type::OCTOROTOR,
  Type::TRICOPTER,
  Type::FLAPPING_WING,
  Type::KITE
};
const char* _kTypeNames[] = {
  "GENERIC",
  "FIXED_WING",
  "QUADROTOR",
  "COAXIAL",
  "HELICOPTER",
  "ANTENNA_TRACKER",
  "GCS",
  "AIRSHIP",
  "FREE_BALLOON",
  "ROCKET",
  "GROUND_ROVER",
  "SURFACE_BOAT",
  "SUBMARINE",
  "HEXAROTOR",
  "OCTOROTOR",
  "TRICOPTER",
  "FLAPPING_WING",
  "KITE"
};
const std::map<int, const char*> _Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(18, _kTypeValues, _kTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMode_flagValues[] = {
  Mode_flag::CUSTOM_MODE_ENABLED,
  Mode_flag::TEST_ENABLED,
  Mode_flag::AUTO_ENABLED,
  Mode_flag::GUIDED_ENABLED,
  Mode_flag::STABILIZE_ENABLED,
  Mode_flag::HIL_ENABLED,
  Mode_flag::MANUAL_INPUT_ENABLED,
  Mode_flag::SAFETY_ARMED
};
const char* _kMode_flagNames[] = {
  "CUSTOM_MODE_ENABLED",
  "TEST_ENABLED",
  "AUTO_ENABLED",
  "GUIDED_ENABLED",
  "STABILIZE_ENABLED",
  "HIL_ENABLED",
  "MANUAL_INPUT_ENABLED",
  "SAFETY_ARMED"
};
const std::map<int, const char*> _Mode_flag_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kMode_flagValues, _kMode_flagNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMode_flag_decode_positionValues[] = {
  Mode_flag_decode_position::CUSTOM_MODE,
  Mode_flag_decode_position::TEST,
  Mode_flag_decode_position::AUTO,
  Mode_flag_decode_position::GUIDED,
  Mode_flag_decode_position::STABILIZE,
  Mode_flag_decode_position::HIL,
  Mode_flag_decode_position::MANUAL,
  Mode_flag_decode_position::SAFETY
};
const char* _kMode_flag_decode_positionNames[] = {
  "CUSTOM_MODE",
  "TEST",
  "AUTO",
  "GUIDED",
  "STABILIZE",
  "HIL",
  "MANUAL",
  "SAFETY"
};
const std::map<int, const char*> _Mode_flag_decode_position_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kMode_flag_decode_positionValues, _kMode_flag_decode_positionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGotoValues[] = {
  Goto::DO_HOLD,
  Goto::DO_CONTINUE,
  Goto::HOLD_AT_CURRENT_POSITION,
  Goto::HOLD_AT_SPECIFIED_POSITION
};
const char* _kGotoNames[] = {
  "DO_HOLD",
  "DO_CONTINUE",
  "HOLD_AT_CURRENT_POSITION",
  "HOLD_AT_SPECIFIED_POSITION"
};
const std::map<int, const char*> _Goto_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kGotoValues, _kGotoNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kModeValues[] = {
  Mode::PREFLIGHT,
  Mode::MANUAL_DISARMED,
  Mode::TEST_DISARMED,
  Mode::STABILIZE_DISARMED,
  Mode::GUIDED_DISARMED,
  Mode::AUTO_DISARMED,
  Mode::MANUAL_ARMED,
  Mode::TEST_ARMED,
  Mode::STABILIZE_ARMED,
  Mode::GUIDED_ARMED,
  Mode::AUTO_ARMED
};
const char* _kModeNames[] = {
  "PREFLIGHT",
  "MANUAL_DISARMED",
  "TEST_DISARMED",
  "STABILIZE_DISARMED",
  "GUIDED_DISARMED",
  "AUTO_DISARMED",
  "MANUAL_ARMED",
  "TEST_ARMED",
  "STABILIZE_ARMED",
  "GUIDED_ARMED",
  "AUTO_ARMED"
};
const std::map<int, const char*> _Mode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kModeValues, _kModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStateValues[] = {
  State::UNINIT,
  State::BOOT,
  State::CALIBRATING,
  State::STANDBY,
  State::ACTIVE,
  State::CRITICAL,
  State::EMERGENCY,
  State::POWEROFF
};
const char* _kStateNames[] = {
  "UNINIT",
  "BOOT",
  "CALIBRATING",
  "STANDBY",
  "ACTIVE",
  "CRITICAL",
  "EMERGENCY",
  "POWEROFF"
};
const std::map<int, const char*> _State_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kStateValues, _kStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kComponentValues[] = {
  Component::ALL,
  Component::CAMERA,
  Component::SERVO1,
  Component::SERVO2,
  Component::SERVO3,
  Component::SERVO4,
  Component::SERVO5,
  Component::SERVO6,
  Component::SERVO7,
  Component::SERVO8,
  Component::SERVO9,
  Component::SERVO10,
  Component::SERVO11,
  Component::SERVO12,
  Component::SERVO13,
  Component::SERVO14,
  Component::MAPPER,
  Component::MISSIONPLANNER,
  Component::PATHPLANNER,
  Component::IMU,
  Component::IMU_2,
  Component::IMU_3,
  Component::GPS,
  Component::UDP_BRIDGE,
  Component::UART_BRIDGE,
  Component::SYSTEM_CONTROL,
  Component::MAV_COMPONENT_ENUM_END
};
const char* _kComponentNames[] = {
  "ALL",
  "CAMERA",
  "SERVO1",
  "SERVO2",
  "SERVO3",
  "SERVO4",
  "SERVO5",
  "SERVO6",
  "SERVO7",
  "SERVO8",
  "SERVO9",
  "SERVO10",
  "SERVO11",
  "SERVO12",
  "SERVO13",
  "SERVO14",
  "MAPPER",
  "MISSIONPLANNER",
  "PATHPLANNER",
  "IMU",
  "IMU_2",
  "IMU_3",
  "GPS",
  "UDP_BRIDGE",
  "UART_BRIDGE",
  "SYSTEM_CONTROL",
  "MAV_COMPONENT_ENUM_END"
};
const std::map<int, const char*> _Component_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(27, _kComponentValues, _kComponentNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFrameValues[] = {
  Frame::GLOBAL,
  Frame::LOCAL_NED,
  Frame::MISSION,
  Frame::GLOBAL_RELATIVE_ALT,
  Frame::LOCAL_ENU
};
const char* _kFrameNames[] = {
  "GLOBAL",
  "LOCAL_NED",
  "MISSION",
  "GLOBAL_RELATIVE_ALT",
  "LOCAL_ENU"
};
const std::map<int, const char*> _Frame_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kFrameValues, _kFrameNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kData_stream_typeValues[] = {
  Data_stream_type::IMG_JPEG,
  Data_stream_type::IMG_BMP,
  Data_stream_type::IMG_RAW8U,
  Data_stream_type::IMG_RAW32U,
  Data_stream_type::IMG_PGM,
  Data_stream_type::IMG_PNG,
  Data_stream_type::TYPE_ENUM_END
};
const char* _kData_stream_typeNames[] = {
  "IMG_JPEG",
  "IMG_BMP",
  "IMG_RAW8U",
  "IMG_RAW32U",
  "IMG_PGM",
  "IMG_PNG",
  "TYPE_ENUM_END"
};
const std::map<int, const char*> _Data_stream_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kData_stream_typeValues, _kData_stream_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kData_streamValues[] = {
  Data_stream::ALL,
  Data_stream::RAW_SENSORS,
  Data_stream::EXTENDED_STATUS,
  Data_stream::RC_CHANNELS,
  Data_stream::RAW_CONTROLLER,
  Data_stream::POSITION,
  Data_stream::EXTRA1,
  Data_stream::EXTRA2,
  Data_stream::EXTRA3
};
const char* _kData_streamNames[] = {
  "ALL",
  "RAW_SENSORS",
  "EXTENDED_STATUS",
  "RC_CHANNELS",
  "RAW_CONTROLLER",
  "POSITION",
  "EXTRA1",
  "EXTRA2",
  "EXTRA3"
};
const std::map<int, const char*> _Data_stream_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kData_streamValues, _kData_streamNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoiValues[] = {
  Roi::NONE,
  Roi::WPNEXT,
  Roi::WPINDEX,
  Roi::LOCATION,
  Roi::TARGET
};
const char* _kRoiNames[] = {
  "NONE",
  "WPNEXT",
  "WPINDEX",
  "LOCATION",
  "TARGET"
};
const std::map<int, const char*> _Roi_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRoiValues, _kRoiNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCmd_ackValues[] = {
  Cmd_ack::OK,
  Cmd_ack::ERR_FAIL,
  Cmd_ack::ERR_ACCESS_DENIED,
  Cmd_ack::ERR_NOT_SUPPORTED,
  Cmd_ack::ERR_COORDINATE_FRAME_NOT_SUPPORTED,
  Cmd_ack::ERR_COORDINATES_OUT_OF_RANGE,
  Cmd_ack::ERR_X_LAT_OUT_OF_RANGE,
  Cmd_ack::ERR_Y_LON_OUT_OF_RANGE,
  Cmd_ack::ERR_Z_ALT_OUT_OF_RANGE
};
const char* _kCmd_ackNames[] = {
  "OK",
  "ERR_FAIL",
  "ERR_ACCESS_DENIED",
  "ERR_NOT_SUPPORTED",
  "ERR_COORDINATE_FRAME_NOT_SUPPORTED",
  "ERR_COORDINATES_OUT_OF_RANGE",
  "ERR_X_LAT_OUT_OF_RANGE",
  "ERR_Y_LON_OUT_OF_RANGE",
  "ERR_Z_ALT_OUT_OF_RANGE"
};
const std::map<int, const char*> _Cmd_ack_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kCmd_ackValues, _kCmd_ackNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kParam_typeValues[] = {
  Param_type::UINT8,
  Param_type::INT8,
  Param_type::UINT16,
  Param_type::INT16,
  Param_type::UINT32,
  Param_type::INT32,
  Param_type::UINT64,
  Param_type::INT64,
  Param_type::REAL32,
  Param_type::REAL64
};
const char* _kParam_typeNames[] = {
  "UINT8",
  "INT8",
  "UINT16",
  "INT16",
  "UINT32",
  "INT32",
  "UINT64",
  "INT64",
  "REAL32",
  "REAL64"
};
const std::map<int, const char*> _Param_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kParam_typeValues, _kParam_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kResultValues[] = {
  Result::ACCEPTED,
  Result::TEMPORARILY_REJECTED,
  Result::DENIED,
  Result::UNSUPPORTED,
  Result::FAILED
};
const char* _kResultNames[] = {
  "ACCEPTED",
  "TEMPORARILY_REJECTED",
  "DENIED",
  "UNSUPPORTED",
  "FAILED"
};
const std::map<int, const char*> _Result_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kResultValues, _kResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMission_resultValues[] = {
  Mission_result::ACCEPTED,
  Mission_result::ERROR,
  Mission_result::UNSUPPORTED_FRAME,
  Mission_result::UNSUPPORTED,
  Mission_result::NO_SPACE,
  Mission_result::INVALID,
  Mission_result::INVALID_PARAM1,
  Mission_result::INVALID_PARAM2,
  Mission_result::INVALID_PARAM3,
  Mission_result::INVALID_PARAM4,
  Mission_result::INVALID_PARAM5_X,
  Mission_result::INVALID_PARAM6_Y,
  Mission_result::INVALID_PARAM7,
  Mission_result::INVALID_SEQUENCE,
  Mission_result::DENIED,
  Mission_result::RESULT_ENUM_END
};
const char* _kMission_resultNames[] = {
  "ACCEPTED",
  "ERROR",
  "UNSUPPORTED_FRAME",
  "UNSUPPORTED",
  "NO_SPACE",
  "INVALID",
  "INVALID_PARAM1",
  "INVALID_PARAM2",
  "INVALID_PARAM3",
  "INVALID_PARAM4",
  "INVALID_PARAM5_X",
  "INVALID_PARAM6_Y",
  "INVALID_PARAM7",
  "INVALID_SEQUENCE",
  "DENIED",
  "RESULT_ENUM_END"
};
const std::map<int, const char*> _Mission_result_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(16, _kMission_resultValues, _kMission_resultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSeverityValues[] = {
  Severity::EMERGENCY,
  Severity::ALERT,
  Severity::CRITICAL,
  Severity::ERROR,
  Severity::WARNING,
  Severity::NOTICE,
  Severity::INFO,
  Severity::DEBUG
};
const char* _kSeverityNames[] = {
  "EMERGENCY",
  "ALERT",
  "CRITICAL",
  "ERROR",
  "WARNING",
  "NOTICE",
  "INFO",
  "DEBUG"
};
const std::map<int, const char*> _Severity_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSeverityValues, _kSeverityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Heartbeat::ascii_fingerprint = "0EFA8CE78DE26206DEE3AD7198927C22";
const uint8_t Heartbeat::binary_fingerprint[16] = {0x0E,0xFA,0x8C,0xE7,0x8D,0xE2,0x62,0x06,0xDE,0xE3,0xAD,0x71,0x98,0x92,0x7C,0x22};

uint32_t Heartbeat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mavtype);
          this->__isset.mavtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->autopilot);
          this->__isset.autopilot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->base_mode);
          this->__isset.base_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->custom_mode);
          this->__isset.custom_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->system_status);
          this->__isset.system_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mavlink_version);
          this->__isset.mavlink_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Heartbeat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Heartbeat");

  xfer += oprot->writeFieldBegin("mavtype", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->mavtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autopilot", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->autopilot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base_mode", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->base_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("custom_mode", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->custom_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("system_status", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->system_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mavlink_version", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->mavlink_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Heartbeat &a, Heartbeat &b) {
  using ::std::swap;
  swap(a.mavtype, b.mavtype);
  swap(a.autopilot, b.autopilot);
  swap(a.base_mode, b.base_mode);
  swap(a.custom_mode, b.custom_mode);
  swap(a.system_status, b.system_status);
  swap(a.mavlink_version, b.mavlink_version);
  swap(a.__isset, b.__isset);
}

const char* SysStatus::ascii_fingerprint = "70ACCDF6992BFABEC03867EB6DEF0D2C";
const uint8_t SysStatus::binary_fingerprint[16] = {0x70,0xAC,0xCD,0xF6,0x99,0x2B,0xFA,0xBE,0xC0,0x38,0x67,0xEB,0x6D,0xEF,0x0D,0x2C};

uint32_t SysStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onboard_control_sensors_present);
          this->__isset.onboard_control_sensors_present = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onboard_control_sensors_enabled);
          this->__isset.onboard_control_sensors_enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onboard_control_sensors_health);
          this->__isset.onboard_control_sensors_health = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->load);
          this->__isset.load = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->voltage_battery);
          this->__isset.voltage_battery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->current_battery);
          this->__isset.current_battery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->battery_remaining);
          this->__isset.battery_remaining = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->drop_rate_comm);
          this->__isset.drop_rate_comm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->errors_comm);
          this->__isset.errors_comm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->errors_count1);
          this->__isset.errors_count1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->errors_count2);
          this->__isset.errors_count2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->errors_count3);
          this->__isset.errors_count3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->errors_count4);
          this->__isset.errors_count4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SysStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SysStatus");

  xfer += oprot->writeFieldBegin("onboard_control_sensors_present", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->onboard_control_sensors_present);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onboard_control_sensors_enabled", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->onboard_control_sensors_enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onboard_control_sensors_health", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->onboard_control_sensors_health);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("load", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->load);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voltage_battery", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->voltage_battery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_battery", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->current_battery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("battery_remaining", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->battery_remaining);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_rate_comm", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->drop_rate_comm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errors_comm", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->errors_comm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errors_count1", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->errors_count1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errors_count2", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->errors_count2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errors_count3", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->errors_count3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errors_count4", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->errors_count4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SysStatus &a, SysStatus &b) {
  using ::std::swap;
  swap(a.onboard_control_sensors_present, b.onboard_control_sensors_present);
  swap(a.onboard_control_sensors_enabled, b.onboard_control_sensors_enabled);
  swap(a.onboard_control_sensors_health, b.onboard_control_sensors_health);
  swap(a.load, b.load);
  swap(a.voltage_battery, b.voltage_battery);
  swap(a.current_battery, b.current_battery);
  swap(a.battery_remaining, b.battery_remaining);
  swap(a.drop_rate_comm, b.drop_rate_comm);
  swap(a.errors_comm, b.errors_comm);
  swap(a.errors_count1, b.errors_count1);
  swap(a.errors_count2, b.errors_count2);
  swap(a.errors_count3, b.errors_count3);
  swap(a.errors_count4, b.errors_count4);
  swap(a.__isset, b.__isset);
}

const char* SystemTime::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t SystemTime::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t SystemTime::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_unix_usec);
          this->__isset.time_unix_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SystemTime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SystemTime");

  xfer += oprot->writeFieldBegin("time_unix_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_unix_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SystemTime &a, SystemTime &b) {
  using ::std::swap;
  swap(a.time_unix_usec, b.time_unix_usec);
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.__isset, b.__isset);
}

const char* Ping::ascii_fingerprint = "7B716BB2B6AFD2DADAC99C5417812547";
const uint8_t Ping::binary_fingerprint[16] = {0x7B,0x71,0x6B,0xB2,0xB6,0xAF,0xD2,0xDA,0xDA,0xC9,0x9C,0x54,0x17,0x81,0x25,0x47};

uint32_t Ping::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Ping::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Ping");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Ping &a, Ping &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.seq, b.seq);
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.__isset, b.__isset);
}

const char* ChangeOperatorControl::ascii_fingerprint = "056FC51AB3B69C0EDF24812BEF44985C";
const uint8_t ChangeOperatorControl::binary_fingerprint[16] = {0x05,0x6F,0xC5,0x1A,0xB3,0xB6,0x9C,0x0E,0xDF,0x24,0x81,0x2B,0xEF,0x44,0x98,0x5C};

uint32_t ChangeOperatorControl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->control_request);
          this->__isset.control_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->passkey.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->passkey.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->passkey[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.passkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChangeOperatorControl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ChangeOperatorControl");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("control_request", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->control_request);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passkey", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->passkey.size()));
    std::vector<int8_t> ::const_iterator _iter5;
    for (_iter5 = this->passkey.begin(); _iter5 != this->passkey.end(); ++_iter5)
    {
      xfer += oprot->writeByte((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChangeOperatorControl &a, ChangeOperatorControl &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.control_request, b.control_request);
  swap(a.version, b.version);
  swap(a.passkey, b.passkey);
  swap(a.__isset, b.__isset);
}

const char* ChangeOperatorControlAck::ascii_fingerprint = "0A77C25C826CC107FD266A55D263629B";
const uint8_t ChangeOperatorControlAck::binary_fingerprint[16] = {0x0A,0x77,0xC2,0x5C,0x82,0x6C,0xC1,0x07,0xFD,0x26,0x6A,0x55,0xD2,0x63,0x62,0x9B};

uint32_t ChangeOperatorControlAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gcs_system_id);
          this->__isset.gcs_system_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->control_request);
          this->__isset.control_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->ack);
          this->__isset.ack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChangeOperatorControlAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ChangeOperatorControlAck");

  xfer += oprot->writeFieldBegin("gcs_system_id", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->gcs_system_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("control_request", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->control_request);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ack", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->ack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChangeOperatorControlAck &a, ChangeOperatorControlAck &b) {
  using ::std::swap;
  swap(a.gcs_system_id, b.gcs_system_id);
  swap(a.control_request, b.control_request);
  swap(a.ack, b.ack);
  swap(a.__isset, b.__isset);
}

const char* AuthKey::ascii_fingerprint = "1F71178153FA37316E045C21ACA93767";
const uint8_t AuthKey::binary_fingerprint[16] = {0x1F,0x71,0x17,0x81,0x53,0xFA,0x37,0x31,0x6E,0x04,0x5C,0x21,0xAC,0xA9,0x37,0x67};

uint32_t AuthKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->key.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->key.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readByte(this->key[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthKey");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->key.size()));
    std::vector<int8_t> ::const_iterator _iter11;
    for (_iter11 = this->key.begin(); _iter11 != this->key.end(); ++_iter11)
    {
      xfer += oprot->writeByte((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthKey &a, AuthKey &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

const char* SetMode::ascii_fingerprint = "B6124282B924F6CAC4316822D6D840E8";
const uint8_t SetMode::binary_fingerprint[16] = {0xB6,0x12,0x42,0x82,0xB9,0x24,0xF6,0xCA,0xC4,0x31,0x68,0x22,0xD6,0xD8,0x40,0xE8};

uint32_t SetMode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->base_mode);
          this->__isset.base_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->custom_mode);
          this->__isset.custom_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetMode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetMode");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base_mode", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->base_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("custom_mode", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->custom_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetMode &a, SetMode &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.base_mode, b.base_mode);
  swap(a.custom_mode, b.custom_mode);
  swap(a.__isset, b.__isset);
}

const char* ParamRequestRead::ascii_fingerprint = "C8F5A1A506430C6992993DC79F6DFC9B";
const uint8_t ParamRequestRead::binary_fingerprint[16] = {0xC8,0xF5,0xA1,0xA5,0x06,0x43,0x0C,0x69,0x92,0x99,0x3D,0xC7,0x9F,0x6D,0xFC,0x9B};

uint32_t ParamRequestRead::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->param_id.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->param_id.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readByte(this->param_id[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.param_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->param_index);
          this->__isset.param_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParamRequestRead::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ParamRequestRead");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_id", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->param_id.size()));
    std::vector<int8_t> ::const_iterator _iter17;
    for (_iter17 = this->param_id.begin(); _iter17 != this->param_id.end(); ++_iter17)
    {
      xfer += oprot->writeByte((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_index", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->param_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParamRequestRead &a, ParamRequestRead &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.param_id, b.param_id);
  swap(a.param_index, b.param_index);
  swap(a.__isset, b.__isset);
}

const char* ParamRequestList::ascii_fingerprint = "D3B91891CF1F31392E7E70F167226591";
const uint8_t ParamRequestList::binary_fingerprint[16] = {0xD3,0xB9,0x18,0x91,0xCF,0x1F,0x31,0x39,0x2E,0x7E,0x70,0xF1,0x67,0x22,0x65,0x91};

uint32_t ParamRequestList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParamRequestList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ParamRequestList");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParamRequestList &a, ParamRequestList &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.__isset, b.__isset);
}

const char* ParamValue::ascii_fingerprint = "62F3116A9EF68AB3A103AED362199C31";
const uint8_t ParamValue::binary_fingerprint[16] = {0x62,0xF3,0x11,0x6A,0x9E,0xF6,0x8A,0xB3,0xA1,0x03,0xAE,0xD3,0x62,0x19,0x9C,0x31};

uint32_t ParamValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->param_id.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->param_id.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readByte(this->param_id[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.param_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param_value);
          this->__isset.param_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->param_type);
          this->__isset.param_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->param_count);
          this->__isset.param_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->param_index);
          this->__isset.param_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParamValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ParamValue");

  xfer += oprot->writeFieldBegin("param_id", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->param_id.size()));
    std::vector<int8_t> ::const_iterator _iter23;
    for (_iter23 = this->param_id.begin(); _iter23 != this->param_id.end(); ++_iter23)
    {
      xfer += oprot->writeByte((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_value", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->param_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_type", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->param_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_count", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->param_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_index", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->param_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParamValue &a, ParamValue &b) {
  using ::std::swap;
  swap(a.param_id, b.param_id);
  swap(a.param_value, b.param_value);
  swap(a.param_type, b.param_type);
  swap(a.param_count, b.param_count);
  swap(a.param_index, b.param_index);
  swap(a.__isset, b.__isset);
}

const char* ParamSet::ascii_fingerprint = "E9F3952D9A67072DAC86034590550C9D";
const uint8_t ParamSet::binary_fingerprint[16] = {0xE9,0xF3,0x95,0x2D,0x9A,0x67,0x07,0x2D,0xAC,0x86,0x03,0x45,0x90,0x55,0x0C,0x9D};

uint32_t ParamSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->param_id.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->param_id.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readByte(this->param_id[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.param_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param_value);
          this->__isset.param_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->param_type);
          this->__isset.param_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParamSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ParamSet");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_id", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->param_id.size()));
    std::vector<int8_t> ::const_iterator _iter29;
    for (_iter29 = this->param_id.begin(); _iter29 != this->param_id.end(); ++_iter29)
    {
      xfer += oprot->writeByte((*_iter29));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_value", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->param_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_type", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->param_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParamSet &a, ParamSet &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.param_id, b.param_id);
  swap(a.param_value, b.param_value);
  swap(a.param_type, b.param_type);
  swap(a.__isset, b.__isset);
}

const char* GpsRawInt::ascii_fingerprint = "0AC4E3E45DFB1F4FF4AF2BBFDF7F9FA0";
const uint8_t GpsRawInt::binary_fingerprint[16] = {0x0A,0xC4,0xE3,0xE4,0x5D,0xFB,0x1F,0x4F,0xF4,0xAF,0x2B,0xBF,0xDF,0x7F,0x9F,0xA0};

uint32_t GpsRawInt::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->fix_type);
          this->__isset.fix_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lat);
          this->__isset.lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lon);
          this->__isset.lon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alt);
          this->__isset.alt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->eph);
          this->__isset.eph = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->epv);
          this->__isset.epv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vel);
          this->__isset.vel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->cog);
          this->__isset.cog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->satellites_visible);
          this->__isset.satellites_visible = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GpsRawInt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GpsRawInt");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fix_type", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->fix_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lat", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lon", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->lon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alt", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->alt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eph", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->eph);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("epv", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->epv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vel", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->vel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cog", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->cog);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("satellites_visible", ::apache::thrift::protocol::T_BYTE, 10);
  xfer += oprot->writeByte(this->satellites_visible);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GpsRawInt &a, GpsRawInt &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.fix_type, b.fix_type);
  swap(a.lat, b.lat);
  swap(a.lon, b.lon);
  swap(a.alt, b.alt);
  swap(a.eph, b.eph);
  swap(a.epv, b.epv);
  swap(a.vel, b.vel);
  swap(a.cog, b.cog);
  swap(a.satellites_visible, b.satellites_visible);
  swap(a.__isset, b.__isset);
}

const char* GpsStatus::ascii_fingerprint = "2FFFD2FEA4CBC75BFAD62FF43F8E53C3";
const uint8_t GpsStatus::binary_fingerprint[16] = {0x2F,0xFF,0xD2,0xFE,0xA4,0xCB,0xC7,0x5B,0xFA,0xD6,0x2F,0xF4,0x3F,0x8E,0x53,0xC3};

uint32_t GpsStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->satellites_visible);
          this->__isset.satellites_visible = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->satellite_prn.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->satellite_prn.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += iprot->readByte(this->satellite_prn[_i34]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.satellite_prn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->satellite_used.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _etype38;
            xfer += iprot->readListBegin(_etype38, _size35);
            this->satellite_used.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              xfer += iprot->readByte(this->satellite_used[_i39]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.satellite_used = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->satellite_elevation.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->satellite_elevation.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += iprot->readByte(this->satellite_elevation[_i44]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.satellite_elevation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->satellite_azimuth.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            this->satellite_azimuth.resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              xfer += iprot->readByte(this->satellite_azimuth[_i49]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.satellite_azimuth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->satellite_snr.clear();
            uint32_t _size50;
            ::apache::thrift::protocol::TType _etype53;
            xfer += iprot->readListBegin(_etype53, _size50);
            this->satellite_snr.resize(_size50);
            uint32_t _i54;
            for (_i54 = 0; _i54 < _size50; ++_i54)
            {
              xfer += iprot->readByte(this->satellite_snr[_i54]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.satellite_snr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GpsStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GpsStatus");

  xfer += oprot->writeFieldBegin("satellites_visible", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->satellites_visible);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("satellite_prn", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->satellite_prn.size()));
    std::vector<int8_t> ::const_iterator _iter55;
    for (_iter55 = this->satellite_prn.begin(); _iter55 != this->satellite_prn.end(); ++_iter55)
    {
      xfer += oprot->writeByte((*_iter55));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("satellite_used", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->satellite_used.size()));
    std::vector<int8_t> ::const_iterator _iter56;
    for (_iter56 = this->satellite_used.begin(); _iter56 != this->satellite_used.end(); ++_iter56)
    {
      xfer += oprot->writeByte((*_iter56));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("satellite_elevation", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->satellite_elevation.size()));
    std::vector<int8_t> ::const_iterator _iter57;
    for (_iter57 = this->satellite_elevation.begin(); _iter57 != this->satellite_elevation.end(); ++_iter57)
    {
      xfer += oprot->writeByte((*_iter57));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("satellite_azimuth", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->satellite_azimuth.size()));
    std::vector<int8_t> ::const_iterator _iter58;
    for (_iter58 = this->satellite_azimuth.begin(); _iter58 != this->satellite_azimuth.end(); ++_iter58)
    {
      xfer += oprot->writeByte((*_iter58));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("satellite_snr", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->satellite_snr.size()));
    std::vector<int8_t> ::const_iterator _iter59;
    for (_iter59 = this->satellite_snr.begin(); _iter59 != this->satellite_snr.end(); ++_iter59)
    {
      xfer += oprot->writeByte((*_iter59));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GpsStatus &a, GpsStatus &b) {
  using ::std::swap;
  swap(a.satellites_visible, b.satellites_visible);
  swap(a.satellite_prn, b.satellite_prn);
  swap(a.satellite_used, b.satellite_used);
  swap(a.satellite_elevation, b.satellite_elevation);
  swap(a.satellite_azimuth, b.satellite_azimuth);
  swap(a.satellite_snr, b.satellite_snr);
  swap(a.__isset, b.__isset);
}

const char* ScaledImu::ascii_fingerprint = "5DF0B7420E726FB539ACD486B69D4110";
const uint8_t ScaledImu::binary_fingerprint[16] = {0x5D,0xF0,0xB7,0x42,0x0E,0x72,0x6F,0xB5,0x39,0xAC,0xD4,0x86,0xB6,0x9D,0x41,0x10};

uint32_t ScaledImu::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->xacc);
          this->__isset.xacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->yacc);
          this->__isset.yacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zacc);
          this->__isset.zacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->xgyro);
          this->__isset.xgyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ygyro);
          this->__isset.ygyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zgyro);
          this->__isset.zgyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->xmag);
          this->__isset.xmag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ymag);
          this->__isset.ymag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zmag);
          this->__isset.zmag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScaledImu::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ScaledImu");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xacc", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->xacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yacc", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->yacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zacc", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->zacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xgyro", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->xgyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ygyro", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->ygyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zgyro", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->zgyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xmag", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->xmag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ymag", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->ymag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zmag", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->zmag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ScaledImu &a, ScaledImu &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.xacc, b.xacc);
  swap(a.yacc, b.yacc);
  swap(a.zacc, b.zacc);
  swap(a.xgyro, b.xgyro);
  swap(a.ygyro, b.ygyro);
  swap(a.zgyro, b.zgyro);
  swap(a.xmag, b.xmag);
  swap(a.ymag, b.ymag);
  swap(a.zmag, b.zmag);
  swap(a.__isset, b.__isset);
}

const char* RawImu::ascii_fingerprint = "04639A19E5410060C3591D392E953544";
const uint8_t RawImu::binary_fingerprint[16] = {0x04,0x63,0x9A,0x19,0xE5,0x41,0x00,0x60,0xC3,0x59,0x1D,0x39,0x2E,0x95,0x35,0x44};

uint32_t RawImu::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->xacc);
          this->__isset.xacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->yacc);
          this->__isset.yacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zacc);
          this->__isset.zacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->xgyro);
          this->__isset.xgyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ygyro);
          this->__isset.ygyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zgyro);
          this->__isset.zgyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->xmag);
          this->__isset.xmag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ymag);
          this->__isset.ymag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zmag);
          this->__isset.zmag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RawImu::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RawImu");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xacc", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->xacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yacc", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->yacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zacc", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->zacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xgyro", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->xgyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ygyro", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->ygyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zgyro", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->zgyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xmag", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->xmag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ymag", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->ymag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zmag", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->zmag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RawImu &a, RawImu &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.xacc, b.xacc);
  swap(a.yacc, b.yacc);
  swap(a.zacc, b.zacc);
  swap(a.xgyro, b.xgyro);
  swap(a.ygyro, b.ygyro);
  swap(a.zgyro, b.zgyro);
  swap(a.xmag, b.xmag);
  swap(a.ymag, b.ymag);
  swap(a.zmag, b.zmag);
  swap(a.__isset, b.__isset);
}

const char* RawPressure::ascii_fingerprint = "9EF42FB72D252D265813F0D2F51C0D06";
const uint8_t RawPressure::binary_fingerprint[16] = {0x9E,0xF4,0x2F,0xB7,0x2D,0x25,0x2D,0x26,0x58,0x13,0xF0,0xD2,0xF5,0x1C,0x0D,0x06};

uint32_t RawPressure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->press_abs);
          this->__isset.press_abs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->press_diff1);
          this->__isset.press_diff1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->press_diff2);
          this->__isset.press_diff2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->temperature);
          this->__isset.temperature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RawPressure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RawPressure");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("press_abs", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->press_abs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("press_diff1", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->press_diff1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("press_diff2", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->press_diff2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("temperature", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->temperature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RawPressure &a, RawPressure &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.press_abs, b.press_abs);
  swap(a.press_diff1, b.press_diff1);
  swap(a.press_diff2, b.press_diff2);
  swap(a.temperature, b.temperature);
  swap(a.__isset, b.__isset);
}

const char* ScaledPressure::ascii_fingerprint = "6FF044B591DEBDA86FD5D9CF56121E65";
const uint8_t ScaledPressure::binary_fingerprint[16] = {0x6F,0xF0,0x44,0xB5,0x91,0xDE,0xBD,0xA8,0x6F,0xD5,0xD9,0xCF,0x56,0x12,0x1E,0x65};

uint32_t ScaledPressure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->press_abs);
          this->__isset.press_abs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->press_diff);
          this->__isset.press_diff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->temperature);
          this->__isset.temperature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScaledPressure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ScaledPressure");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("press_abs", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->press_abs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("press_diff", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->press_diff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("temperature", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->temperature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ScaledPressure &a, ScaledPressure &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.press_abs, b.press_abs);
  swap(a.press_diff, b.press_diff);
  swap(a.temperature, b.temperature);
  swap(a.__isset, b.__isset);
}

const char* Attitude::ascii_fingerprint = "BCF089261F2F269C2747661248BE94C6";
const uint8_t Attitude::binary_fingerprint[16] = {0xBC,0xF0,0x89,0x26,0x1F,0x2F,0x26,0x9C,0x27,0x47,0x66,0x12,0x48,0xBE,0x94,0xC6};

uint32_t Attitude::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rollspeed);
          this->__isset.rollspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitchspeed);
          this->__isset.pitchspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yawspeed);
          this->__isset.yawspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Attitude::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Attitude");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rollspeed", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->rollspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitchspeed", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->pitchspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yawspeed", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->yawspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Attitude &a, Attitude &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.rollspeed, b.rollspeed);
  swap(a.pitchspeed, b.pitchspeed);
  swap(a.yawspeed, b.yawspeed);
  swap(a.__isset, b.__isset);
}

const char* AttitudeQuaternion::ascii_fingerprint = "EBCBA126BDEA349D28A66E473B272E6E";
const uint8_t AttitudeQuaternion::binary_fingerprint[16] = {0xEB,0xCB,0xA1,0x26,0xBD,0xEA,0x34,0x9D,0x28,0xA6,0x6E,0x47,0x3B,0x27,0x2E,0x6E};

uint32_t AttitudeQuaternion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q1);
          this->__isset.q1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q2);
          this->__isset.q2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q3);
          this->__isset.q3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q4);
          this->__isset.q4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rollspeed);
          this->__isset.rollspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitchspeed);
          this->__isset.pitchspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yawspeed);
          this->__isset.yawspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AttitudeQuaternion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AttitudeQuaternion");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q1", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->q1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q2", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->q2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q3", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->q3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q4", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->q4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rollspeed", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->rollspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitchspeed", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->pitchspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yawspeed", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->yawspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AttitudeQuaternion &a, AttitudeQuaternion &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.q1, b.q1);
  swap(a.q2, b.q2);
  swap(a.q3, b.q3);
  swap(a.q4, b.q4);
  swap(a.rollspeed, b.rollspeed);
  swap(a.pitchspeed, b.pitchspeed);
  swap(a.yawspeed, b.yawspeed);
  swap(a.__isset, b.__isset);
}

const char* LocalPositionNed::ascii_fingerprint = "BCF089261F2F269C2747661248BE94C6";
const uint8_t LocalPositionNed::binary_fingerprint[16] = {0xBC,0xF0,0x89,0x26,0x1F,0x2F,0x26,0x9C,0x27,0x47,0x66,0x12,0x48,0xBE,0x94,0xC6};

uint32_t LocalPositionNed::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vx);
          this->__isset.vx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vy);
          this->__isset.vy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vz);
          this->__isset.vz = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LocalPositionNed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LocalPositionNed");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vx", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->vx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vy", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->vy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vz", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->vz);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LocalPositionNed &a, LocalPositionNed &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.vx, b.vx);
  swap(a.vy, b.vy);
  swap(a.vz, b.vz);
  swap(a.__isset, b.__isset);
}

const char* GlobalPositionInt::ascii_fingerprint = "D5207DC933C21AF5FC5B16DD17854F3F";
const uint8_t GlobalPositionInt::binary_fingerprint[16] = {0xD5,0x20,0x7D,0xC9,0x33,0xC2,0x1A,0xF5,0xFC,0x5B,0x16,0xDD,0x17,0x85,0x4F,0x3F};

uint32_t GlobalPositionInt::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lat);
          this->__isset.lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lon);
          this->__isset.lon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alt);
          this->__isset.alt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->relative_alt);
          this->__isset.relative_alt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vx);
          this->__isset.vx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vy);
          this->__isset.vy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vz);
          this->__isset.vz = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hdg);
          this->__isset.hdg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GlobalPositionInt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GlobalPositionInt");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lat", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lon", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->lon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alt", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->alt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relative_alt", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->relative_alt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vx", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->vx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vy", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->vy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vz", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->vz);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hdg", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->hdg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GlobalPositionInt &a, GlobalPositionInt &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.lat, b.lat);
  swap(a.lon, b.lon);
  swap(a.alt, b.alt);
  swap(a.relative_alt, b.relative_alt);
  swap(a.vx, b.vx);
  swap(a.vy, b.vy);
  swap(a.vz, b.vz);
  swap(a.hdg, b.hdg);
  swap(a.__isset, b.__isset);
}

const char* RcChannelsScaled::ascii_fingerprint = "83D9CC168D71611E4BCE2A973C1B7814";
const uint8_t RcChannelsScaled::binary_fingerprint[16] = {0x83,0xD9,0xCC,0x16,0x8D,0x71,0x61,0x1E,0x4B,0xCE,0x2A,0x97,0x3C,0x1B,0x78,0x14};

uint32_t RcChannelsScaled::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan1_scaled);
          this->__isset.chan1_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan2_scaled);
          this->__isset.chan2_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan3_scaled);
          this->__isset.chan3_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan4_scaled);
          this->__isset.chan4_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan5_scaled);
          this->__isset.chan5_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan6_scaled);
          this->__isset.chan6_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan7_scaled);
          this->__isset.chan7_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan8_scaled);
          this->__isset.chan8_scaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->rssi);
          this->__isset.rssi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RcChannelsScaled::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RcChannelsScaled");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan1_scaled", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->chan1_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan2_scaled", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->chan2_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan3_scaled", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->chan3_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan4_scaled", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->chan4_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan5_scaled", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->chan5_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan6_scaled", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->chan6_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan7_scaled", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->chan7_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan8_scaled", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->chan8_scaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rssi", ::apache::thrift::protocol::T_BYTE, 11);
  xfer += oprot->writeByte(this->rssi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RcChannelsScaled &a, RcChannelsScaled &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.port, b.port);
  swap(a.chan1_scaled, b.chan1_scaled);
  swap(a.chan2_scaled, b.chan2_scaled);
  swap(a.chan3_scaled, b.chan3_scaled);
  swap(a.chan4_scaled, b.chan4_scaled);
  swap(a.chan5_scaled, b.chan5_scaled);
  swap(a.chan6_scaled, b.chan6_scaled);
  swap(a.chan7_scaled, b.chan7_scaled);
  swap(a.chan8_scaled, b.chan8_scaled);
  swap(a.rssi, b.rssi);
  swap(a.__isset, b.__isset);
}

const char* RcChannelsRaw::ascii_fingerprint = "83D9CC168D71611E4BCE2A973C1B7814";
const uint8_t RcChannelsRaw::binary_fingerprint[16] = {0x83,0xD9,0xCC,0x16,0x8D,0x71,0x61,0x1E,0x4B,0xCE,0x2A,0x97,0x3C,0x1B,0x78,0x14};

uint32_t RcChannelsRaw::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan1_raw);
          this->__isset.chan1_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan2_raw);
          this->__isset.chan2_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan3_raw);
          this->__isset.chan3_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan4_raw);
          this->__isset.chan4_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan5_raw);
          this->__isset.chan5_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan6_raw);
          this->__isset.chan6_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan7_raw);
          this->__isset.chan7_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan8_raw);
          this->__isset.chan8_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->rssi);
          this->__isset.rssi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RcChannelsRaw::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RcChannelsRaw");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan1_raw", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->chan1_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan2_raw", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->chan2_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan3_raw", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->chan3_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan4_raw", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->chan4_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan5_raw", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->chan5_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan6_raw", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->chan6_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan7_raw", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->chan7_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan8_raw", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->chan8_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rssi", ::apache::thrift::protocol::T_BYTE, 11);
  xfer += oprot->writeByte(this->rssi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RcChannelsRaw &a, RcChannelsRaw &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.port, b.port);
  swap(a.chan1_raw, b.chan1_raw);
  swap(a.chan2_raw, b.chan2_raw);
  swap(a.chan3_raw, b.chan3_raw);
  swap(a.chan4_raw, b.chan4_raw);
  swap(a.chan5_raw, b.chan5_raw);
  swap(a.chan6_raw, b.chan6_raw);
  swap(a.chan7_raw, b.chan7_raw);
  swap(a.chan8_raw, b.chan8_raw);
  swap(a.rssi, b.rssi);
  swap(a.__isset, b.__isset);
}

const char* ServoOutputRaw::ascii_fingerprint = "BEE20D18A1C00484F723E4EA5410BE99";
const uint8_t ServoOutputRaw::binary_fingerprint[16] = {0xBE,0xE2,0x0D,0x18,0xA1,0xC0,0x04,0x84,0xF7,0x23,0xE4,0xEA,0x54,0x10,0xBE,0x99};

uint32_t ServoOutputRaw::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo1_raw);
          this->__isset.servo1_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo2_raw);
          this->__isset.servo2_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo3_raw);
          this->__isset.servo3_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo4_raw);
          this->__isset.servo4_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo5_raw);
          this->__isset.servo5_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo6_raw);
          this->__isset.servo6_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo7_raw);
          this->__isset.servo7_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->servo8_raw);
          this->__isset.servo8_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServoOutputRaw::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServoOutputRaw");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo1_raw", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->servo1_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo2_raw", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->servo2_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo3_raw", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->servo3_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo4_raw", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->servo4_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo5_raw", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->servo5_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo6_raw", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->servo6_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo7_raw", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->servo7_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servo8_raw", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->servo8_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServoOutputRaw &a, ServoOutputRaw &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.port, b.port);
  swap(a.servo1_raw, b.servo1_raw);
  swap(a.servo2_raw, b.servo2_raw);
  swap(a.servo3_raw, b.servo3_raw);
  swap(a.servo4_raw, b.servo4_raw);
  swap(a.servo5_raw, b.servo5_raw);
  swap(a.servo6_raw, b.servo6_raw);
  swap(a.servo7_raw, b.servo7_raw);
  swap(a.servo8_raw, b.servo8_raw);
  swap(a.__isset, b.__isset);
}

const char* MissionRequestPartialList::ascii_fingerprint = "C96E80C010B7BE2664803F7467E4E767";
const uint8_t MissionRequestPartialList::binary_fingerprint[16] = {0xC9,0x6E,0x80,0xC0,0x10,0xB7,0xBE,0x26,0x64,0x80,0x3F,0x74,0x67,0xE4,0xE7,0x67};

uint32_t MissionRequestPartialList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->start_index);
          this->__isset.start_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->end_index);
          this->__isset.end_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionRequestPartialList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionRequestPartialList");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_index", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->start_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_index", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->end_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionRequestPartialList &a, MissionRequestPartialList &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.start_index, b.start_index);
  swap(a.end_index, b.end_index);
  swap(a.__isset, b.__isset);
}

const char* MissionWritePartialList::ascii_fingerprint = "C96E80C010B7BE2664803F7467E4E767";
const uint8_t MissionWritePartialList::binary_fingerprint[16] = {0xC9,0x6E,0x80,0xC0,0x10,0xB7,0xBE,0x26,0x64,0x80,0x3F,0x74,0x67,0xE4,0xE7,0x67};

uint32_t MissionWritePartialList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->start_index);
          this->__isset.start_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->end_index);
          this->__isset.end_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionWritePartialList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionWritePartialList");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_index", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->start_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_index", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->end_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionWritePartialList &a, MissionWritePartialList &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.start_index, b.start_index);
  swap(a.end_index, b.end_index);
  swap(a.__isset, b.__isset);
}

const char* MissionItem::ascii_fingerprint = "3A612DEE4A6E484EE7E38CC061C48337";
const uint8_t MissionItem::binary_fingerprint[16] = {0x3A,0x61,0x2D,0xEE,0x4A,0x6E,0x48,0x4E,0xE7,0xE3,0x8C,0xC0,0x61,0xC4,0x83,0x37};

uint32_t MissionItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->frame);
          this->__isset.frame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->command);
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->current);
          this->__isset.current = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->autocontinue);
          this->__isset.autocontinue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param1);
          this->__isset.param1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param2);
          this->__isset.param2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param3);
          this->__isset.param3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param4);
          this->__isset.param4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionItem");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("frame", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->frame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->current);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autocontinue", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->autocontinue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param1", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->param1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param2", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->param2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param3", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->param3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param4", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->param4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionItem &a, MissionItem &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.seq, b.seq);
  swap(a.frame, b.frame);
  swap(a.command, b.command);
  swap(a.current, b.current);
  swap(a.autocontinue, b.autocontinue);
  swap(a.param1, b.param1);
  swap(a.param2, b.param2);
  swap(a.param3, b.param3);
  swap(a.param4, b.param4);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

const char* MissionRequest::ascii_fingerprint = "0ADFD9F821347143D588B15689D01279";
const uint8_t MissionRequest::binary_fingerprint[16] = {0x0A,0xDF,0xD9,0xF8,0x21,0x34,0x71,0x43,0xD5,0x88,0xB1,0x56,0x89,0xD0,0x12,0x79};

uint32_t MissionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionRequest");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionRequest &a, MissionRequest &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.seq, b.seq);
  swap(a.__isset, b.__isset);
}

const char* MissionSetCurrent::ascii_fingerprint = "0ADFD9F821347143D588B15689D01279";
const uint8_t MissionSetCurrent::binary_fingerprint[16] = {0x0A,0xDF,0xD9,0xF8,0x21,0x34,0x71,0x43,0xD5,0x88,0xB1,0x56,0x89,0xD0,0x12,0x79};

uint32_t MissionSetCurrent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionSetCurrent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionSetCurrent");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionSetCurrent &a, MissionSetCurrent &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.seq, b.seq);
  swap(a.__isset, b.__isset);
}

const char* MissionCurrent::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t MissionCurrent::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t MissionCurrent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionCurrent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionCurrent");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionCurrent &a, MissionCurrent &b) {
  using ::std::swap;
  swap(a.seq, b.seq);
  swap(a.__isset, b.__isset);
}

const char* MissionRequestList::ascii_fingerprint = "D3B91891CF1F31392E7E70F167226591";
const uint8_t MissionRequestList::binary_fingerprint[16] = {0xD3,0xB9,0x18,0x91,0xCF,0x1F,0x31,0x39,0x2E,0x7E,0x70,0xF1,0x67,0x22,0x65,0x91};

uint32_t MissionRequestList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionRequestList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionRequestList");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionRequestList &a, MissionRequestList &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.__isset, b.__isset);
}

const char* MissionCount::ascii_fingerprint = "0ADFD9F821347143D588B15689D01279";
const uint8_t MissionCount::binary_fingerprint[16] = {0x0A,0xDF,0xD9,0xF8,0x21,0x34,0x71,0x43,0xD5,0x88,0xB1,0x56,0x89,0xD0,0x12,0x79};

uint32_t MissionCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionCount");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionCount &a, MissionCount &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

const char* MissionClearAll::ascii_fingerprint = "D3B91891CF1F31392E7E70F167226591";
const uint8_t MissionClearAll::binary_fingerprint[16] = {0xD3,0xB9,0x18,0x91,0xCF,0x1F,0x31,0x39,0x2E,0x7E,0x70,0xF1,0x67,0x22,0x65,0x91};

uint32_t MissionClearAll::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionClearAll::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionClearAll");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionClearAll &a, MissionClearAll &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.__isset, b.__isset);
}

const char* MissionItemReached::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t MissionItemReached::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t MissionItemReached::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionItemReached::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionItemReached");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionItemReached &a, MissionItemReached &b) {
  using ::std::swap;
  swap(a.seq, b.seq);
  swap(a.__isset, b.__isset);
}

const char* MissionAck::ascii_fingerprint = "0A77C25C826CC107FD266A55D263629B";
const uint8_t MissionAck::binary_fingerprint[16] = {0x0A,0x77,0xC2,0x5C,0x82,0x6C,0xC1,0x07,0xFD,0x26,0x6A,0x55,0xD2,0x63,0x62,0x9B};

uint32_t MissionAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mission_ack_type);
          this->__isset.mission_ack_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MissionAck");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mission_ack_type", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->mission_ack_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MissionAck &a, MissionAck &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.mission_ack_type, b.mission_ack_type);
  swap(a.__isset, b.__isset);
}

const char* SetGpsGlobalOrigin::ascii_fingerprint = "88A5B4E5163BAD6268A818F033B05B0A";
const uint8_t SetGpsGlobalOrigin::binary_fingerprint[16] = {0x88,0xA5,0xB4,0xE5,0x16,0x3B,0xAD,0x62,0x68,0xA8,0x18,0xF0,0x33,0xB0,0x5B,0x0A};

uint32_t SetGpsGlobalOrigin::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetGpsGlobalOrigin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetGpsGlobalOrigin");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetGpsGlobalOrigin &a, SetGpsGlobalOrigin &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.altitude, b.altitude);
  swap(a.__isset, b.__isset);
}

const char* GpsGlobalOrigin::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t GpsGlobalOrigin::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t GpsGlobalOrigin::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GpsGlobalOrigin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GpsGlobalOrigin");

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GpsGlobalOrigin &a, GpsGlobalOrigin &b) {
  using ::std::swap;
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.altitude, b.altitude);
  swap(a.__isset, b.__isset);
}

const char* SetLocalPositionSetpoint::ascii_fingerprint = "1BC6F9B7D66440F78A873FB30E5A6141";
const uint8_t SetLocalPositionSetpoint::binary_fingerprint[16] = {0x1B,0xC6,0xF9,0xB7,0xD6,0x64,0x40,0xF7,0x8A,0x87,0x3F,0xB3,0x0E,0x5A,0x61,0x41};

uint32_t SetLocalPositionSetpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->coordinate_frame);
          this->__isset.coordinate_frame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetLocalPositionSetpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetLocalPositionSetpoint");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coordinate_frame", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->coordinate_frame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetLocalPositionSetpoint &a, SetLocalPositionSetpoint &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.coordinate_frame, b.coordinate_frame);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* LocalPositionSetpoint::ascii_fingerprint = "ECA02A9087E272883A5567E6237C0F7D";
const uint8_t LocalPositionSetpoint::binary_fingerprint[16] = {0xEC,0xA0,0x2A,0x90,0x87,0xE2,0x72,0x88,0x3A,0x55,0x67,0xE6,0x23,0x7C,0x0F,0x7D};

uint32_t LocalPositionSetpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->coordinate_frame);
          this->__isset.coordinate_frame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LocalPositionSetpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LocalPositionSetpoint");

  xfer += oprot->writeFieldBegin("coordinate_frame", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->coordinate_frame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LocalPositionSetpoint &a, LocalPositionSetpoint &b) {
  using ::std::swap;
  swap(a.coordinate_frame, b.coordinate_frame);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* GlobalPositionSetpointInt::ascii_fingerprint = "6E5537CE9ED8F608456F2B8C07EB67FE";
const uint8_t GlobalPositionSetpointInt::binary_fingerprint[16] = {0x6E,0x55,0x37,0xCE,0x9E,0xD8,0xF6,0x08,0x45,0x6F,0x2B,0x8C,0x07,0xEB,0x67,0xFE};

uint32_t GlobalPositionSetpointInt::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->coordinate_frame);
          this->__isset.coordinate_frame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GlobalPositionSetpointInt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GlobalPositionSetpointInt");

  xfer += oprot->writeFieldBegin("coordinate_frame", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->coordinate_frame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GlobalPositionSetpointInt &a, GlobalPositionSetpointInt &b) {
  using ::std::swap;
  swap(a.coordinate_frame, b.coordinate_frame);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.altitude, b.altitude);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* SetGlobalPositionSetpointInt::ascii_fingerprint = "6E5537CE9ED8F608456F2B8C07EB67FE";
const uint8_t SetGlobalPositionSetpointInt::binary_fingerprint[16] = {0x6E,0x55,0x37,0xCE,0x9E,0xD8,0xF6,0x08,0x45,0x6F,0x2B,0x8C,0x07,0xEB,0x67,0xFE};

uint32_t SetGlobalPositionSetpointInt::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->coordinate_frame);
          this->__isset.coordinate_frame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetGlobalPositionSetpointInt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetGlobalPositionSetpointInt");

  xfer += oprot->writeFieldBegin("coordinate_frame", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->coordinate_frame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetGlobalPositionSetpointInt &a, SetGlobalPositionSetpointInt &b) {
  using ::std::swap;
  swap(a.coordinate_frame, b.coordinate_frame);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.altitude, b.altitude);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* SafetySetAllowedArea::ascii_fingerprint = "51C3D3C7D59E89EC860D802F4BF11D5D";
const uint8_t SafetySetAllowedArea::binary_fingerprint[16] = {0x51,0xC3,0xD3,0xC7,0xD5,0x9E,0x89,0xEC,0x86,0x0D,0x80,0x2F,0x4B,0xF1,0x1D,0x5D};

uint32_t SafetySetAllowedArea::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->frame);
          this->__isset.frame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1x);
          this->__isset.p1x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1y);
          this->__isset.p1y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1z);
          this->__isset.p1z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p2x);
          this->__isset.p2x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p2y);
          this->__isset.p2y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p2z);
          this->__isset.p2z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SafetySetAllowedArea::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SafetySetAllowedArea");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("frame", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->frame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1x", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->p1x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1y", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->p1y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1z", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->p1z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p2x", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->p2x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p2y", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->p2y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p2z", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->p2z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SafetySetAllowedArea &a, SafetySetAllowedArea &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.frame, b.frame);
  swap(a.p1x, b.p1x);
  swap(a.p1y, b.p1y);
  swap(a.p1z, b.p1z);
  swap(a.p2x, b.p2x);
  swap(a.p2y, b.p2y);
  swap(a.p2z, b.p2z);
  swap(a.__isset, b.__isset);
}

const char* SafetyAllowedArea::ascii_fingerprint = "BA7B956FBEA27492A64DE2BB21B3B98A";
const uint8_t SafetyAllowedArea::binary_fingerprint[16] = {0xBA,0x7B,0x95,0x6F,0xBE,0xA2,0x74,0x92,0xA6,0x4D,0xE2,0xBB,0x21,0xB3,0xB9,0x8A};

uint32_t SafetyAllowedArea::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->frame);
          this->__isset.frame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1x);
          this->__isset.p1x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1y);
          this->__isset.p1y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1z);
          this->__isset.p1z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p2x);
          this->__isset.p2x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p2y);
          this->__isset.p2y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p2z);
          this->__isset.p2z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SafetyAllowedArea::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SafetyAllowedArea");

  xfer += oprot->writeFieldBegin("frame", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->frame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->p1x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->p1y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->p1z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p2x", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->p2x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p2y", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->p2y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p2z", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->p2z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SafetyAllowedArea &a, SafetyAllowedArea &b) {
  using ::std::swap;
  swap(a.frame, b.frame);
  swap(a.p1x, b.p1x);
  swap(a.p1y, b.p1y);
  swap(a.p1z, b.p1z);
  swap(a.p2x, b.p2x);
  swap(a.p2y, b.p2y);
  swap(a.p2z, b.p2z);
  swap(a.__isset, b.__isset);
}

const char* SetRollPitchYawThrust::ascii_fingerprint = "913187295B2062A4346BB692A6DAB797";
const uint8_t SetRollPitchYawThrust::binary_fingerprint[16] = {0x91,0x31,0x87,0x29,0x5B,0x20,0x62,0xA4,0x34,0x6B,0xB6,0x92,0xA6,0xDA,0xB7,0x97};

uint32_t SetRollPitchYawThrust::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->thrust);
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetRollPitchYawThrust::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetRollPitchYawThrust");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->thrust);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetRollPitchYawThrust &a, SetRollPitchYawThrust &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.thrust, b.thrust);
  swap(a.__isset, b.__isset);
}

const char* SetRollPitchYawSpeedThrust::ascii_fingerprint = "913187295B2062A4346BB692A6DAB797";
const uint8_t SetRollPitchYawSpeedThrust::binary_fingerprint[16] = {0x91,0x31,0x87,0x29,0x5B,0x20,0x62,0xA4,0x34,0x6B,0xB6,0x92,0xA6,0xDA,0xB7,0x97};

uint32_t SetRollPitchYawSpeedThrust::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll_speed);
          this->__isset.roll_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch_speed);
          this->__isset.pitch_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw_speed);
          this->__isset.yaw_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->thrust);
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetRollPitchYawSpeedThrust::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetRollPitchYawSpeedThrust");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll_speed", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->roll_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch_speed", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->pitch_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw_speed", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->yaw_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->thrust);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetRollPitchYawSpeedThrust &a, SetRollPitchYawSpeedThrust &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.roll_speed, b.roll_speed);
  swap(a.pitch_speed, b.pitch_speed);
  swap(a.yaw_speed, b.yaw_speed);
  swap(a.thrust, b.thrust);
  swap(a.__isset, b.__isset);
}

const char* RollPitchYawThrustSetpoint::ascii_fingerprint = "5472C7414D3514110BC82AEEAA7E60C6";
const uint8_t RollPitchYawThrustSetpoint::binary_fingerprint[16] = {0x54,0x72,0xC7,0x41,0x4D,0x35,0x14,0x11,0x0B,0xC8,0x2A,0xEE,0xAA,0x7E,0x60,0xC6};

uint32_t RollPitchYawThrustSetpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->thrust);
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RollPitchYawThrustSetpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RollPitchYawThrustSetpoint");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->thrust);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RollPitchYawThrustSetpoint &a, RollPitchYawThrustSetpoint &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.thrust, b.thrust);
  swap(a.__isset, b.__isset);
}

const char* RollPitchYawSpeedThrustSetpoint::ascii_fingerprint = "5472C7414D3514110BC82AEEAA7E60C6";
const uint8_t RollPitchYawSpeedThrustSetpoint::binary_fingerprint[16] = {0x54,0x72,0xC7,0x41,0x4D,0x35,0x14,0x11,0x0B,0xC8,0x2A,0xEE,0xAA,0x7E,0x60,0xC6};

uint32_t RollPitchYawSpeedThrustSetpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll_speed);
          this->__isset.roll_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch_speed);
          this->__isset.pitch_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw_speed);
          this->__isset.yaw_speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->thrust);
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RollPitchYawSpeedThrustSetpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RollPitchYawSpeedThrustSetpoint");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll_speed", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->roll_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch_speed", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pitch_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw_speed", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->yaw_speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->thrust);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RollPitchYawSpeedThrustSetpoint &a, RollPitchYawSpeedThrustSetpoint &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.roll_speed, b.roll_speed);
  swap(a.pitch_speed, b.pitch_speed);
  swap(a.yaw_speed, b.yaw_speed);
  swap(a.thrust, b.thrust);
  swap(a.__isset, b.__isset);
}

const char* SetQuadMotorsSetpoint::ascii_fingerprint = "30F7E37580048A7C5EEC5CE27D4BDBDE";
const uint8_t SetQuadMotorsSetpoint::binary_fingerprint[16] = {0x30,0xF7,0xE3,0x75,0x80,0x04,0x8A,0x7C,0x5E,0xEC,0x5C,0xE2,0x7D,0x4B,0xDB,0xDE};

uint32_t SetQuadMotorsSetpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->motor_front_nw);
          this->__isset.motor_front_nw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->motor_right_ne);
          this->__isset.motor_right_ne = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->motor_back_se);
          this->__isset.motor_back_se = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->motor_left_sw);
          this->__isset.motor_left_sw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetQuadMotorsSetpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetQuadMotorsSetpoint");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor_front_nw", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->motor_front_nw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor_right_ne", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->motor_right_ne);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor_back_se", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->motor_back_se);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor_left_sw", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->motor_left_sw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetQuadMotorsSetpoint &a, SetQuadMotorsSetpoint &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.motor_front_nw, b.motor_front_nw);
  swap(a.motor_right_ne, b.motor_right_ne);
  swap(a.motor_back_se, b.motor_back_se);
  swap(a.motor_left_sw, b.motor_left_sw);
  swap(a.__isset, b.__isset);
}

const char* SetQuadSwarmRollPitchYawThrust::ascii_fingerprint = "411B13F49F5E544DEF19517286AC2875";
const uint8_t SetQuadSwarmRollPitchYawThrust::binary_fingerprint[16] = {0x41,0x1B,0x13,0xF4,0x9F,0x5E,0x54,0x4D,0xEF,0x19,0x51,0x72,0x86,0xAC,0x28,0x75};

uint32_t SetQuadSwarmRollPitchYawThrust::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mode);
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->roll.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->roll.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readI16(this->roll[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pitch.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->pitch.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readI16(this->pitch[_i69]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->yaw.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->yaw.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += iprot->readI16(this->yaw[_i74]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrust.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            xfer += iprot->readListBegin(_etype78, _size75);
            this->thrust.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += iprot->readI16(this->thrust[_i79]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetQuadSwarmRollPitchYawThrust::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetQuadSwarmRollPitchYawThrust");

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->roll.size()));
    std::vector<int16_t> ::const_iterator _iter80;
    for (_iter80 = this->roll.begin(); _iter80 != this->roll.end(); ++_iter80)
    {
      xfer += oprot->writeI16((*_iter80));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->pitch.size()));
    std::vector<int16_t> ::const_iterator _iter81;
    for (_iter81 = this->pitch.begin(); _iter81 != this->pitch.end(); ++_iter81)
    {
      xfer += oprot->writeI16((*_iter81));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->yaw.size()));
    std::vector<int16_t> ::const_iterator _iter82;
    for (_iter82 = this->yaw.begin(); _iter82 != this->yaw.end(); ++_iter82)
    {
      xfer += oprot->writeI16((*_iter82));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->thrust.size()));
    std::vector<int16_t> ::const_iterator _iter83;
    for (_iter83 = this->thrust.begin(); _iter83 != this->thrust.end(); ++_iter83)
    {
      xfer += oprot->writeI16((*_iter83));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetQuadSwarmRollPitchYawThrust &a, SetQuadSwarmRollPitchYawThrust &b) {
  using ::std::swap;
  swap(a.group, b.group);
  swap(a.mode, b.mode);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.thrust, b.thrust);
  swap(a.__isset, b.__isset);
}

const char* NavControllerOutput::ascii_fingerprint = "C589C260CB5FB938AA327D8B9751325F";
const uint8_t NavControllerOutput::binary_fingerprint[16] = {0xC5,0x89,0xC2,0x60,0xCB,0x5F,0xB9,0x38,0xAA,0x32,0x7D,0x8B,0x97,0x51,0x32,0x5F};

uint32_t NavControllerOutput::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->nav_roll);
          this->__isset.nav_roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->nav_pitch);
          this->__isset.nav_pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->nav_bearing);
          this->__isset.nav_bearing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->target_bearing);
          this->__isset.target_bearing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->wp_dist);
          this->__isset.wp_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alt_error);
          this->__isset.alt_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aspd_error);
          this->__isset.aspd_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->xtrack_error);
          this->__isset.xtrack_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NavControllerOutput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NavControllerOutput");

  xfer += oprot->writeFieldBegin("nav_roll", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->nav_roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nav_pitch", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->nav_pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nav_bearing", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->nav_bearing);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_bearing", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->target_bearing);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wp_dist", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->wp_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alt_error", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->alt_error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aspd_error", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->aspd_error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xtrack_error", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->xtrack_error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NavControllerOutput &a, NavControllerOutput &b) {
  using ::std::swap;
  swap(a.nav_roll, b.nav_roll);
  swap(a.nav_pitch, b.nav_pitch);
  swap(a.nav_bearing, b.nav_bearing);
  swap(a.target_bearing, b.target_bearing);
  swap(a.wp_dist, b.wp_dist);
  swap(a.alt_error, b.alt_error);
  swap(a.aspd_error, b.aspd_error);
  swap(a.xtrack_error, b.xtrack_error);
  swap(a.__isset, b.__isset);
}

const char* SetQuadSwarmLedRollPitchYawThrust::ascii_fingerprint = "A41D00A87C3F98C728DC2A12351B9E5B";
const uint8_t SetQuadSwarmLedRollPitchYawThrust::binary_fingerprint[16] = {0xA4,0x1D,0x00,0xA8,0x7C,0x3F,0x98,0xC7,0x28,0xDC,0x2A,0x12,0x35,0x1B,0x9E,0x5B};

uint32_t SetQuadSwarmLedRollPitchYawThrust::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mode);
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->led_red.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readListBegin(_etype87, _size84);
            this->led_red.resize(_size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              xfer += iprot->readByte(this->led_red[_i88]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.led_red = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->led_blue.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _etype92;
            xfer += iprot->readListBegin(_etype92, _size89);
            this->led_blue.resize(_size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              xfer += iprot->readByte(this->led_blue[_i93]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.led_blue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->led_green.clear();
            uint32_t _size94;
            ::apache::thrift::protocol::TType _etype97;
            xfer += iprot->readListBegin(_etype97, _size94);
            this->led_green.resize(_size94);
            uint32_t _i98;
            for (_i98 = 0; _i98 < _size94; ++_i98)
            {
              xfer += iprot->readByte(this->led_green[_i98]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.led_green = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->roll.clear();
            uint32_t _size99;
            ::apache::thrift::protocol::TType _etype102;
            xfer += iprot->readListBegin(_etype102, _size99);
            this->roll.resize(_size99);
            uint32_t _i103;
            for (_i103 = 0; _i103 < _size99; ++_i103)
            {
              xfer += iprot->readI16(this->roll[_i103]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pitch.clear();
            uint32_t _size104;
            ::apache::thrift::protocol::TType _etype107;
            xfer += iprot->readListBegin(_etype107, _size104);
            this->pitch.resize(_size104);
            uint32_t _i108;
            for (_i108 = 0; _i108 < _size104; ++_i108)
            {
              xfer += iprot->readI16(this->pitch[_i108]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->yaw.clear();
            uint32_t _size109;
            ::apache::thrift::protocol::TType _etype112;
            xfer += iprot->readListBegin(_etype112, _size109);
            this->yaw.resize(_size109);
            uint32_t _i113;
            for (_i113 = 0; _i113 < _size109; ++_i113)
            {
              xfer += iprot->readI16(this->yaw[_i113]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrust.clear();
            uint32_t _size114;
            ::apache::thrift::protocol::TType _etype117;
            xfer += iprot->readListBegin(_etype117, _size114);
            this->thrust.resize(_size114);
            uint32_t _i118;
            for (_i118 = 0; _i118 < _size114; ++_i118)
            {
              xfer += iprot->readI16(this->thrust[_i118]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetQuadSwarmLedRollPitchYawThrust::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetQuadSwarmLedRollPitchYawThrust");

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("led_red", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->led_red.size()));
    std::vector<int8_t> ::const_iterator _iter119;
    for (_iter119 = this->led_red.begin(); _iter119 != this->led_red.end(); ++_iter119)
    {
      xfer += oprot->writeByte((*_iter119));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("led_blue", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->led_blue.size()));
    std::vector<int8_t> ::const_iterator _iter120;
    for (_iter120 = this->led_blue.begin(); _iter120 != this->led_blue.end(); ++_iter120)
    {
      xfer += oprot->writeByte((*_iter120));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("led_green", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->led_green.size()));
    std::vector<int8_t> ::const_iterator _iter121;
    for (_iter121 = this->led_green.begin(); _iter121 != this->led_green.end(); ++_iter121)
    {
      xfer += oprot->writeByte((*_iter121));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->roll.size()));
    std::vector<int16_t> ::const_iterator _iter122;
    for (_iter122 = this->roll.begin(); _iter122 != this->roll.end(); ++_iter122)
    {
      xfer += oprot->writeI16((*_iter122));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->pitch.size()));
    std::vector<int16_t> ::const_iterator _iter123;
    for (_iter123 = this->pitch.begin(); _iter123 != this->pitch.end(); ++_iter123)
    {
      xfer += oprot->writeI16((*_iter123));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->yaw.size()));
    std::vector<int16_t> ::const_iterator _iter124;
    for (_iter124 = this->yaw.begin(); _iter124 != this->yaw.end(); ++_iter124)
    {
      xfer += oprot->writeI16((*_iter124));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->thrust.size()));
    std::vector<int16_t> ::const_iterator _iter125;
    for (_iter125 = this->thrust.begin(); _iter125 != this->thrust.end(); ++_iter125)
    {
      xfer += oprot->writeI16((*_iter125));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetQuadSwarmLedRollPitchYawThrust &a, SetQuadSwarmLedRollPitchYawThrust &b) {
  using ::std::swap;
  swap(a.group, b.group);
  swap(a.mode, b.mode);
  swap(a.led_red, b.led_red);
  swap(a.led_blue, b.led_blue);
  swap(a.led_green, b.led_green);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.thrust, b.thrust);
  swap(a.__isset, b.__isset);
}

const char* StateCorrection::ascii_fingerprint = "71D8B991AC9207B805F9D84764BB0E68";
const uint8_t StateCorrection::binary_fingerprint[16] = {0x71,0xD8,0xB9,0x91,0xAC,0x92,0x07,0xB8,0x05,0xF9,0xD8,0x47,0x64,0xBB,0x0E,0x68};

uint32_t StateCorrection::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->xErr);
          this->__isset.xErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yErr);
          this->__isset.yErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zErr);
          this->__isset.zErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rollErr);
          this->__isset.rollErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitchErr);
          this->__isset.pitchErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yawErr);
          this->__isset.yawErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vxErr);
          this->__isset.vxErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vyErr);
          this->__isset.vyErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vzErr);
          this->__isset.vzErr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StateCorrection::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StateCorrection");

  xfer += oprot->writeFieldBegin("xErr", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->xErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yErr", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->yErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zErr", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->zErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rollErr", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->rollErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitchErr", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->pitchErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yawErr", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->yawErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vxErr", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->vxErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vyErr", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->vyErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vzErr", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->vzErr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StateCorrection &a, StateCorrection &b) {
  using ::std::swap;
  swap(a.xErr, b.xErr);
  swap(a.yErr, b.yErr);
  swap(a.zErr, b.zErr);
  swap(a.rollErr, b.rollErr);
  swap(a.pitchErr, b.pitchErr);
  swap(a.yawErr, b.yawErr);
  swap(a.vxErr, b.vxErr);
  swap(a.vyErr, b.vyErr);
  swap(a.vzErr, b.vzErr);
  swap(a.__isset, b.__isset);
}

const char* RequestDataStream::ascii_fingerprint = "869A88041B79929E7E093D6667848354";
const uint8_t RequestDataStream::binary_fingerprint[16] = {0x86,0x9A,0x88,0x04,0x1B,0x79,0x92,0x9E,0x7E,0x09,0x3D,0x66,0x67,0x84,0x83,0x54};

uint32_t RequestDataStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->req_stream_id);
          this->__isset.req_stream_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->req_message_rate);
          this->__isset.req_message_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->start_stop);
          this->__isset.start_stop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestDataStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestDataStream");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("req_stream_id", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->req_stream_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("req_message_rate", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->req_message_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_stop", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->start_stop);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestDataStream &a, RequestDataStream &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.req_stream_id, b.req_stream_id);
  swap(a.req_message_rate, b.req_message_rate);
  swap(a.start_stop, b.start_stop);
  swap(a.__isset, b.__isset);
}

const char* DataStream::ascii_fingerprint = "FB1FAB615C84081B2F0752975CCF8746";
const uint8_t DataStream::binary_fingerprint[16] = {0xFB,0x1F,0xAB,0x61,0x5C,0x84,0x08,0x1B,0x2F,0x07,0x52,0x97,0x5C,0xCF,0x87,0x46};

uint32_t DataStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->stream_id);
          this->__isset.stream_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->message_rate);
          this->__isset.message_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->on_off);
          this->__isset.on_off = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DataStream");

  xfer += oprot->writeFieldBegin("stream_id", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->stream_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message_rate", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->message_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("on_off", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->on_off);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DataStream &a, DataStream &b) {
  using ::std::swap;
  swap(a.stream_id, b.stream_id);
  swap(a.message_rate, b.message_rate);
  swap(a.on_off, b.on_off);
  swap(a.__isset, b.__isset);
}

const char* ManualControl::ascii_fingerprint = "F3D80AAEB967643D6C52A6F0AB966EC1";
const uint8_t ManualControl::binary_fingerprint[16] = {0xF3,0xD8,0x0A,0xAE,0xB9,0x67,0x64,0x3D,0x6C,0x52,0xA6,0xF0,0xAB,0x96,0x6E,0xC1};

uint32_t ManualControl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target);
          this->__isset.target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->r);
          this->__isset.r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->buttons);
          this->__isset.buttons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ManualControl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ManualControl");

  xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("r", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buttons", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->buttons);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ManualControl &a, ManualControl &b) {
  using ::std::swap;
  swap(a.target, b.target);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.r, b.r);
  swap(a.buttons, b.buttons);
  swap(a.__isset, b.__isset);
}

const char* RcChannelsOverride::ascii_fingerprint = "1606DA5B326A3045FE4383C796E0C2F7";
const uint8_t RcChannelsOverride::binary_fingerprint[16] = {0x16,0x06,0xDA,0x5B,0x32,0x6A,0x30,0x45,0xFE,0x43,0x83,0xC7,0x96,0xE0,0xC2,0xF7};

uint32_t RcChannelsOverride::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan1_raw);
          this->__isset.chan1_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan2_raw);
          this->__isset.chan2_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan3_raw);
          this->__isset.chan3_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan4_raw);
          this->__isset.chan4_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan5_raw);
          this->__isset.chan5_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan6_raw);
          this->__isset.chan6_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan7_raw);
          this->__isset.chan7_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan8_raw);
          this->__isset.chan8_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RcChannelsOverride::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RcChannelsOverride");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan1_raw", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->chan1_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan2_raw", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->chan2_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan3_raw", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->chan3_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan4_raw", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->chan4_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan5_raw", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->chan5_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan6_raw", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->chan6_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan7_raw", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->chan7_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan8_raw", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->chan8_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RcChannelsOverride &a, RcChannelsOverride &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.chan1_raw, b.chan1_raw);
  swap(a.chan2_raw, b.chan2_raw);
  swap(a.chan3_raw, b.chan3_raw);
  swap(a.chan4_raw, b.chan4_raw);
  swap(a.chan5_raw, b.chan5_raw);
  swap(a.chan6_raw, b.chan6_raw);
  swap(a.chan7_raw, b.chan7_raw);
  swap(a.chan8_raw, b.chan8_raw);
  swap(a.__isset, b.__isset);
}

const char* VfrHud::ascii_fingerprint = "BF1643060821656F87F9C4B6E1F1D385";
const uint8_t VfrHud::binary_fingerprint[16] = {0xBF,0x16,0x43,0x06,0x08,0x21,0x65,0x6F,0x87,0xF9,0xC4,0xB6,0xE1,0xF1,0xD3,0x85};

uint32_t VfrHud::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->airspeed);
          this->__isset.airspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->groundspeed);
          this->__isset.groundspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->heading);
          this->__isset.heading = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->throttle);
          this->__isset.throttle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alt);
          this->__isset.alt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->climb);
          this->__isset.climb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VfrHud::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VfrHud");

  xfer += oprot->writeFieldBegin("airspeed", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->airspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groundspeed", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->groundspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("heading", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->heading);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("throttle", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->throttle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alt", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->alt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("climb", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->climb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VfrHud &a, VfrHud &b) {
  using ::std::swap;
  swap(a.airspeed, b.airspeed);
  swap(a.groundspeed, b.groundspeed);
  swap(a.heading, b.heading);
  swap(a.throttle, b.throttle);
  swap(a.alt, b.alt);
  swap(a.climb, b.climb);
  swap(a.__isset, b.__isset);
}

const char* CommandLong::ascii_fingerprint = "2323F9FCD85C8BE9CA44A17A83443EE4";
const uint8_t CommandLong::binary_fingerprint[16] = {0x23,0x23,0xF9,0xFC,0xD8,0x5C,0x8B,0xE9,0xCA,0x44,0xA1,0x7A,0x83,0x44,0x3E,0xE4};

uint32_t CommandLong::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_component);
          this->__isset.target_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->command);
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->confirmation);
          this->__isset.confirmation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param1);
          this->__isset.param1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param2);
          this->__isset.param2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param3);
          this->__isset.param3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param4);
          this->__isset.param4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param5);
          this->__isset.param5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param6);
          this->__isset.param6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param7);
          this->__isset.param7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommandLong::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommandLong");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target_component", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->target_component);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confirmation", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->confirmation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param1", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->param1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param2", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->param2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param3", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->param3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param4", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->param4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param5", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->param5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param6", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->param6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param7", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->param7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommandLong &a, CommandLong &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.target_component, b.target_component);
  swap(a.command, b.command);
  swap(a.confirmation, b.confirmation);
  swap(a.param1, b.param1);
  swap(a.param2, b.param2);
  swap(a.param3, b.param3);
  swap(a.param4, b.param4);
  swap(a.param5, b.param5);
  swap(a.param6, b.param6);
  swap(a.param7, b.param7);
  swap(a.__isset, b.__isset);
}

const char* CommandAck::ascii_fingerprint = "2F32B8B152B4427223DB9D670291659B";
const uint8_t CommandAck::binary_fingerprint[16] = {0x2F,0x32,0xB8,0xB1,0x52,0xB4,0x42,0x72,0x23,0xDB,0x9D,0x67,0x02,0x91,0x65,0x9B};

uint32_t CommandAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->command);
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommandAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommandAck");

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommandAck &a, CommandAck &b) {
  using ::std::swap;
  swap(a.command, b.command);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

const char* RollPitchYawRatesThrustSetpoint::ascii_fingerprint = "5472C7414D3514110BC82AEEAA7E60C6";
const uint8_t RollPitchYawRatesThrustSetpoint::binary_fingerprint[16] = {0x54,0x72,0xC7,0x41,0x4D,0x35,0x14,0x11,0x0B,0xC8,0x2A,0xEE,0xAA,0x7E,0x60,0xC6};

uint32_t RollPitchYawRatesThrustSetpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll_rate);
          this->__isset.roll_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch_rate);
          this->__isset.pitch_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw_rate);
          this->__isset.yaw_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->thrust);
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RollPitchYawRatesThrustSetpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RollPitchYawRatesThrustSetpoint");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll_rate", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->roll_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch_rate", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pitch_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw_rate", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->yaw_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->thrust);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RollPitchYawRatesThrustSetpoint &a, RollPitchYawRatesThrustSetpoint &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.roll_rate, b.roll_rate);
  swap(a.pitch_rate, b.pitch_rate);
  swap(a.yaw_rate, b.yaw_rate);
  swap(a.thrust, b.thrust);
  swap(a.__isset, b.__isset);
}

const char* ManualSetpoint::ascii_fingerprint = "6F2614A6D9999EC4C27EC924CF9DA8BC";
const uint8_t ManualSetpoint::binary_fingerprint[16] = {0x6F,0x26,0x14,0xA6,0xD9,0x99,0x9E,0xC4,0xC2,0x7E,0xC9,0x24,0xCF,0x9D,0xA8,0xBC};

uint32_t ManualSetpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->thrust);
          this->__isset.thrust = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mode_switch);
          this->__isset.mode_switch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->manual_override_switch);
          this->__isset.manual_override_switch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ManualSetpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ManualSetpoint");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrust", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->thrust);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode_switch", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->mode_switch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("manual_override_switch", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->manual_override_switch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ManualSetpoint &a, ManualSetpoint &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.thrust, b.thrust);
  swap(a.mode_switch, b.mode_switch);
  swap(a.manual_override_switch, b.manual_override_switch);
  swap(a.__isset, b.__isset);
}

const char* LocalPositionNedSystemGlobalOffset::ascii_fingerprint = "BCF089261F2F269C2747661248BE94C6";
const uint8_t LocalPositionNedSystemGlobalOffset::binary_fingerprint[16] = {0xBC,0xF0,0x89,0x26,0x1F,0x2F,0x26,0x9C,0x27,0x47,0x66,0x12,0x48,0xBE,0x94,0xC6};

uint32_t LocalPositionNedSystemGlobalOffset::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LocalPositionNedSystemGlobalOffset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LocalPositionNedSystemGlobalOffset");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LocalPositionNedSystemGlobalOffset &a, LocalPositionNedSystemGlobalOffset &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* HilState::ascii_fingerprint = "CEA05959278AC53F3CEA1F134B333ED4";
const uint8_t HilState::binary_fingerprint[16] = {0xCE,0xA0,0x59,0x59,0x27,0x8A,0xC5,0x3F,0x3C,0xEA,0x1F,0x13,0x4B,0x33,0x3E,0xD4};

uint32_t HilState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rollspeed);
          this->__isset.rollspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitchspeed);
          this->__isset.pitchspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yawspeed);
          this->__isset.yawspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lat);
          this->__isset.lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lon);
          this->__isset.lon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alt);
          this->__isset.alt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vx);
          this->__isset.vx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vy);
          this->__isset.vy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vz);
          this->__isset.vz = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->xacc);
          this->__isset.xacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->yacc);
          this->__isset.yacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->zacc);
          this->__isset.zacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HilState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HilState");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rollspeed", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->rollspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitchspeed", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->pitchspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yawspeed", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->yawspeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lat", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lon", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->lon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alt", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->alt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vx", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->vx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vy", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->vy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vz", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->vz);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xacc", ::apache::thrift::protocol::T_I16, 14);
  xfer += oprot->writeI16(this->xacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yacc", ::apache::thrift::protocol::T_I16, 15);
  xfer += oprot->writeI16(this->yacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zacc", ::apache::thrift::protocol::T_I16, 16);
  xfer += oprot->writeI16(this->zacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HilState &a, HilState &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.rollspeed, b.rollspeed);
  swap(a.pitchspeed, b.pitchspeed);
  swap(a.yawspeed, b.yawspeed);
  swap(a.lat, b.lat);
  swap(a.lon, b.lon);
  swap(a.alt, b.alt);
  swap(a.vx, b.vx);
  swap(a.vy, b.vy);
  swap(a.vz, b.vz);
  swap(a.xacc, b.xacc);
  swap(a.yacc, b.yacc);
  swap(a.zacc, b.zacc);
  swap(a.__isset, b.__isset);
}

const char* HilControls::ascii_fingerprint = "D7457EF27B9A3030D5B2A3FB1D42866A";
const uint8_t HilControls::binary_fingerprint[16] = {0xD7,0x45,0x7E,0xF2,0x7B,0x9A,0x30,0x30,0xD5,0xB2,0xA3,0xFB,0x1D,0x42,0x86,0x6A};

uint32_t HilControls::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll_ailerons);
          this->__isset.roll_ailerons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch_elevator);
          this->__isset.pitch_elevator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw_rudder);
          this->__isset.yaw_rudder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->throttle);
          this->__isset.throttle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aux1);
          this->__isset.aux1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aux2);
          this->__isset.aux2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aux3);
          this->__isset.aux3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aux4);
          this->__isset.aux4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mode);
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->nav_mode);
          this->__isset.nav_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HilControls::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HilControls");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll_ailerons", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->roll_ailerons);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch_elevator", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->pitch_elevator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw_rudder", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->yaw_rudder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("throttle", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->throttle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aux1", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->aux1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aux2", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->aux2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aux3", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->aux3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aux4", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->aux4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_BYTE, 10);
  xfer += oprot->writeByte(this->mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nav_mode", ::apache::thrift::protocol::T_BYTE, 11);
  xfer += oprot->writeByte(this->nav_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HilControls &a, HilControls &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.roll_ailerons, b.roll_ailerons);
  swap(a.pitch_elevator, b.pitch_elevator);
  swap(a.yaw_rudder, b.yaw_rudder);
  swap(a.throttle, b.throttle);
  swap(a.aux1, b.aux1);
  swap(a.aux2, b.aux2);
  swap(a.aux3, b.aux3);
  swap(a.aux4, b.aux4);
  swap(a.mode, b.mode);
  swap(a.nav_mode, b.nav_mode);
  swap(a.__isset, b.__isset);
}

const char* HilRcInputsRaw::ascii_fingerprint = "80FD4DE0AE43F1958475E3D8D253B720";
const uint8_t HilRcInputsRaw::binary_fingerprint[16] = {0x80,0xFD,0x4D,0xE0,0xAE,0x43,0xF1,0x95,0x84,0x75,0xE3,0xD8,0xD2,0x53,0xB7,0x20};

uint32_t HilRcInputsRaw::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan1_raw);
          this->__isset.chan1_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan2_raw);
          this->__isset.chan2_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan3_raw);
          this->__isset.chan3_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan4_raw);
          this->__isset.chan4_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan5_raw);
          this->__isset.chan5_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan6_raw);
          this->__isset.chan6_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan7_raw);
          this->__isset.chan7_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan8_raw);
          this->__isset.chan8_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan9_raw);
          this->__isset.chan9_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan10_raw);
          this->__isset.chan10_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan11_raw);
          this->__isset.chan11_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chan12_raw);
          this->__isset.chan12_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->rssi);
          this->__isset.rssi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HilRcInputsRaw::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HilRcInputsRaw");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan1_raw", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->chan1_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan2_raw", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->chan2_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan3_raw", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->chan3_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan4_raw", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->chan4_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan5_raw", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->chan5_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan6_raw", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->chan6_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan7_raw", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->chan7_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan8_raw", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->chan8_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan9_raw", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->chan9_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan10_raw", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->chan10_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan11_raw", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->chan11_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chan12_raw", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->chan12_raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rssi", ::apache::thrift::protocol::T_BYTE, 14);
  xfer += oprot->writeByte(this->rssi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HilRcInputsRaw &a, HilRcInputsRaw &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.chan1_raw, b.chan1_raw);
  swap(a.chan2_raw, b.chan2_raw);
  swap(a.chan3_raw, b.chan3_raw);
  swap(a.chan4_raw, b.chan4_raw);
  swap(a.chan5_raw, b.chan5_raw);
  swap(a.chan6_raw, b.chan6_raw);
  swap(a.chan7_raw, b.chan7_raw);
  swap(a.chan8_raw, b.chan8_raw);
  swap(a.chan9_raw, b.chan9_raw);
  swap(a.chan10_raw, b.chan10_raw);
  swap(a.chan11_raw, b.chan11_raw);
  swap(a.chan12_raw, b.chan12_raw);
  swap(a.rssi, b.rssi);
  swap(a.__isset, b.__isset);
}

const char* OpticalFlow::ascii_fingerprint = "18FFFFA25516B3097146285E51B0D97E";
const uint8_t OpticalFlow::binary_fingerprint[16] = {0x18,0xFF,0xFF,0xA2,0x55,0x16,0xB3,0x09,0x71,0x46,0x28,0x5E,0x51,0xB0,0xD9,0x7E};

uint32_t OpticalFlow::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sensor_id);
          this->__isset.sensor_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->flow_x);
          this->__isset.flow_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->flow_y);
          this->__isset.flow_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->flow_comp_m_x);
          this->__isset.flow_comp_m_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->flow_comp_m_y);
          this->__isset.flow_comp_m_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->quality);
          this->__isset.quality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ground_distance);
          this->__isset.ground_distance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OpticalFlow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OpticalFlow");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensor_id", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->sensor_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flow_x", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->flow_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flow_y", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->flow_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flow_comp_m_x", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->flow_comp_m_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flow_comp_m_y", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->flow_comp_m_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quality", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->quality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ground_distance", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->ground_distance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OpticalFlow &a, OpticalFlow &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.sensor_id, b.sensor_id);
  swap(a.flow_x, b.flow_x);
  swap(a.flow_y, b.flow_y);
  swap(a.flow_comp_m_x, b.flow_comp_m_x);
  swap(a.flow_comp_m_y, b.flow_comp_m_y);
  swap(a.quality, b.quality);
  swap(a.ground_distance, b.ground_distance);
  swap(a.__isset, b.__isset);
}

const char* GlobalVisionPositionEstimate::ascii_fingerprint = "09E2FBB9B1569ACA80DA61E1963D99CF";
const uint8_t GlobalVisionPositionEstimate::binary_fingerprint[16] = {0x09,0xE2,0xFB,0xB9,0xB1,0x56,0x9A,0xCA,0x80,0xDA,0x61,0xE1,0x96,0x3D,0x99,0xCF};

uint32_t GlobalVisionPositionEstimate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->usec);
          this->__isset.usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GlobalVisionPositionEstimate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GlobalVisionPositionEstimate");

  xfer += oprot->writeFieldBegin("usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GlobalVisionPositionEstimate &a, GlobalVisionPositionEstimate &b) {
  using ::std::swap;
  swap(a.usec, b.usec);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* VisionPositionEstimate::ascii_fingerprint = "09E2FBB9B1569ACA80DA61E1963D99CF";
const uint8_t VisionPositionEstimate::binary_fingerprint[16] = {0x09,0xE2,0xFB,0xB9,0xB1,0x56,0x9A,0xCA,0x80,0xDA,0x61,0xE1,0x96,0x3D,0x99,0xCF};

uint32_t VisionPositionEstimate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->usec);
          this->__isset.usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VisionPositionEstimate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VisionPositionEstimate");

  xfer += oprot->writeFieldBegin("usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VisionPositionEstimate &a, VisionPositionEstimate &b) {
  using ::std::swap;
  swap(a.usec, b.usec);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* VisionSpeedEstimate::ascii_fingerprint = "3BC5E6ABCC6C77829F8D2E02BF3E7711";
const uint8_t VisionSpeedEstimate::binary_fingerprint[16] = {0x3B,0xC5,0xE6,0xAB,0xCC,0x6C,0x77,0x82,0x9F,0x8D,0x2E,0x02,0xBF,0x3E,0x77,0x11};

uint32_t VisionSpeedEstimate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->usec);
          this->__isset.usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VisionSpeedEstimate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VisionSpeedEstimate");

  xfer += oprot->writeFieldBegin("usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VisionSpeedEstimate &a, VisionSpeedEstimate &b) {
  using ::std::swap;
  swap(a.usec, b.usec);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

const char* ViconPositionEstimate::ascii_fingerprint = "09E2FBB9B1569ACA80DA61E1963D99CF";
const uint8_t ViconPositionEstimate::binary_fingerprint[16] = {0x09,0xE2,0xFB,0xB9,0xB1,0x56,0x9A,0xCA,0x80,0xDA,0x61,0xE1,0x96,0x3D,0x99,0xCF};

uint32_t ViconPositionEstimate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->usec);
          this->__isset.usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ViconPositionEstimate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ViconPositionEstimate");

  xfer += oprot->writeFieldBegin("usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ViconPositionEstimate &a, ViconPositionEstimate &b) {
  using ::std::swap;
  swap(a.usec, b.usec);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

const char* HighresImu::ascii_fingerprint = "47E47037DB75031BE89DC8DCA26DB5E0";
const uint8_t HighresImu::binary_fingerprint[16] = {0x47,0xE4,0x70,0x37,0xDB,0x75,0x03,0x1B,0xE8,0x9D,0xC8,0xDC,0xA2,0x6D,0xB5,0xE0};

uint32_t HighresImu::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->xacc);
          this->__isset.xacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yacc);
          this->__isset.yacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zacc);
          this->__isset.zacc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->xgyro);
          this->__isset.xgyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ygyro);
          this->__isset.ygyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zgyro);
          this->__isset.zgyro = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->xmag);
          this->__isset.xmag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ymag);
          this->__isset.ymag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zmag);
          this->__isset.zmag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->abs_pressure);
          this->__isset.abs_pressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->diff_pressure);
          this->__isset.diff_pressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pressure_alt);
          this->__isset.pressure_alt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->temperature);
          this->__isset.temperature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->fields_updated);
          this->__isset.fields_updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HighresImu::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HighresImu");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xacc", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->xacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yacc", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->yacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zacc", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->zacc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xgyro", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->xgyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ygyro", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->ygyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zgyro", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->zgyro);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xmag", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->xmag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ymag", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->ymag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zmag", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->zmag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("abs_pressure", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->abs_pressure);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("diff_pressure", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->diff_pressure);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pressure_alt", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->pressure_alt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("temperature", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->temperature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields_updated", ::apache::thrift::protocol::T_I16, 15);
  xfer += oprot->writeI16(this->fields_updated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HighresImu &a, HighresImu &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.xacc, b.xacc);
  swap(a.yacc, b.yacc);
  swap(a.zacc, b.zacc);
  swap(a.xgyro, b.xgyro);
  swap(a.ygyro, b.ygyro);
  swap(a.zgyro, b.zgyro);
  swap(a.xmag, b.xmag);
  swap(a.ymag, b.ymag);
  swap(a.zmag, b.zmag);
  swap(a.abs_pressure, b.abs_pressure);
  swap(a.diff_pressure, b.diff_pressure);
  swap(a.pressure_alt, b.pressure_alt);
  swap(a.temperature, b.temperature);
  swap(a.fields_updated, b.fields_updated);
  swap(a.__isset, b.__isset);
}

const char* OmnidirectionalFlow::ascii_fingerprint = "7FDB4FC72528BD2930DB8A0FA316DF8F";
const uint8_t OmnidirectionalFlow::binary_fingerprint[16] = {0x7F,0xDB,0x4F,0xC7,0x25,0x28,0xBD,0x29,0x30,0xDB,0x8A,0x0F,0xA3,0x16,0xDF,0x8F};

uint32_t OmnidirectionalFlow::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sensor_id);
          this->__isset.sensor_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->left.clear();
            uint32_t _size126;
            ::apache::thrift::protocol::TType _etype129;
            xfer += iprot->readListBegin(_etype129, _size126);
            this->left.resize(_size126);
            uint32_t _i130;
            for (_i130 = 0; _i130 < _size126; ++_i130)
            {
              xfer += iprot->readI16(this->left[_i130]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->right.clear();
            uint32_t _size131;
            ::apache::thrift::protocol::TType _etype134;
            xfer += iprot->readListBegin(_etype134, _size131);
            this->right.resize(_size131);
            uint32_t _i135;
            for (_i135 = 0; _i135 < _size131; ++_i135)
            {
              xfer += iprot->readI16(this->right[_i135]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->quality);
          this->__isset.quality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->front_distance_m);
          this->__isset.front_distance_m = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OmnidirectionalFlow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OmnidirectionalFlow");

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensor_id", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->sensor_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->left.size()));
    std::vector<int16_t> ::const_iterator _iter136;
    for (_iter136 = this->left.begin(); _iter136 != this->left.end(); ++_iter136)
    {
      xfer += oprot->writeI16((*_iter136));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->right.size()));
    std::vector<int16_t> ::const_iterator _iter137;
    for (_iter137 = this->right.begin(); _iter137 != this->right.end(); ++_iter137)
    {
      xfer += oprot->writeI16((*_iter137));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quality", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->quality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("front_distance_m", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->front_distance_m);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OmnidirectionalFlow &a, OmnidirectionalFlow &b) {
  using ::std::swap;
  swap(a.time_usec, b.time_usec);
  swap(a.sensor_id, b.sensor_id);
  swap(a.left, b.left);
  swap(a.right, b.right);
  swap(a.quality, b.quality);
  swap(a.front_distance_m, b.front_distance_m);
  swap(a.__isset, b.__isset);
}

const char* FileTransferStart::ascii_fingerprint = "6D9B3457F71F3ABC21CA92B1AC8C5B21";
const uint8_t FileTransferStart::binary_fingerprint[16] = {0x6D,0x9B,0x34,0x57,0xF7,0x1F,0x3A,0xBC,0x21,0xCA,0x92,0xB1,0xAC,0x8C,0x5B,0x21};

uint32_t FileTransferStart::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transfer_uid);
          this->__isset.transfer_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dest_path.clear();
            uint32_t _size138;
            ::apache::thrift::protocol::TType _etype141;
            xfer += iprot->readListBegin(_etype141, _size138);
            this->dest_path.resize(_size138);
            uint32_t _i142;
            for (_i142 = 0; _i142 < _size138; ++_i142)
            {
              xfer += iprot->readByte(this->dest_path[_i142]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dest_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->direction);
          this->__isset.direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->file_size);
          this->__isset.file_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileTransferStart::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FileTransferStart");

  xfer += oprot->writeFieldBegin("transfer_uid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->transfer_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_path", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->dest_path.size()));
    std::vector<int8_t> ::const_iterator _iter143;
    for (_iter143 = this->dest_path.begin(); _iter143 != this->dest_path.end(); ++_iter143)
    {
      xfer += oprot->writeByte((*_iter143));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("direction", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->file_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileTransferStart &a, FileTransferStart &b) {
  using ::std::swap;
  swap(a.transfer_uid, b.transfer_uid);
  swap(a.dest_path, b.dest_path);
  swap(a.direction, b.direction);
  swap(a.file_size, b.file_size);
  swap(a.flags, b.flags);
  swap(a.__isset, b.__isset);
}

const char* FileTransferDirList::ascii_fingerprint = "1CA74480F3BF0DBB8DEC7F301A4DEEC6";
const uint8_t FileTransferDirList::binary_fingerprint[16] = {0x1C,0xA7,0x44,0x80,0xF3,0xBF,0x0D,0xBB,0x8D,0xEC,0x7F,0x30,0x1A,0x4D,0xEE,0xC6};

uint32_t FileTransferDirList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transfer_uid);
          this->__isset.transfer_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dir_path.clear();
            uint32_t _size144;
            ::apache::thrift::protocol::TType _etype147;
            xfer += iprot->readListBegin(_etype147, _size144);
            this->dir_path.resize(_size144);
            uint32_t _i148;
            for (_i148 = 0; _i148 < _size144; ++_i148)
            {
              xfer += iprot->readByte(this->dir_path[_i148]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dir_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileTransferDirList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FileTransferDirList");

  xfer += oprot->writeFieldBegin("transfer_uid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->transfer_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_path", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->dir_path.size()));
    std::vector<int8_t> ::const_iterator _iter149;
    for (_iter149 = this->dir_path.begin(); _iter149 != this->dir_path.end(); ++_iter149)
    {
      xfer += oprot->writeByte((*_iter149));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileTransferDirList &a, FileTransferDirList &b) {
  using ::std::swap;
  swap(a.transfer_uid, b.transfer_uid);
  swap(a.dir_path, b.dir_path);
  swap(a.flags, b.flags);
  swap(a.__isset, b.__isset);
}

const char* FileTransferRes::ascii_fingerprint = "DDB540D232DEE4BB76F25D4DAA0FC261";
const uint8_t FileTransferRes::binary_fingerprint[16] = {0xDD,0xB5,0x40,0xD2,0x32,0xDE,0xE4,0xBB,0x76,0xF2,0x5D,0x4D,0xAA,0x0F,0xC2,0x61};

uint32_t FileTransferRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transfer_uid);
          this->__isset.transfer_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileTransferRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FileTransferRes");

  xfer += oprot->writeFieldBegin("transfer_uid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->transfer_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileTransferRes &a, FileTransferRes &b) {
  using ::std::swap;
  swap(a.transfer_uid, b.transfer_uid);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

const char* BatteryStatus::ascii_fingerprint = "9B102BE97B8697BBFB8F545593B49836";
const uint8_t BatteryStatus::binary_fingerprint[16] = {0x9B,0x10,0x2B,0xE9,0x7B,0x86,0x97,0xBB,0xFB,0x8F,0x54,0x55,0x93,0xB4,0x98,0x36};

uint32_t BatteryStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->accu_id);
          this->__isset.accu_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->voltage_cell_1);
          this->__isset.voltage_cell_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->voltage_cell_2);
          this->__isset.voltage_cell_2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->voltage_cell_3);
          this->__isset.voltage_cell_3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->voltage_cell_4);
          this->__isset.voltage_cell_4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->voltage_cell_5);
          this->__isset.voltage_cell_5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->voltage_cell_6);
          this->__isset.voltage_cell_6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->current_battery);
          this->__isset.current_battery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->battery_remaining);
          this->__isset.battery_remaining = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatteryStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BatteryStatus");

  xfer += oprot->writeFieldBegin("accu_id", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->accu_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voltage_cell_1", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->voltage_cell_1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voltage_cell_2", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->voltage_cell_2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voltage_cell_3", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->voltage_cell_3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voltage_cell_4", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->voltage_cell_4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voltage_cell_5", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->voltage_cell_5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voltage_cell_6", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->voltage_cell_6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_battery", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->current_battery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("battery_remaining", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->battery_remaining);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BatteryStatus &a, BatteryStatus &b) {
  using ::std::swap;
  swap(a.accu_id, b.accu_id);
  swap(a.voltage_cell_1, b.voltage_cell_1);
  swap(a.voltage_cell_2, b.voltage_cell_2);
  swap(a.voltage_cell_3, b.voltage_cell_3);
  swap(a.voltage_cell_4, b.voltage_cell_4);
  swap(a.voltage_cell_5, b.voltage_cell_5);
  swap(a.voltage_cell_6, b.voltage_cell_6);
  swap(a.current_battery, b.current_battery);
  swap(a.battery_remaining, b.battery_remaining);
  swap(a.__isset, b.__isset);
}

const char* Setpoint8dof::ascii_fingerprint = "FCE03E723E278A0326670327766854BB";
const uint8_t Setpoint8dof::binary_fingerprint[16] = {0xFC,0xE0,0x3E,0x72,0x3E,0x27,0x8A,0x03,0x26,0x67,0x03,0x27,0x76,0x68,0x54,0xBB};

uint32_t Setpoint8dof::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val1);
          this->__isset.val1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val2);
          this->__isset.val2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val3);
          this->__isset.val3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val4);
          this->__isset.val4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val5);
          this->__isset.val5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val6);
          this->__isset.val6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val7);
          this->__isset.val7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val8);
          this->__isset.val8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Setpoint8dof::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Setpoint8dof");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val1", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->val1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val2", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->val2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val3", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->val3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val4", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->val4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val5", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->val5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val6", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->val6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val7", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->val7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val8", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->val8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Setpoint8dof &a, Setpoint8dof &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.val1, b.val1);
  swap(a.val2, b.val2);
  swap(a.val3, b.val3);
  swap(a.val4, b.val4);
  swap(a.val5, b.val5);
  swap(a.val6, b.val6);
  swap(a.val7, b.val7);
  swap(a.val8, b.val8);
  swap(a.__isset, b.__isset);
}

const char* Setpoint6dof::ascii_fingerprint = "BA7B956FBEA27492A64DE2BB21B3B98A";
const uint8_t Setpoint6dof::binary_fingerprint[16] = {0xBA,0x7B,0x95,0x6F,0xBE,0xA2,0x74,0x92,0xA6,0x4D,0xE2,0xBB,0x21,0xB3,0xB9,0x8A};

uint32_t Setpoint6dof::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->target_system);
          this->__isset.target_system = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->trans_x);
          this->__isset.trans_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->trans_y);
          this->__isset.trans_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->trans_z);
          this->__isset.trans_z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rot_x);
          this->__isset.rot_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rot_y);
          this->__isset.rot_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rot_z);
          this->__isset.rot_z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Setpoint6dof::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Setpoint6dof");

  xfer += oprot->writeFieldBegin("target_system", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->target_system);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trans_x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->trans_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trans_y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->trans_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trans_z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->trans_z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rot_x", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->rot_x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rot_y", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->rot_y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rot_z", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->rot_z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Setpoint6dof &a, Setpoint6dof &b) {
  using ::std::swap;
  swap(a.target_system, b.target_system);
  swap(a.trans_x, b.trans_x);
  swap(a.trans_y, b.trans_y);
  swap(a.trans_z, b.trans_z);
  swap(a.rot_x, b.rot_x);
  swap(a.rot_y, b.rot_y);
  swap(a.rot_z, b.rot_z);
  swap(a.__isset, b.__isset);
}

const char* MemoryVect::ascii_fingerprint = "AE3301A5C869546BB16905483C90D848";
const uint8_t MemoryVect::binary_fingerprint[16] = {0xAE,0x33,0x01,0xA5,0xC8,0x69,0x54,0x6B,0xB1,0x69,0x05,0x48,0x3C,0x90,0xD8,0x48};

uint32_t MemoryVect::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->ver);
          this->__isset.ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->memory_vect_type);
          this->__isset.memory_vect_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value.clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _etype153;
            xfer += iprot->readListBegin(_etype153, _size150);
            this->value.resize(_size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              xfer += iprot->readByte(this->value[_i154]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MemoryVect::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MemoryVect");

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ver", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->ver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory_vect_type", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->memory_vect_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->value.size()));
    std::vector<int8_t> ::const_iterator _iter155;
    for (_iter155 = this->value.begin(); _iter155 != this->value.end(); ++_iter155)
    {
      xfer += oprot->writeByte((*_iter155));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MemoryVect &a, MemoryVect &b) {
  using ::std::swap;
  swap(a.address, b.address);
  swap(a.ver, b.ver);
  swap(a.memory_vect_type, b.memory_vect_type);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* DebugVect::ascii_fingerprint = "4DD2782FD63B07D8E4023A808605C19C";
const uint8_t DebugVect::binary_fingerprint[16] = {0x4D,0xD2,0x78,0x2F,0xD6,0x3B,0x07,0xD8,0xE4,0x02,0x3A,0x80,0x86,0x05,0xC1,0x9C};

uint32_t DebugVect::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size156;
            ::apache::thrift::protocol::TType _etype159;
            xfer += iprot->readListBegin(_etype159, _size156);
            this->name.resize(_size156);
            uint32_t _i160;
            for (_i160 = 0; _i160 < _size156; ++_i160)
            {
              xfer += iprot->readByte(this->name[_i160]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time_usec);
          this->__isset.time_usec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DebugVect::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DebugVect");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->name.size()));
    std::vector<int8_t> ::const_iterator _iter161;
    for (_iter161 = this->name.begin(); _iter161 != this->name.end(); ++_iter161)
    {
      xfer += oprot->writeByte((*_iter161));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_usec", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->time_usec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DebugVect &a, DebugVect &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.time_usec, b.time_usec);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

const char* NamedValueFloat::ascii_fingerprint = "D6FBE570AD2F8D817CA223A8EEFC368B";
const uint8_t NamedValueFloat::binary_fingerprint[16] = {0xD6,0xFB,0xE5,0x70,0xAD,0x2F,0x8D,0x81,0x7C,0xA2,0x23,0xA8,0xEE,0xFC,0x36,0x8B};

uint32_t NamedValueFloat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size162;
            ::apache::thrift::protocol::TType _etype165;
            xfer += iprot->readListBegin(_etype165, _size162);
            this->name.resize(_size162);
            uint32_t _i166;
            for (_i166 = 0; _i166 < _size162; ++_i166)
            {
              xfer += iprot->readByte(this->name[_i166]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NamedValueFloat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NamedValueFloat");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->name.size()));
    std::vector<int8_t> ::const_iterator _iter167;
    for (_iter167 = this->name.begin(); _iter167 != this->name.end(); ++_iter167)
    {
      xfer += oprot->writeByte((*_iter167));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NamedValueFloat &a, NamedValueFloat &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* NamedValueInt::ascii_fingerprint = "47F99142CD9D4B7B7FA9A7A119D699E2";
const uint8_t NamedValueInt::binary_fingerprint[16] = {0x47,0xF9,0x91,0x42,0xCD,0x9D,0x4B,0x7B,0x7F,0xA9,0xA7,0xA1,0x19,0xD6,0x99,0xE2};

uint32_t NamedValueInt::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->name.clear();
            uint32_t _size168;
            ::apache::thrift::protocol::TType _etype171;
            xfer += iprot->readListBegin(_etype171, _size168);
            this->name.resize(_size168);
            uint32_t _i172;
            for (_i172 = 0; _i172 < _size168; ++_i172)
            {
              xfer += iprot->readByte(this->name[_i172]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NamedValueInt::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NamedValueInt");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->name.size()));
    std::vector<int8_t> ::const_iterator _iter173;
    for (_iter173 = this->name.begin(); _iter173 != this->name.end(); ++_iter173)
    {
      xfer += oprot->writeByte((*_iter173));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NamedValueInt &a, NamedValueInt &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* Statustext::ascii_fingerprint = "E9315D11ED9B3ADE4F14971EFD87F639";
const uint8_t Statustext::binary_fingerprint[16] = {0xE9,0x31,0x5D,0x11,0xED,0x9B,0x3A,0xDE,0x4F,0x14,0x97,0x1E,0xFD,0x87,0xF6,0x39};

uint32_t Statustext::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->severity);
          this->__isset.severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->text.clear();
            uint32_t _size174;
            ::apache::thrift::protocol::TType _etype177;
            xfer += iprot->readListBegin(_etype177, _size174);
            this->text.resize(_size174);
            uint32_t _i178;
            for (_i178 = 0; _i178 < _size174; ++_i178)
            {
              xfer += iprot->readByte(this->text[_i178]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Statustext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Statustext");

  xfer += oprot->writeFieldBegin("severity", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->severity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->text.size()));
    std::vector<int8_t> ::const_iterator _iter179;
    for (_iter179 = this->text.begin(); _iter179 != this->text.end(); ++_iter179)
    {
      xfer += oprot->writeByte((*_iter179));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Statustext &a, Statustext &b) {
  using ::std::swap;
  swap(a.severity, b.severity);
  swap(a.text, b.text);
  swap(a.__isset, b.__isset);
}

const char* Debug::ascii_fingerprint = "968A23453A7428AD56957ED8500D496E";
const uint8_t Debug::binary_fingerprint[16] = {0x96,0x8A,0x23,0x45,0x3A,0x74,0x28,0xAD,0x56,0x95,0x7E,0xD8,0x50,0x0D,0x49,0x6E};

uint32_t Debug::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_boot_ms);
          this->__isset.time_boot_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->ind);
          this->__isset.ind = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Debug::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Debug");

  xfer += oprot->writeFieldBegin("time_boot_ms", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->time_boot_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ind", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->ind);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Debug &a, Debug &b) {
  using ::std::swap;
  swap(a.time_boot_ms, b.time_boot_ms);
  swap(a.ind, b.ind);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* InvalidMavlinkMessage::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t InvalidMavlinkMessage::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t InvalidMavlinkMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidMavlinkMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InvalidMavlinkMessage");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidMavlinkMessage &a, InvalidMavlinkMessage &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

}} // namespace
