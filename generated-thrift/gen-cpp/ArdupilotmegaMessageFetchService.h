/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ArdupilotmegaMessageFetchService_H
#define ArdupilotmegaMessageFetchService_H

#include <thrift/TDispatchProcessor.h>
#include "ardupilotmega_types.h"
#include "CommonMessageFetchService.h"

namespace mavlink { namespace thrift {

class ArdupilotmegaMessageFetchServiceIf : virtual public  ::mavlink::thrift::CommonMessageFetchServiceIf {
 public:
  virtual ~ArdupilotmegaMessageFetchServiceIf() {}
  virtual void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return) = 0;
  virtual void fetchSensorOffsets(const std::vector<SensorOffsets> & msg) = 0;
  virtual void fetchSetMagOffsets(const std::vector<SetMagOffsets> & msg) = 0;
  virtual void fetchMeminfo(const std::vector<Meminfo> & msg) = 0;
  virtual void fetchApAdc(const std::vector<ApAdc> & msg) = 0;
  virtual void fetchDigicamConfigure(const std::vector<DigicamConfigure> & msg) = 0;
  virtual void fetchDigicamControl(const std::vector<DigicamControl> & msg) = 0;
  virtual void fetchMountConfigure(const std::vector<MountConfigure> & msg) = 0;
  virtual void fetchMountControl(const std::vector<MountControl> & msg) = 0;
  virtual void fetchMountStatus(const std::vector<MountStatus> & msg) = 0;
  virtual void fetchFencePoint(const std::vector<FencePoint> & msg) = 0;
  virtual void fetchFenceFetchPoint(const std::vector<FenceFetchPoint> & msg) = 0;
  virtual void fetchFenceStatus(const std::vector<FenceStatus> & msg) = 0;
  virtual void fetchAhrs(const std::vector<Ahrs> & msg) = 0;
  virtual void fetchSimstate(const std::vector<Simstate> & msg) = 0;
  virtual void fetchHwstatus(const std::vector<Hwstatus> & msg) = 0;
  virtual void fetchRadio(const std::vector<Radio> & msg) = 0;
  virtual void fetchLimitsStatus(const std::vector<LimitsStatus> & msg) = 0;
  virtual void fetchWind(const std::vector<Wind> & msg) = 0;
  virtual void fetchData16(const std::vector<Data16> & msg) = 0;
  virtual void fetchData32(const std::vector<Data32> & msg) = 0;
  virtual void fetchData64(const std::vector<Data64> & msg) = 0;
  virtual void fetchData96(const std::vector<Data96> & msg) = 0;
  virtual void fetchRangefinder(const std::vector<Rangefinder> & msg) = 0;
};

class ArdupilotmegaMessageFetchServiceIfFactory : virtual public  ::mavlink::thrift::CommonMessageFetchServiceIfFactory {
 public:
  typedef ArdupilotmegaMessageFetchServiceIf Handler;

  virtual ~ArdupilotmegaMessageFetchServiceIfFactory() {}

  virtual ArdupilotmegaMessageFetchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::mavlink::thrift::CommonMessageFetchServiceIf* /* handler */) = 0;
};

class ArdupilotmegaMessageFetchServiceIfSingletonFactory : virtual public ArdupilotmegaMessageFetchServiceIfFactory {
 public:
  ArdupilotmegaMessageFetchServiceIfSingletonFactory(const boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf>& iface) : iface_(iface) {}
  virtual ~ArdupilotmegaMessageFetchServiceIfSingletonFactory() {}

  virtual ArdupilotmegaMessageFetchServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::mavlink::thrift::CommonMessageFetchServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf> iface_;
};

class ArdupilotmegaMessageFetchServiceNull : virtual public ArdupilotmegaMessageFetchServiceIf , virtual public  ::mavlink::thrift::CommonMessageFetchServiceNull {
 public:
  virtual ~ArdupilotmegaMessageFetchServiceNull() {}
  void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & /* _return */) {
    return;
  }
  void fetchSensorOffsets(const std::vector<SensorOffsets> & /* msg */) {
    return;
  }
  void fetchSetMagOffsets(const std::vector<SetMagOffsets> & /* msg */) {
    return;
  }
  void fetchMeminfo(const std::vector<Meminfo> & /* msg */) {
    return;
  }
  void fetchApAdc(const std::vector<ApAdc> & /* msg */) {
    return;
  }
  void fetchDigicamConfigure(const std::vector<DigicamConfigure> & /* msg */) {
    return;
  }
  void fetchDigicamControl(const std::vector<DigicamControl> & /* msg */) {
    return;
  }
  void fetchMountConfigure(const std::vector<MountConfigure> & /* msg */) {
    return;
  }
  void fetchMountControl(const std::vector<MountControl> & /* msg */) {
    return;
  }
  void fetchMountStatus(const std::vector<MountStatus> & /* msg */) {
    return;
  }
  void fetchFencePoint(const std::vector<FencePoint> & /* msg */) {
    return;
  }
  void fetchFenceFetchPoint(const std::vector<FenceFetchPoint> & /* msg */) {
    return;
  }
  void fetchFenceStatus(const std::vector<FenceStatus> & /* msg */) {
    return;
  }
  void fetchAhrs(const std::vector<Ahrs> & /* msg */) {
    return;
  }
  void fetchSimstate(const std::vector<Simstate> & /* msg */) {
    return;
  }
  void fetchHwstatus(const std::vector<Hwstatus> & /* msg */) {
    return;
  }
  void fetchRadio(const std::vector<Radio> & /* msg */) {
    return;
  }
  void fetchLimitsStatus(const std::vector<LimitsStatus> & /* msg */) {
    return;
  }
  void fetchWind(const std::vector<Wind> & /* msg */) {
    return;
  }
  void fetchData16(const std::vector<Data16> & /* msg */) {
    return;
  }
  void fetchData32(const std::vector<Data32> & /* msg */) {
    return;
  }
  void fetchData64(const std::vector<Data64> & /* msg */) {
    return;
  }
  void fetchData96(const std::vector<Data96> & /* msg */) {
    return;
  }
  void fetchRangefinder(const std::vector<Rangefinder> & /* msg */) {
    return;
  }
};


class ArdupilotmegaMessageFetchService_availableMessages_args {
 public:

  ArdupilotmegaMessageFetchService_availableMessages_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_availableMessages_args() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_availableMessages_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_availableMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_availableMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_availableMessages_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_availableMessages_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetchService_availableMessages_result__isset {
  _ArdupilotmegaMessageFetchService_availableMessages_result__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetchService_availableMessages_result__isset;

class ArdupilotmegaMessageFetchService_availableMessages_result {
 public:

  ArdupilotmegaMessageFetchService_availableMessages_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_availableMessages_result() throw() {}

  std::map<ArdupilotmegaMessageTypes::type, int32_t>  success;

  _ArdupilotmegaMessageFetchService_availableMessages_result__isset __isset;

  void __set_success(const std::map<ArdupilotmegaMessageTypes::type, int32_t> & val) {
    success = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_availableMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_availableMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_availableMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessageFetchService_availableMessages_presult__isset {
  _ArdupilotmegaMessageFetchService_availableMessages_presult__isset() : success(false) {}
  bool success;
} _ArdupilotmegaMessageFetchService_availableMessages_presult__isset;

class ArdupilotmegaMessageFetchService_availableMessages_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_availableMessages_presult() throw() {}

  std::map<ArdupilotmegaMessageTypes::type, int32_t> * success;

  _ArdupilotmegaMessageFetchService_availableMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchSensorOffsets_args__isset {
  _ArdupilotmegaMessageFetchService_fetchSensorOffsets_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchSensorOffsets_args__isset;

class ArdupilotmegaMessageFetchService_fetchSensorOffsets_args {
 public:

  ArdupilotmegaMessageFetchService_fetchSensorOffsets_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchSensorOffsets_args() throw() {}

  std::vector<SensorOffsets>  msg;

  _ArdupilotmegaMessageFetchService_fetchSensorOffsets_args__isset __isset;

  void __set_msg(const std::vector<SensorOffsets> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchSensorOffsets_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchSensorOffsets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchSensorOffsets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSensorOffsets_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchSensorOffsets_pargs() throw() {}

  const std::vector<SensorOffsets> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSensorOffsets_result {
 public:

  ArdupilotmegaMessageFetchService_fetchSensorOffsets_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchSensorOffsets_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchSensorOffsets_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchSensorOffsets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchSensorOffsets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSensorOffsets_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchSensorOffsets_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args__isset {
  _ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args__isset;

class ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args {
 public:

  ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args() throw() {}

  std::vector<SetMagOffsets>  msg;

  _ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args__isset __isset;

  void __set_msg(const std::vector<SetMagOffsets> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchSetMagOffsets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSetMagOffsets_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchSetMagOffsets_pargs() throw() {}

  const std::vector<SetMagOffsets> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSetMagOffsets_result {
 public:

  ArdupilotmegaMessageFetchService_fetchSetMagOffsets_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchSetMagOffsets_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchSetMagOffsets_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchSetMagOffsets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchSetMagOffsets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSetMagOffsets_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchSetMagOffsets_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchMeminfo_args__isset {
  _ArdupilotmegaMessageFetchService_fetchMeminfo_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchMeminfo_args__isset;

class ArdupilotmegaMessageFetchService_fetchMeminfo_args {
 public:

  ArdupilotmegaMessageFetchService_fetchMeminfo_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMeminfo_args() throw() {}

  std::vector<Meminfo>  msg;

  _ArdupilotmegaMessageFetchService_fetchMeminfo_args__isset __isset;

  void __set_msg(const std::vector<Meminfo> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchMeminfo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMeminfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMeminfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMeminfo_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMeminfo_pargs() throw() {}

  const std::vector<Meminfo> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMeminfo_result {
 public:

  ArdupilotmegaMessageFetchService_fetchMeminfo_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMeminfo_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchMeminfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMeminfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMeminfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMeminfo_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMeminfo_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchApAdc_args__isset {
  _ArdupilotmegaMessageFetchService_fetchApAdc_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchApAdc_args__isset;

class ArdupilotmegaMessageFetchService_fetchApAdc_args {
 public:

  ArdupilotmegaMessageFetchService_fetchApAdc_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchApAdc_args() throw() {}

  std::vector<ApAdc>  msg;

  _ArdupilotmegaMessageFetchService_fetchApAdc_args__isset __isset;

  void __set_msg(const std::vector<ApAdc> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchApAdc_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchApAdc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchApAdc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchApAdc_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchApAdc_pargs() throw() {}

  const std::vector<ApAdc> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchApAdc_result {
 public:

  ArdupilotmegaMessageFetchService_fetchApAdc_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchApAdc_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchApAdc_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchApAdc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchApAdc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchApAdc_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchApAdc_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args__isset {
  _ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args__isset;

class ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args {
 public:

  ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args() throw() {}

  std::vector<DigicamConfigure>  msg;

  _ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args__isset __isset;

  void __set_msg(const std::vector<DigicamConfigure> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchDigicamConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchDigicamConfigure_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamConfigure_pargs() throw() {}

  const std::vector<DigicamConfigure> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchDigicamConfigure_result {
 public:

  ArdupilotmegaMessageFetchService_fetchDigicamConfigure_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamConfigure_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchDigicamConfigure_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchDigicamConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchDigicamConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchDigicamConfigure_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamConfigure_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchDigicamControl_args__isset {
  _ArdupilotmegaMessageFetchService_fetchDigicamControl_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchDigicamControl_args__isset;

class ArdupilotmegaMessageFetchService_fetchDigicamControl_args {
 public:

  ArdupilotmegaMessageFetchService_fetchDigicamControl_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamControl_args() throw() {}

  std::vector<DigicamControl>  msg;

  _ArdupilotmegaMessageFetchService_fetchDigicamControl_args__isset __isset;

  void __set_msg(const std::vector<DigicamControl> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchDigicamControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchDigicamControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchDigicamControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchDigicamControl_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamControl_pargs() throw() {}

  const std::vector<DigicamControl> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchDigicamControl_result {
 public:

  ArdupilotmegaMessageFetchService_fetchDigicamControl_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamControl_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchDigicamControl_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchDigicamControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchDigicamControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchDigicamControl_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchDigicamControl_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchMountConfigure_args__isset {
  _ArdupilotmegaMessageFetchService_fetchMountConfigure_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchMountConfigure_args__isset;

class ArdupilotmegaMessageFetchService_fetchMountConfigure_args {
 public:

  ArdupilotmegaMessageFetchService_fetchMountConfigure_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMountConfigure_args() throw() {}

  std::vector<MountConfigure>  msg;

  _ArdupilotmegaMessageFetchService_fetchMountConfigure_args__isset __isset;

  void __set_msg(const std::vector<MountConfigure> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchMountConfigure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMountConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMountConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountConfigure_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMountConfigure_pargs() throw() {}

  const std::vector<MountConfigure> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountConfigure_result {
 public:

  ArdupilotmegaMessageFetchService_fetchMountConfigure_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMountConfigure_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchMountConfigure_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMountConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMountConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountConfigure_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMountConfigure_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchMountControl_args__isset {
  _ArdupilotmegaMessageFetchService_fetchMountControl_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchMountControl_args__isset;

class ArdupilotmegaMessageFetchService_fetchMountControl_args {
 public:

  ArdupilotmegaMessageFetchService_fetchMountControl_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMountControl_args() throw() {}

  std::vector<MountControl>  msg;

  _ArdupilotmegaMessageFetchService_fetchMountControl_args__isset __isset;

  void __set_msg(const std::vector<MountControl> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchMountControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMountControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMountControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountControl_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMountControl_pargs() throw() {}

  const std::vector<MountControl> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountControl_result {
 public:

  ArdupilotmegaMessageFetchService_fetchMountControl_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMountControl_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchMountControl_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMountControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMountControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountControl_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMountControl_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchMountStatus_args__isset {
  _ArdupilotmegaMessageFetchService_fetchMountStatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchMountStatus_args__isset;

class ArdupilotmegaMessageFetchService_fetchMountStatus_args {
 public:

  ArdupilotmegaMessageFetchService_fetchMountStatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMountStatus_args() throw() {}

  std::vector<MountStatus>  msg;

  _ArdupilotmegaMessageFetchService_fetchMountStatus_args__isset __isset;

  void __set_msg(const std::vector<MountStatus> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchMountStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMountStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMountStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMountStatus_pargs() throw() {}

  const std::vector<MountStatus> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountStatus_result {
 public:

  ArdupilotmegaMessageFetchService_fetchMountStatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchMountStatus_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchMountStatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchMountStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchMountStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchMountStatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchMountStatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchFencePoint_args__isset {
  _ArdupilotmegaMessageFetchService_fetchFencePoint_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchFencePoint_args__isset;

class ArdupilotmegaMessageFetchService_fetchFencePoint_args {
 public:

  ArdupilotmegaMessageFetchService_fetchFencePoint_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchFencePoint_args() throw() {}

  std::vector<FencePoint>  msg;

  _ArdupilotmegaMessageFetchService_fetchFencePoint_args__isset __isset;

  void __set_msg(const std::vector<FencePoint> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchFencePoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchFencePoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchFencePoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFencePoint_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchFencePoint_pargs() throw() {}

  const std::vector<FencePoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFencePoint_result {
 public:

  ArdupilotmegaMessageFetchService_fetchFencePoint_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchFencePoint_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchFencePoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchFencePoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchFencePoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFencePoint_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchFencePoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args__isset {
  _ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args__isset;

class ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args {
 public:

  ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args() throw() {}

  std::vector<FenceFetchPoint>  msg;

  _ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args__isset __isset;

  void __set_msg(const std::vector<FenceFetchPoint> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_pargs() throw() {}

  const std::vector<FenceFetchPoint> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_result {
 public:

  ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchFenceFetchPoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchFenceStatus_args__isset {
  _ArdupilotmegaMessageFetchService_fetchFenceStatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchFenceStatus_args__isset;

class ArdupilotmegaMessageFetchService_fetchFenceStatus_args {
 public:

  ArdupilotmegaMessageFetchService_fetchFenceStatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchFenceStatus_args() throw() {}

  std::vector<FenceStatus>  msg;

  _ArdupilotmegaMessageFetchService_fetchFenceStatus_args__isset __isset;

  void __set_msg(const std::vector<FenceStatus> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchFenceStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchFenceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchFenceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFenceStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchFenceStatus_pargs() throw() {}

  const std::vector<FenceStatus> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFenceStatus_result {
 public:

  ArdupilotmegaMessageFetchService_fetchFenceStatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchFenceStatus_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchFenceStatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchFenceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchFenceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchFenceStatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchFenceStatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchAhrs_args__isset {
  _ArdupilotmegaMessageFetchService_fetchAhrs_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchAhrs_args__isset;

class ArdupilotmegaMessageFetchService_fetchAhrs_args {
 public:

  ArdupilotmegaMessageFetchService_fetchAhrs_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchAhrs_args() throw() {}

  std::vector<Ahrs>  msg;

  _ArdupilotmegaMessageFetchService_fetchAhrs_args__isset __isset;

  void __set_msg(const std::vector<Ahrs> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchAhrs_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchAhrs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchAhrs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchAhrs_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchAhrs_pargs() throw() {}

  const std::vector<Ahrs> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchAhrs_result {
 public:

  ArdupilotmegaMessageFetchService_fetchAhrs_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchAhrs_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchAhrs_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchAhrs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchAhrs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchAhrs_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchAhrs_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchSimstate_args__isset {
  _ArdupilotmegaMessageFetchService_fetchSimstate_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchSimstate_args__isset;

class ArdupilotmegaMessageFetchService_fetchSimstate_args {
 public:

  ArdupilotmegaMessageFetchService_fetchSimstate_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchSimstate_args() throw() {}

  std::vector<Simstate>  msg;

  _ArdupilotmegaMessageFetchService_fetchSimstate_args__isset __isset;

  void __set_msg(const std::vector<Simstate> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchSimstate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchSimstate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchSimstate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSimstate_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchSimstate_pargs() throw() {}

  const std::vector<Simstate> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSimstate_result {
 public:

  ArdupilotmegaMessageFetchService_fetchSimstate_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchSimstate_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchSimstate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchSimstate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchSimstate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchSimstate_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchSimstate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchHwstatus_args__isset {
  _ArdupilotmegaMessageFetchService_fetchHwstatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchHwstatus_args__isset;

class ArdupilotmegaMessageFetchService_fetchHwstatus_args {
 public:

  ArdupilotmegaMessageFetchService_fetchHwstatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchHwstatus_args() throw() {}

  std::vector<Hwstatus>  msg;

  _ArdupilotmegaMessageFetchService_fetchHwstatus_args__isset __isset;

  void __set_msg(const std::vector<Hwstatus> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchHwstatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchHwstatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchHwstatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchHwstatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchHwstatus_pargs() throw() {}

  const std::vector<Hwstatus> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchHwstatus_result {
 public:

  ArdupilotmegaMessageFetchService_fetchHwstatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchHwstatus_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchHwstatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchHwstatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchHwstatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchHwstatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchHwstatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchRadio_args__isset {
  _ArdupilotmegaMessageFetchService_fetchRadio_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchRadio_args__isset;

class ArdupilotmegaMessageFetchService_fetchRadio_args {
 public:

  ArdupilotmegaMessageFetchService_fetchRadio_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchRadio_args() throw() {}

  std::vector<Radio>  msg;

  _ArdupilotmegaMessageFetchService_fetchRadio_args__isset __isset;

  void __set_msg(const std::vector<Radio> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchRadio_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchRadio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchRadio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchRadio_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchRadio_pargs() throw() {}

  const std::vector<Radio> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchRadio_result {
 public:

  ArdupilotmegaMessageFetchService_fetchRadio_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchRadio_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchRadio_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchRadio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchRadio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchRadio_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchRadio_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchLimitsStatus_args__isset {
  _ArdupilotmegaMessageFetchService_fetchLimitsStatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchLimitsStatus_args__isset;

class ArdupilotmegaMessageFetchService_fetchLimitsStatus_args {
 public:

  ArdupilotmegaMessageFetchService_fetchLimitsStatus_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchLimitsStatus_args() throw() {}

  std::vector<LimitsStatus>  msg;

  _ArdupilotmegaMessageFetchService_fetchLimitsStatus_args__isset __isset;

  void __set_msg(const std::vector<LimitsStatus> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchLimitsStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchLimitsStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchLimitsStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchLimitsStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchLimitsStatus_pargs() throw() {}

  const std::vector<LimitsStatus> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchLimitsStatus_result {
 public:

  ArdupilotmegaMessageFetchService_fetchLimitsStatus_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchLimitsStatus_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchLimitsStatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchLimitsStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchLimitsStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchLimitsStatus_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchLimitsStatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchWind_args__isset {
  _ArdupilotmegaMessageFetchService_fetchWind_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchWind_args__isset;

class ArdupilotmegaMessageFetchService_fetchWind_args {
 public:

  ArdupilotmegaMessageFetchService_fetchWind_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchWind_args() throw() {}

  std::vector<Wind>  msg;

  _ArdupilotmegaMessageFetchService_fetchWind_args__isset __isset;

  void __set_msg(const std::vector<Wind> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchWind_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchWind_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchWind_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchWind_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchWind_pargs() throw() {}

  const std::vector<Wind> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchWind_result {
 public:

  ArdupilotmegaMessageFetchService_fetchWind_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchWind_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchWind_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchWind_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchWind_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchWind_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchWind_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchData16_args__isset {
  _ArdupilotmegaMessageFetchService_fetchData16_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchData16_args__isset;

class ArdupilotmegaMessageFetchService_fetchData16_args {
 public:

  ArdupilotmegaMessageFetchService_fetchData16_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData16_args() throw() {}

  std::vector<Data16>  msg;

  _ArdupilotmegaMessageFetchService_fetchData16_args__isset __isset;

  void __set_msg(const std::vector<Data16> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchData16_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData16_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData16_pargs() throw() {}

  const std::vector<Data16> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData16_result {
 public:

  ArdupilotmegaMessageFetchService_fetchData16_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData16_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchData16_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData16_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData16_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchData32_args__isset {
  _ArdupilotmegaMessageFetchService_fetchData32_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchData32_args__isset;

class ArdupilotmegaMessageFetchService_fetchData32_args {
 public:

  ArdupilotmegaMessageFetchService_fetchData32_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData32_args() throw() {}

  std::vector<Data32>  msg;

  _ArdupilotmegaMessageFetchService_fetchData32_args__isset __isset;

  void __set_msg(const std::vector<Data32> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchData32_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData32_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData32_pargs() throw() {}

  const std::vector<Data32> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData32_result {
 public:

  ArdupilotmegaMessageFetchService_fetchData32_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData32_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchData32_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData32_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData32_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchData64_args__isset {
  _ArdupilotmegaMessageFetchService_fetchData64_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchData64_args__isset;

class ArdupilotmegaMessageFetchService_fetchData64_args {
 public:

  ArdupilotmegaMessageFetchService_fetchData64_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData64_args() throw() {}

  std::vector<Data64>  msg;

  _ArdupilotmegaMessageFetchService_fetchData64_args__isset __isset;

  void __set_msg(const std::vector<Data64> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchData64_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData64_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData64_pargs() throw() {}

  const std::vector<Data64> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData64_result {
 public:

  ArdupilotmegaMessageFetchService_fetchData64_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData64_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchData64_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData64_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData64_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchData96_args__isset {
  _ArdupilotmegaMessageFetchService_fetchData96_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchData96_args__isset;

class ArdupilotmegaMessageFetchService_fetchData96_args {
 public:

  ArdupilotmegaMessageFetchService_fetchData96_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData96_args() throw() {}

  std::vector<Data96>  msg;

  _ArdupilotmegaMessageFetchService_fetchData96_args__isset __isset;

  void __set_msg(const std::vector<Data96> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchData96_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData96_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData96_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData96_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData96_pargs() throw() {}

  const std::vector<Data96> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData96_result {
 public:

  ArdupilotmegaMessageFetchService_fetchData96_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchData96_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchData96_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchData96_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchData96_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchData96_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchData96_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessageFetchService_fetchRangefinder_args__isset {
  _ArdupilotmegaMessageFetchService_fetchRangefinder_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessageFetchService_fetchRangefinder_args__isset;

class ArdupilotmegaMessageFetchService_fetchRangefinder_args {
 public:

  ArdupilotmegaMessageFetchService_fetchRangefinder_args() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchRangefinder_args() throw() {}

  std::vector<Rangefinder>  msg;

  _ArdupilotmegaMessageFetchService_fetchRangefinder_args__isset __isset;

  void __set_msg(const std::vector<Rangefinder> & val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessageFetchService_fetchRangefinder_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchRangefinder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchRangefinder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchRangefinder_pargs {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchRangefinder_pargs() throw() {}

  const std::vector<Rangefinder> * msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchRangefinder_result {
 public:

  ArdupilotmegaMessageFetchService_fetchRangefinder_result() {
  }

  virtual ~ArdupilotmegaMessageFetchService_fetchRangefinder_result() throw() {}


  bool operator == (const ArdupilotmegaMessageFetchService_fetchRangefinder_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArdupilotmegaMessageFetchService_fetchRangefinder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessageFetchService_fetchRangefinder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessageFetchService_fetchRangefinder_presult {
 public:


  virtual ~ArdupilotmegaMessageFetchService_fetchRangefinder_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ArdupilotmegaMessageFetchServiceClient : virtual public ArdupilotmegaMessageFetchServiceIf, public  ::mavlink::thrift::CommonMessageFetchServiceClient {
 public:
  ArdupilotmegaMessageFetchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::mavlink::thrift::CommonMessageFetchServiceClient(prot, prot) {}
  ArdupilotmegaMessageFetchServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::mavlink::thrift::CommonMessageFetchServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return);
  void send_availableMessages();
  void recv_availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return);
  void fetchSensorOffsets(const std::vector<SensorOffsets> & msg);
  void send_fetchSensorOffsets(const std::vector<SensorOffsets> & msg);
  void recv_fetchSensorOffsets();
  void fetchSetMagOffsets(const std::vector<SetMagOffsets> & msg);
  void send_fetchSetMagOffsets(const std::vector<SetMagOffsets> & msg);
  void recv_fetchSetMagOffsets();
  void fetchMeminfo(const std::vector<Meminfo> & msg);
  void send_fetchMeminfo(const std::vector<Meminfo> & msg);
  void recv_fetchMeminfo();
  void fetchApAdc(const std::vector<ApAdc> & msg);
  void send_fetchApAdc(const std::vector<ApAdc> & msg);
  void recv_fetchApAdc();
  void fetchDigicamConfigure(const std::vector<DigicamConfigure> & msg);
  void send_fetchDigicamConfigure(const std::vector<DigicamConfigure> & msg);
  void recv_fetchDigicamConfigure();
  void fetchDigicamControl(const std::vector<DigicamControl> & msg);
  void send_fetchDigicamControl(const std::vector<DigicamControl> & msg);
  void recv_fetchDigicamControl();
  void fetchMountConfigure(const std::vector<MountConfigure> & msg);
  void send_fetchMountConfigure(const std::vector<MountConfigure> & msg);
  void recv_fetchMountConfigure();
  void fetchMountControl(const std::vector<MountControl> & msg);
  void send_fetchMountControl(const std::vector<MountControl> & msg);
  void recv_fetchMountControl();
  void fetchMountStatus(const std::vector<MountStatus> & msg);
  void send_fetchMountStatus(const std::vector<MountStatus> & msg);
  void recv_fetchMountStatus();
  void fetchFencePoint(const std::vector<FencePoint> & msg);
  void send_fetchFencePoint(const std::vector<FencePoint> & msg);
  void recv_fetchFencePoint();
  void fetchFenceFetchPoint(const std::vector<FenceFetchPoint> & msg);
  void send_fetchFenceFetchPoint(const std::vector<FenceFetchPoint> & msg);
  void recv_fetchFenceFetchPoint();
  void fetchFenceStatus(const std::vector<FenceStatus> & msg);
  void send_fetchFenceStatus(const std::vector<FenceStatus> & msg);
  void recv_fetchFenceStatus();
  void fetchAhrs(const std::vector<Ahrs> & msg);
  void send_fetchAhrs(const std::vector<Ahrs> & msg);
  void recv_fetchAhrs();
  void fetchSimstate(const std::vector<Simstate> & msg);
  void send_fetchSimstate(const std::vector<Simstate> & msg);
  void recv_fetchSimstate();
  void fetchHwstatus(const std::vector<Hwstatus> & msg);
  void send_fetchHwstatus(const std::vector<Hwstatus> & msg);
  void recv_fetchHwstatus();
  void fetchRadio(const std::vector<Radio> & msg);
  void send_fetchRadio(const std::vector<Radio> & msg);
  void recv_fetchRadio();
  void fetchLimitsStatus(const std::vector<LimitsStatus> & msg);
  void send_fetchLimitsStatus(const std::vector<LimitsStatus> & msg);
  void recv_fetchLimitsStatus();
  void fetchWind(const std::vector<Wind> & msg);
  void send_fetchWind(const std::vector<Wind> & msg);
  void recv_fetchWind();
  void fetchData16(const std::vector<Data16> & msg);
  void send_fetchData16(const std::vector<Data16> & msg);
  void recv_fetchData16();
  void fetchData32(const std::vector<Data32> & msg);
  void send_fetchData32(const std::vector<Data32> & msg);
  void recv_fetchData32();
  void fetchData64(const std::vector<Data64> & msg);
  void send_fetchData64(const std::vector<Data64> & msg);
  void recv_fetchData64();
  void fetchData96(const std::vector<Data96> & msg);
  void send_fetchData96(const std::vector<Data96> & msg);
  void recv_fetchData96();
  void fetchRangefinder(const std::vector<Rangefinder> & msg);
  void send_fetchRangefinder(const std::vector<Rangefinder> & msg);
  void recv_fetchRangefinder();
};

class ArdupilotmegaMessageFetchServiceProcessor : public  ::mavlink::thrift::CommonMessageFetchServiceProcessor {
 protected:
  boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ArdupilotmegaMessageFetchServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_availableMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSensorOffsets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSetMagOffsets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMeminfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchApAdc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDigicamConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDigicamControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMountConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMountControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMountStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFencePoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFenceFetchPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchFenceStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAhrs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchSimstate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchHwstatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRadio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchLimitsStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchWind(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchData96(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRangefinder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ArdupilotmegaMessageFetchServiceProcessor(boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf> iface) :
     ::mavlink::thrift::CommonMessageFetchServiceProcessor(iface),
    iface_(iface) {
    processMap_["availableMessages"] = &ArdupilotmegaMessageFetchServiceProcessor::process_availableMessages;
    processMap_["fetchSensorOffsets"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchSensorOffsets;
    processMap_["fetchSetMagOffsets"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchSetMagOffsets;
    processMap_["fetchMeminfo"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchMeminfo;
    processMap_["fetchApAdc"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchApAdc;
    processMap_["fetchDigicamConfigure"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchDigicamConfigure;
    processMap_["fetchDigicamControl"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchDigicamControl;
    processMap_["fetchMountConfigure"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchMountConfigure;
    processMap_["fetchMountControl"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchMountControl;
    processMap_["fetchMountStatus"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchMountStatus;
    processMap_["fetchFencePoint"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchFencePoint;
    processMap_["fetchFenceFetchPoint"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchFenceFetchPoint;
    processMap_["fetchFenceStatus"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchFenceStatus;
    processMap_["fetchAhrs"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchAhrs;
    processMap_["fetchSimstate"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchSimstate;
    processMap_["fetchHwstatus"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchHwstatus;
    processMap_["fetchRadio"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchRadio;
    processMap_["fetchLimitsStatus"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchLimitsStatus;
    processMap_["fetchWind"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchWind;
    processMap_["fetchData16"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchData16;
    processMap_["fetchData32"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchData32;
    processMap_["fetchData64"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchData64;
    processMap_["fetchData96"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchData96;
    processMap_["fetchRangefinder"] = &ArdupilotmegaMessageFetchServiceProcessor::process_fetchRangefinder;
  }

  virtual ~ArdupilotmegaMessageFetchServiceProcessor() {}
};

class ArdupilotmegaMessageFetchServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ArdupilotmegaMessageFetchServiceProcessorFactory(const ::boost::shared_ptr< ArdupilotmegaMessageFetchServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ArdupilotmegaMessageFetchServiceIfFactory > handlerFactory_;
};

class ArdupilotmegaMessageFetchServiceMultiface : virtual public ArdupilotmegaMessageFetchServiceIf, public  ::mavlink::thrift::CommonMessageFetchServiceMultiface {
 public:
  ArdupilotmegaMessageFetchServiceMultiface(std::vector<boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::mavlink::thrift::CommonMessageFetchServiceMultiface::add(*iter);
    }
  }
  virtual ~ArdupilotmegaMessageFetchServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf> > ifaces_;
  ArdupilotmegaMessageFetchServiceMultiface() {}
  void add(boost::shared_ptr<ArdupilotmegaMessageFetchServiceIf> iface) {
     ::mavlink::thrift::CommonMessageFetchServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void availableMessages(std::map<ArdupilotmegaMessageTypes::type, int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->availableMessages(_return);
    }
    ifaces_[i]->availableMessages(_return);
    return;
  }

  void fetchSensorOffsets(const std::vector<SensorOffsets> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSensorOffsets(msg);
    }
    ifaces_[i]->fetchSensorOffsets(msg);
  }

  void fetchSetMagOffsets(const std::vector<SetMagOffsets> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSetMagOffsets(msg);
    }
    ifaces_[i]->fetchSetMagOffsets(msg);
  }

  void fetchMeminfo(const std::vector<Meminfo> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMeminfo(msg);
    }
    ifaces_[i]->fetchMeminfo(msg);
  }

  void fetchApAdc(const std::vector<ApAdc> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchApAdc(msg);
    }
    ifaces_[i]->fetchApAdc(msg);
  }

  void fetchDigicamConfigure(const std::vector<DigicamConfigure> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDigicamConfigure(msg);
    }
    ifaces_[i]->fetchDigicamConfigure(msg);
  }

  void fetchDigicamControl(const std::vector<DigicamControl> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDigicamControl(msg);
    }
    ifaces_[i]->fetchDigicamControl(msg);
  }

  void fetchMountConfigure(const std::vector<MountConfigure> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMountConfigure(msg);
    }
    ifaces_[i]->fetchMountConfigure(msg);
  }

  void fetchMountControl(const std::vector<MountControl> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMountControl(msg);
    }
    ifaces_[i]->fetchMountControl(msg);
  }

  void fetchMountStatus(const std::vector<MountStatus> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMountStatus(msg);
    }
    ifaces_[i]->fetchMountStatus(msg);
  }

  void fetchFencePoint(const std::vector<FencePoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFencePoint(msg);
    }
    ifaces_[i]->fetchFencePoint(msg);
  }

  void fetchFenceFetchPoint(const std::vector<FenceFetchPoint> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFenceFetchPoint(msg);
    }
    ifaces_[i]->fetchFenceFetchPoint(msg);
  }

  void fetchFenceStatus(const std::vector<FenceStatus> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchFenceStatus(msg);
    }
    ifaces_[i]->fetchFenceStatus(msg);
  }

  void fetchAhrs(const std::vector<Ahrs> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAhrs(msg);
    }
    ifaces_[i]->fetchAhrs(msg);
  }

  void fetchSimstate(const std::vector<Simstate> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchSimstate(msg);
    }
    ifaces_[i]->fetchSimstate(msg);
  }

  void fetchHwstatus(const std::vector<Hwstatus> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchHwstatus(msg);
    }
    ifaces_[i]->fetchHwstatus(msg);
  }

  void fetchRadio(const std::vector<Radio> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRadio(msg);
    }
    ifaces_[i]->fetchRadio(msg);
  }

  void fetchLimitsStatus(const std::vector<LimitsStatus> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchLimitsStatus(msg);
    }
    ifaces_[i]->fetchLimitsStatus(msg);
  }

  void fetchWind(const std::vector<Wind> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchWind(msg);
    }
    ifaces_[i]->fetchWind(msg);
  }

  void fetchData16(const std::vector<Data16> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData16(msg);
    }
    ifaces_[i]->fetchData16(msg);
  }

  void fetchData32(const std::vector<Data32> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData32(msg);
    }
    ifaces_[i]->fetchData32(msg);
  }

  void fetchData64(const std::vector<Data64> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData64(msg);
    }
    ifaces_[i]->fetchData64(msg);
  }

  void fetchData96(const std::vector<Data96> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchData96(msg);
    }
    ifaces_[i]->fetchData96(msg);
  }

  void fetchRangefinder(const std::vector<Rangefinder> & msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRangefinder(msg);
    }
    ifaces_[i]->fetchRangefinder(msg);
  }

};

}} // namespace

#endif
