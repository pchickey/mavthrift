/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ArdupilotmegaMessagePostService_H
#define ArdupilotmegaMessagePostService_H

#include <thrift/TDispatchProcessor.h>
#include "ardupilotmega_types.h"
#include "CommonMessagePostService.h"

namespace mavlink { namespace thrift {

class ArdupilotmegaMessagePostServiceIf : virtual public  ::mavlink::thrift::CommonMessagePostServiceIf {
 public:
  virtual ~ArdupilotmegaMessagePostServiceIf() {}
  virtual void postSensorOffsets(const SensorOffsets& msg) = 0;
  virtual void postSetMagOffsets(const SetMagOffsets& msg) = 0;
  virtual void postMeminfo(const Meminfo& msg) = 0;
  virtual void postApAdc(const ApAdc& msg) = 0;
  virtual void postDigicamConfigure(const DigicamConfigure& msg) = 0;
  virtual void postDigicamControl(const DigicamControl& msg) = 0;
  virtual void postMountConfigure(const MountConfigure& msg) = 0;
  virtual void postMountControl(const MountControl& msg) = 0;
  virtual void postMountStatus(const MountStatus& msg) = 0;
  virtual void postFencePoint(const FencePoint& msg) = 0;
  virtual void postFenceFetchPoint(const FenceFetchPoint& msg) = 0;
  virtual void postFenceStatus(const FenceStatus& msg) = 0;
  virtual void postAhrs(const Ahrs& msg) = 0;
  virtual void postSimstate(const Simstate& msg) = 0;
  virtual void postHwstatus(const Hwstatus& msg) = 0;
  virtual void postRadio(const Radio& msg) = 0;
  virtual void postLimitsStatus(const LimitsStatus& msg) = 0;
  virtual void postWind(const Wind& msg) = 0;
  virtual void postData16(const Data16& msg) = 0;
  virtual void postData32(const Data32& msg) = 0;
  virtual void postData64(const Data64& msg) = 0;
  virtual void postData96(const Data96& msg) = 0;
  virtual void postRangefinder(const Rangefinder& msg) = 0;
};

class ArdupilotmegaMessagePostServiceIfFactory : virtual public  ::mavlink::thrift::CommonMessagePostServiceIfFactory {
 public:
  typedef ArdupilotmegaMessagePostServiceIf Handler;

  virtual ~ArdupilotmegaMessagePostServiceIfFactory() {}

  virtual ArdupilotmegaMessagePostServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::mavlink::thrift::CommonMessagePostServiceIf* /* handler */) = 0;
};

class ArdupilotmegaMessagePostServiceIfSingletonFactory : virtual public ArdupilotmegaMessagePostServiceIfFactory {
 public:
  ArdupilotmegaMessagePostServiceIfSingletonFactory(const boost::shared_ptr<ArdupilotmegaMessagePostServiceIf>& iface) : iface_(iface) {}
  virtual ~ArdupilotmegaMessagePostServiceIfSingletonFactory() {}

  virtual ArdupilotmegaMessagePostServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::mavlink::thrift::CommonMessagePostServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ArdupilotmegaMessagePostServiceIf> iface_;
};

class ArdupilotmegaMessagePostServiceNull : virtual public ArdupilotmegaMessagePostServiceIf , virtual public  ::mavlink::thrift::CommonMessagePostServiceNull {
 public:
  virtual ~ArdupilotmegaMessagePostServiceNull() {}
  void postSensorOffsets(const SensorOffsets& /* msg */) {
    return;
  }
  void postSetMagOffsets(const SetMagOffsets& /* msg */) {
    return;
  }
  void postMeminfo(const Meminfo& /* msg */) {
    return;
  }
  void postApAdc(const ApAdc& /* msg */) {
    return;
  }
  void postDigicamConfigure(const DigicamConfigure& /* msg */) {
    return;
  }
  void postDigicamControl(const DigicamControl& /* msg */) {
    return;
  }
  void postMountConfigure(const MountConfigure& /* msg */) {
    return;
  }
  void postMountControl(const MountControl& /* msg */) {
    return;
  }
  void postMountStatus(const MountStatus& /* msg */) {
    return;
  }
  void postFencePoint(const FencePoint& /* msg */) {
    return;
  }
  void postFenceFetchPoint(const FenceFetchPoint& /* msg */) {
    return;
  }
  void postFenceStatus(const FenceStatus& /* msg */) {
    return;
  }
  void postAhrs(const Ahrs& /* msg */) {
    return;
  }
  void postSimstate(const Simstate& /* msg */) {
    return;
  }
  void postHwstatus(const Hwstatus& /* msg */) {
    return;
  }
  void postRadio(const Radio& /* msg */) {
    return;
  }
  void postLimitsStatus(const LimitsStatus& /* msg */) {
    return;
  }
  void postWind(const Wind& /* msg */) {
    return;
  }
  void postData16(const Data16& /* msg */) {
    return;
  }
  void postData32(const Data32& /* msg */) {
    return;
  }
  void postData64(const Data64& /* msg */) {
    return;
  }
  void postData96(const Data96& /* msg */) {
    return;
  }
  void postRangefinder(const Rangefinder& /* msg */) {
    return;
  }
};

typedef struct _ArdupilotmegaMessagePostService_postSensorOffsets_args__isset {
  _ArdupilotmegaMessagePostService_postSensorOffsets_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postSensorOffsets_args__isset;

class ArdupilotmegaMessagePostService_postSensorOffsets_args {
 public:

  ArdupilotmegaMessagePostService_postSensorOffsets_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postSensorOffsets_args() throw() {}

  SensorOffsets msg;

  _ArdupilotmegaMessagePostService_postSensorOffsets_args__isset __isset;

  void __set_msg(const SensorOffsets& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postSensorOffsets_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postSensorOffsets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postSensorOffsets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postSensorOffsets_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postSensorOffsets_pargs() throw() {}

  const SensorOffsets* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postSensorOffsets_result__isset {
  _ArdupilotmegaMessagePostService_postSensorOffsets_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postSensorOffsets_result__isset;

class ArdupilotmegaMessagePostService_postSensorOffsets_result {
 public:

  ArdupilotmegaMessagePostService_postSensorOffsets_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postSensorOffsets_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postSensorOffsets_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postSensorOffsets_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postSensorOffsets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postSensorOffsets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postSensorOffsets_presult__isset {
  _ArdupilotmegaMessagePostService_postSensorOffsets_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postSensorOffsets_presult__isset;

class ArdupilotmegaMessagePostService_postSensorOffsets_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postSensorOffsets_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postSensorOffsets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postSetMagOffsets_args__isset {
  _ArdupilotmegaMessagePostService_postSetMagOffsets_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postSetMagOffsets_args__isset;

class ArdupilotmegaMessagePostService_postSetMagOffsets_args {
 public:

  ArdupilotmegaMessagePostService_postSetMagOffsets_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postSetMagOffsets_args() throw() {}

  SetMagOffsets msg;

  _ArdupilotmegaMessagePostService_postSetMagOffsets_args__isset __isset;

  void __set_msg(const SetMagOffsets& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postSetMagOffsets_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postSetMagOffsets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postSetMagOffsets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postSetMagOffsets_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postSetMagOffsets_pargs() throw() {}

  const SetMagOffsets* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postSetMagOffsets_result__isset {
  _ArdupilotmegaMessagePostService_postSetMagOffsets_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postSetMagOffsets_result__isset;

class ArdupilotmegaMessagePostService_postSetMagOffsets_result {
 public:

  ArdupilotmegaMessagePostService_postSetMagOffsets_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postSetMagOffsets_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postSetMagOffsets_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postSetMagOffsets_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postSetMagOffsets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postSetMagOffsets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postSetMagOffsets_presult__isset {
  _ArdupilotmegaMessagePostService_postSetMagOffsets_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postSetMagOffsets_presult__isset;

class ArdupilotmegaMessagePostService_postSetMagOffsets_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postSetMagOffsets_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postSetMagOffsets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postMeminfo_args__isset {
  _ArdupilotmegaMessagePostService_postMeminfo_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postMeminfo_args__isset;

class ArdupilotmegaMessagePostService_postMeminfo_args {
 public:

  ArdupilotmegaMessagePostService_postMeminfo_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMeminfo_args() throw() {}

  Meminfo msg;

  _ArdupilotmegaMessagePostService_postMeminfo_args__isset __isset;

  void __set_msg(const Meminfo& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMeminfo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMeminfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMeminfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postMeminfo_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMeminfo_pargs() throw() {}

  const Meminfo* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMeminfo_result__isset {
  _ArdupilotmegaMessagePostService_postMeminfo_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMeminfo_result__isset;

class ArdupilotmegaMessagePostService_postMeminfo_result {
 public:

  ArdupilotmegaMessagePostService_postMeminfo_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMeminfo_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMeminfo_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMeminfo_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMeminfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMeminfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMeminfo_presult__isset {
  _ArdupilotmegaMessagePostService_postMeminfo_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMeminfo_presult__isset;

class ArdupilotmegaMessagePostService_postMeminfo_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMeminfo_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMeminfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postApAdc_args__isset {
  _ArdupilotmegaMessagePostService_postApAdc_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postApAdc_args__isset;

class ArdupilotmegaMessagePostService_postApAdc_args {
 public:

  ArdupilotmegaMessagePostService_postApAdc_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postApAdc_args() throw() {}

  ApAdc msg;

  _ArdupilotmegaMessagePostService_postApAdc_args__isset __isset;

  void __set_msg(const ApAdc& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postApAdc_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postApAdc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postApAdc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postApAdc_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postApAdc_pargs() throw() {}

  const ApAdc* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postApAdc_result__isset {
  _ArdupilotmegaMessagePostService_postApAdc_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postApAdc_result__isset;

class ArdupilotmegaMessagePostService_postApAdc_result {
 public:

  ArdupilotmegaMessagePostService_postApAdc_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postApAdc_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postApAdc_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postApAdc_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postApAdc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postApAdc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postApAdc_presult__isset {
  _ArdupilotmegaMessagePostService_postApAdc_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postApAdc_presult__isset;

class ArdupilotmegaMessagePostService_postApAdc_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postApAdc_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postApAdc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postDigicamConfigure_args__isset {
  _ArdupilotmegaMessagePostService_postDigicamConfigure_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postDigicamConfigure_args__isset;

class ArdupilotmegaMessagePostService_postDigicamConfigure_args {
 public:

  ArdupilotmegaMessagePostService_postDigicamConfigure_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postDigicamConfigure_args() throw() {}

  DigicamConfigure msg;

  _ArdupilotmegaMessagePostService_postDigicamConfigure_args__isset __isset;

  void __set_msg(const DigicamConfigure& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postDigicamConfigure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postDigicamConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postDigicamConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postDigicamConfigure_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postDigicamConfigure_pargs() throw() {}

  const DigicamConfigure* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postDigicamConfigure_result__isset {
  _ArdupilotmegaMessagePostService_postDigicamConfigure_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postDigicamConfigure_result__isset;

class ArdupilotmegaMessagePostService_postDigicamConfigure_result {
 public:

  ArdupilotmegaMessagePostService_postDigicamConfigure_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postDigicamConfigure_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postDigicamConfigure_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postDigicamConfigure_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postDigicamConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postDigicamConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postDigicamConfigure_presult__isset {
  _ArdupilotmegaMessagePostService_postDigicamConfigure_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postDigicamConfigure_presult__isset;

class ArdupilotmegaMessagePostService_postDigicamConfigure_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postDigicamConfigure_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postDigicamConfigure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postDigicamControl_args__isset {
  _ArdupilotmegaMessagePostService_postDigicamControl_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postDigicamControl_args__isset;

class ArdupilotmegaMessagePostService_postDigicamControl_args {
 public:

  ArdupilotmegaMessagePostService_postDigicamControl_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postDigicamControl_args() throw() {}

  DigicamControl msg;

  _ArdupilotmegaMessagePostService_postDigicamControl_args__isset __isset;

  void __set_msg(const DigicamControl& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postDigicamControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postDigicamControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postDigicamControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postDigicamControl_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postDigicamControl_pargs() throw() {}

  const DigicamControl* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postDigicamControl_result__isset {
  _ArdupilotmegaMessagePostService_postDigicamControl_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postDigicamControl_result__isset;

class ArdupilotmegaMessagePostService_postDigicamControl_result {
 public:

  ArdupilotmegaMessagePostService_postDigicamControl_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postDigicamControl_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postDigicamControl_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postDigicamControl_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postDigicamControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postDigicamControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postDigicamControl_presult__isset {
  _ArdupilotmegaMessagePostService_postDigicamControl_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postDigicamControl_presult__isset;

class ArdupilotmegaMessagePostService_postDigicamControl_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postDigicamControl_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postDigicamControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postMountConfigure_args__isset {
  _ArdupilotmegaMessagePostService_postMountConfigure_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postMountConfigure_args__isset;

class ArdupilotmegaMessagePostService_postMountConfigure_args {
 public:

  ArdupilotmegaMessagePostService_postMountConfigure_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMountConfigure_args() throw() {}

  MountConfigure msg;

  _ArdupilotmegaMessagePostService_postMountConfigure_args__isset __isset;

  void __set_msg(const MountConfigure& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMountConfigure_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMountConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMountConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postMountConfigure_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMountConfigure_pargs() throw() {}

  const MountConfigure* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMountConfigure_result__isset {
  _ArdupilotmegaMessagePostService_postMountConfigure_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMountConfigure_result__isset;

class ArdupilotmegaMessagePostService_postMountConfigure_result {
 public:

  ArdupilotmegaMessagePostService_postMountConfigure_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMountConfigure_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMountConfigure_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMountConfigure_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMountConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMountConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMountConfigure_presult__isset {
  _ArdupilotmegaMessagePostService_postMountConfigure_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMountConfigure_presult__isset;

class ArdupilotmegaMessagePostService_postMountConfigure_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMountConfigure_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMountConfigure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postMountControl_args__isset {
  _ArdupilotmegaMessagePostService_postMountControl_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postMountControl_args__isset;

class ArdupilotmegaMessagePostService_postMountControl_args {
 public:

  ArdupilotmegaMessagePostService_postMountControl_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMountControl_args() throw() {}

  MountControl msg;

  _ArdupilotmegaMessagePostService_postMountControl_args__isset __isset;

  void __set_msg(const MountControl& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMountControl_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMountControl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMountControl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postMountControl_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMountControl_pargs() throw() {}

  const MountControl* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMountControl_result__isset {
  _ArdupilotmegaMessagePostService_postMountControl_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMountControl_result__isset;

class ArdupilotmegaMessagePostService_postMountControl_result {
 public:

  ArdupilotmegaMessagePostService_postMountControl_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMountControl_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMountControl_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMountControl_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMountControl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMountControl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMountControl_presult__isset {
  _ArdupilotmegaMessagePostService_postMountControl_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMountControl_presult__isset;

class ArdupilotmegaMessagePostService_postMountControl_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMountControl_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMountControl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postMountStatus_args__isset {
  _ArdupilotmegaMessagePostService_postMountStatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postMountStatus_args__isset;

class ArdupilotmegaMessagePostService_postMountStatus_args {
 public:

  ArdupilotmegaMessagePostService_postMountStatus_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMountStatus_args() throw() {}

  MountStatus msg;

  _ArdupilotmegaMessagePostService_postMountStatus_args__isset __isset;

  void __set_msg(const MountStatus& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMountStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMountStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMountStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postMountStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMountStatus_pargs() throw() {}

  const MountStatus* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMountStatus_result__isset {
  _ArdupilotmegaMessagePostService_postMountStatus_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMountStatus_result__isset;

class ArdupilotmegaMessagePostService_postMountStatus_result {
 public:

  ArdupilotmegaMessagePostService_postMountStatus_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postMountStatus_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMountStatus_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postMountStatus_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postMountStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postMountStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postMountStatus_presult__isset {
  _ArdupilotmegaMessagePostService_postMountStatus_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postMountStatus_presult__isset;

class ArdupilotmegaMessagePostService_postMountStatus_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postMountStatus_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postMountStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postFencePoint_args__isset {
  _ArdupilotmegaMessagePostService_postFencePoint_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postFencePoint_args__isset;

class ArdupilotmegaMessagePostService_postFencePoint_args {
 public:

  ArdupilotmegaMessagePostService_postFencePoint_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postFencePoint_args() throw() {}

  FencePoint msg;

  _ArdupilotmegaMessagePostService_postFencePoint_args__isset __isset;

  void __set_msg(const FencePoint& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postFencePoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postFencePoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postFencePoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postFencePoint_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postFencePoint_pargs() throw() {}

  const FencePoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postFencePoint_result__isset {
  _ArdupilotmegaMessagePostService_postFencePoint_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postFencePoint_result__isset;

class ArdupilotmegaMessagePostService_postFencePoint_result {
 public:

  ArdupilotmegaMessagePostService_postFencePoint_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postFencePoint_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postFencePoint_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postFencePoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postFencePoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postFencePoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postFencePoint_presult__isset {
  _ArdupilotmegaMessagePostService_postFencePoint_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postFencePoint_presult__isset;

class ArdupilotmegaMessagePostService_postFencePoint_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postFencePoint_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postFencePoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postFenceFetchPoint_args__isset {
  _ArdupilotmegaMessagePostService_postFenceFetchPoint_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postFenceFetchPoint_args__isset;

class ArdupilotmegaMessagePostService_postFenceFetchPoint_args {
 public:

  ArdupilotmegaMessagePostService_postFenceFetchPoint_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postFenceFetchPoint_args() throw() {}

  FenceFetchPoint msg;

  _ArdupilotmegaMessagePostService_postFenceFetchPoint_args__isset __isset;

  void __set_msg(const FenceFetchPoint& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postFenceFetchPoint_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postFenceFetchPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postFenceFetchPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postFenceFetchPoint_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postFenceFetchPoint_pargs() throw() {}

  const FenceFetchPoint* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postFenceFetchPoint_result__isset {
  _ArdupilotmegaMessagePostService_postFenceFetchPoint_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postFenceFetchPoint_result__isset;

class ArdupilotmegaMessagePostService_postFenceFetchPoint_result {
 public:

  ArdupilotmegaMessagePostService_postFenceFetchPoint_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postFenceFetchPoint_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postFenceFetchPoint_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postFenceFetchPoint_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postFenceFetchPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postFenceFetchPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postFenceFetchPoint_presult__isset {
  _ArdupilotmegaMessagePostService_postFenceFetchPoint_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postFenceFetchPoint_presult__isset;

class ArdupilotmegaMessagePostService_postFenceFetchPoint_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postFenceFetchPoint_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postFenceFetchPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postFenceStatus_args__isset {
  _ArdupilotmegaMessagePostService_postFenceStatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postFenceStatus_args__isset;

class ArdupilotmegaMessagePostService_postFenceStatus_args {
 public:

  ArdupilotmegaMessagePostService_postFenceStatus_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postFenceStatus_args() throw() {}

  FenceStatus msg;

  _ArdupilotmegaMessagePostService_postFenceStatus_args__isset __isset;

  void __set_msg(const FenceStatus& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postFenceStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postFenceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postFenceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postFenceStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postFenceStatus_pargs() throw() {}

  const FenceStatus* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postFenceStatus_result__isset {
  _ArdupilotmegaMessagePostService_postFenceStatus_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postFenceStatus_result__isset;

class ArdupilotmegaMessagePostService_postFenceStatus_result {
 public:

  ArdupilotmegaMessagePostService_postFenceStatus_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postFenceStatus_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postFenceStatus_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postFenceStatus_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postFenceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postFenceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postFenceStatus_presult__isset {
  _ArdupilotmegaMessagePostService_postFenceStatus_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postFenceStatus_presult__isset;

class ArdupilotmegaMessagePostService_postFenceStatus_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postFenceStatus_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postFenceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postAhrs_args__isset {
  _ArdupilotmegaMessagePostService_postAhrs_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postAhrs_args__isset;

class ArdupilotmegaMessagePostService_postAhrs_args {
 public:

  ArdupilotmegaMessagePostService_postAhrs_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postAhrs_args() throw() {}

  Ahrs msg;

  _ArdupilotmegaMessagePostService_postAhrs_args__isset __isset;

  void __set_msg(const Ahrs& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postAhrs_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postAhrs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postAhrs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postAhrs_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postAhrs_pargs() throw() {}

  const Ahrs* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postAhrs_result__isset {
  _ArdupilotmegaMessagePostService_postAhrs_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postAhrs_result__isset;

class ArdupilotmegaMessagePostService_postAhrs_result {
 public:

  ArdupilotmegaMessagePostService_postAhrs_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postAhrs_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postAhrs_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postAhrs_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postAhrs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postAhrs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postAhrs_presult__isset {
  _ArdupilotmegaMessagePostService_postAhrs_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postAhrs_presult__isset;

class ArdupilotmegaMessagePostService_postAhrs_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postAhrs_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postAhrs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postSimstate_args__isset {
  _ArdupilotmegaMessagePostService_postSimstate_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postSimstate_args__isset;

class ArdupilotmegaMessagePostService_postSimstate_args {
 public:

  ArdupilotmegaMessagePostService_postSimstate_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postSimstate_args() throw() {}

  Simstate msg;

  _ArdupilotmegaMessagePostService_postSimstate_args__isset __isset;

  void __set_msg(const Simstate& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postSimstate_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postSimstate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postSimstate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postSimstate_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postSimstate_pargs() throw() {}

  const Simstate* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postSimstate_result__isset {
  _ArdupilotmegaMessagePostService_postSimstate_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postSimstate_result__isset;

class ArdupilotmegaMessagePostService_postSimstate_result {
 public:

  ArdupilotmegaMessagePostService_postSimstate_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postSimstate_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postSimstate_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postSimstate_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postSimstate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postSimstate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postSimstate_presult__isset {
  _ArdupilotmegaMessagePostService_postSimstate_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postSimstate_presult__isset;

class ArdupilotmegaMessagePostService_postSimstate_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postSimstate_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postSimstate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postHwstatus_args__isset {
  _ArdupilotmegaMessagePostService_postHwstatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postHwstatus_args__isset;

class ArdupilotmegaMessagePostService_postHwstatus_args {
 public:

  ArdupilotmegaMessagePostService_postHwstatus_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postHwstatus_args() throw() {}

  Hwstatus msg;

  _ArdupilotmegaMessagePostService_postHwstatus_args__isset __isset;

  void __set_msg(const Hwstatus& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postHwstatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postHwstatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postHwstatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postHwstatus_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postHwstatus_pargs() throw() {}

  const Hwstatus* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postHwstatus_result__isset {
  _ArdupilotmegaMessagePostService_postHwstatus_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postHwstatus_result__isset;

class ArdupilotmegaMessagePostService_postHwstatus_result {
 public:

  ArdupilotmegaMessagePostService_postHwstatus_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postHwstatus_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postHwstatus_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postHwstatus_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postHwstatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postHwstatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postHwstatus_presult__isset {
  _ArdupilotmegaMessagePostService_postHwstatus_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postHwstatus_presult__isset;

class ArdupilotmegaMessagePostService_postHwstatus_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postHwstatus_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postHwstatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postRadio_args__isset {
  _ArdupilotmegaMessagePostService_postRadio_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postRadio_args__isset;

class ArdupilotmegaMessagePostService_postRadio_args {
 public:

  ArdupilotmegaMessagePostService_postRadio_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postRadio_args() throw() {}

  Radio msg;

  _ArdupilotmegaMessagePostService_postRadio_args__isset __isset;

  void __set_msg(const Radio& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postRadio_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postRadio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postRadio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postRadio_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postRadio_pargs() throw() {}

  const Radio* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postRadio_result__isset {
  _ArdupilotmegaMessagePostService_postRadio_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postRadio_result__isset;

class ArdupilotmegaMessagePostService_postRadio_result {
 public:

  ArdupilotmegaMessagePostService_postRadio_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postRadio_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postRadio_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postRadio_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postRadio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postRadio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postRadio_presult__isset {
  _ArdupilotmegaMessagePostService_postRadio_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postRadio_presult__isset;

class ArdupilotmegaMessagePostService_postRadio_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postRadio_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postRadio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postLimitsStatus_args__isset {
  _ArdupilotmegaMessagePostService_postLimitsStatus_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postLimitsStatus_args__isset;

class ArdupilotmegaMessagePostService_postLimitsStatus_args {
 public:

  ArdupilotmegaMessagePostService_postLimitsStatus_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postLimitsStatus_args() throw() {}

  LimitsStatus msg;

  _ArdupilotmegaMessagePostService_postLimitsStatus_args__isset __isset;

  void __set_msg(const LimitsStatus& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postLimitsStatus_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postLimitsStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postLimitsStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postLimitsStatus_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postLimitsStatus_pargs() throw() {}

  const LimitsStatus* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postLimitsStatus_result__isset {
  _ArdupilotmegaMessagePostService_postLimitsStatus_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postLimitsStatus_result__isset;

class ArdupilotmegaMessagePostService_postLimitsStatus_result {
 public:

  ArdupilotmegaMessagePostService_postLimitsStatus_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postLimitsStatus_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postLimitsStatus_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postLimitsStatus_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postLimitsStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postLimitsStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postLimitsStatus_presult__isset {
  _ArdupilotmegaMessagePostService_postLimitsStatus_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postLimitsStatus_presult__isset;

class ArdupilotmegaMessagePostService_postLimitsStatus_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postLimitsStatus_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postLimitsStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postWind_args__isset {
  _ArdupilotmegaMessagePostService_postWind_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postWind_args__isset;

class ArdupilotmegaMessagePostService_postWind_args {
 public:

  ArdupilotmegaMessagePostService_postWind_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postWind_args() throw() {}

  Wind msg;

  _ArdupilotmegaMessagePostService_postWind_args__isset __isset;

  void __set_msg(const Wind& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postWind_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postWind_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postWind_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postWind_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postWind_pargs() throw() {}

  const Wind* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postWind_result__isset {
  _ArdupilotmegaMessagePostService_postWind_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postWind_result__isset;

class ArdupilotmegaMessagePostService_postWind_result {
 public:

  ArdupilotmegaMessagePostService_postWind_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postWind_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postWind_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postWind_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postWind_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postWind_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postWind_presult__isset {
  _ArdupilotmegaMessagePostService_postWind_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postWind_presult__isset;

class ArdupilotmegaMessagePostService_postWind_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postWind_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postWind_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postData16_args__isset {
  _ArdupilotmegaMessagePostService_postData16_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postData16_args__isset;

class ArdupilotmegaMessagePostService_postData16_args {
 public:

  ArdupilotmegaMessagePostService_postData16_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData16_args() throw() {}

  Data16 msg;

  _ArdupilotmegaMessagePostService_postData16_args__isset __isset;

  void __set_msg(const Data16& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData16_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postData16_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData16_pargs() throw() {}

  const Data16* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData16_result__isset {
  _ArdupilotmegaMessagePostService_postData16_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData16_result__isset;

class ArdupilotmegaMessagePostService_postData16_result {
 public:

  ArdupilotmegaMessagePostService_postData16_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData16_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData16_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData16_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData16_presult__isset {
  _ArdupilotmegaMessagePostService_postData16_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData16_presult__isset;

class ArdupilotmegaMessagePostService_postData16_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData16_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postData32_args__isset {
  _ArdupilotmegaMessagePostService_postData32_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postData32_args__isset;

class ArdupilotmegaMessagePostService_postData32_args {
 public:

  ArdupilotmegaMessagePostService_postData32_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData32_args() throw() {}

  Data32 msg;

  _ArdupilotmegaMessagePostService_postData32_args__isset __isset;

  void __set_msg(const Data32& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData32_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postData32_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData32_pargs() throw() {}

  const Data32* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData32_result__isset {
  _ArdupilotmegaMessagePostService_postData32_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData32_result__isset;

class ArdupilotmegaMessagePostService_postData32_result {
 public:

  ArdupilotmegaMessagePostService_postData32_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData32_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData32_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData32_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData32_presult__isset {
  _ArdupilotmegaMessagePostService_postData32_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData32_presult__isset;

class ArdupilotmegaMessagePostService_postData32_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData32_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postData64_args__isset {
  _ArdupilotmegaMessagePostService_postData64_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postData64_args__isset;

class ArdupilotmegaMessagePostService_postData64_args {
 public:

  ArdupilotmegaMessagePostService_postData64_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData64_args() throw() {}

  Data64 msg;

  _ArdupilotmegaMessagePostService_postData64_args__isset __isset;

  void __set_msg(const Data64& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData64_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postData64_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData64_pargs() throw() {}

  const Data64* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData64_result__isset {
  _ArdupilotmegaMessagePostService_postData64_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData64_result__isset;

class ArdupilotmegaMessagePostService_postData64_result {
 public:

  ArdupilotmegaMessagePostService_postData64_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData64_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData64_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData64_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData64_presult__isset {
  _ArdupilotmegaMessagePostService_postData64_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData64_presult__isset;

class ArdupilotmegaMessagePostService_postData64_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData64_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postData96_args__isset {
  _ArdupilotmegaMessagePostService_postData96_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postData96_args__isset;

class ArdupilotmegaMessagePostService_postData96_args {
 public:

  ArdupilotmegaMessagePostService_postData96_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData96_args() throw() {}

  Data96 msg;

  _ArdupilotmegaMessagePostService_postData96_args__isset __isset;

  void __set_msg(const Data96& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData96_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData96_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData96_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postData96_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData96_pargs() throw() {}

  const Data96* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData96_result__isset {
  _ArdupilotmegaMessagePostService_postData96_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData96_result__isset;

class ArdupilotmegaMessagePostService_postData96_result {
 public:

  ArdupilotmegaMessagePostService_postData96_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postData96_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData96_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postData96_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postData96_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postData96_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postData96_presult__isset {
  _ArdupilotmegaMessagePostService_postData96_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postData96_presult__isset;

class ArdupilotmegaMessagePostService_postData96_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postData96_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postData96_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArdupilotmegaMessagePostService_postRangefinder_args__isset {
  _ArdupilotmegaMessagePostService_postRangefinder_args__isset() : msg(false) {}
  bool msg;
} _ArdupilotmegaMessagePostService_postRangefinder_args__isset;

class ArdupilotmegaMessagePostService_postRangefinder_args {
 public:

  ArdupilotmegaMessagePostService_postRangefinder_args() {
  }

  virtual ~ArdupilotmegaMessagePostService_postRangefinder_args() throw() {}

  Rangefinder msg;

  _ArdupilotmegaMessagePostService_postRangefinder_args__isset __isset;

  void __set_msg(const Rangefinder& val) {
    msg = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postRangefinder_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postRangefinder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postRangefinder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArdupilotmegaMessagePostService_postRangefinder_pargs {
 public:


  virtual ~ArdupilotmegaMessagePostService_postRangefinder_pargs() throw() {}

  const Rangefinder* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postRangefinder_result__isset {
  _ArdupilotmegaMessagePostService_postRangefinder_result__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postRangefinder_result__isset;

class ArdupilotmegaMessagePostService_postRangefinder_result {
 public:

  ArdupilotmegaMessagePostService_postRangefinder_result() {
  }

  virtual ~ArdupilotmegaMessagePostService_postRangefinder_result() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postRangefinder_result__isset __isset;

  void __set_err(const  ::mavlink::thrift::InvalidMavlinkMessage& val) {
    err = val;
  }

  bool operator == (const ArdupilotmegaMessagePostService_postRangefinder_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArdupilotmegaMessagePostService_postRangefinder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArdupilotmegaMessagePostService_postRangefinder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArdupilotmegaMessagePostService_postRangefinder_presult__isset {
  _ArdupilotmegaMessagePostService_postRangefinder_presult__isset() : err(false) {}
  bool err;
} _ArdupilotmegaMessagePostService_postRangefinder_presult__isset;

class ArdupilotmegaMessagePostService_postRangefinder_presult {
 public:


  virtual ~ArdupilotmegaMessagePostService_postRangefinder_presult() throw() {}

   ::mavlink::thrift::InvalidMavlinkMessage err;

  _ArdupilotmegaMessagePostService_postRangefinder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ArdupilotmegaMessagePostServiceClient : virtual public ArdupilotmegaMessagePostServiceIf, public  ::mavlink::thrift::CommonMessagePostServiceClient {
 public:
  ArdupilotmegaMessagePostServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::mavlink::thrift::CommonMessagePostServiceClient(prot, prot) {}
  ArdupilotmegaMessagePostServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::mavlink::thrift::CommonMessagePostServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void postSensorOffsets(const SensorOffsets& msg);
  void send_postSensorOffsets(const SensorOffsets& msg);
  void recv_postSensorOffsets();
  void postSetMagOffsets(const SetMagOffsets& msg);
  void send_postSetMagOffsets(const SetMagOffsets& msg);
  void recv_postSetMagOffsets();
  void postMeminfo(const Meminfo& msg);
  void send_postMeminfo(const Meminfo& msg);
  void recv_postMeminfo();
  void postApAdc(const ApAdc& msg);
  void send_postApAdc(const ApAdc& msg);
  void recv_postApAdc();
  void postDigicamConfigure(const DigicamConfigure& msg);
  void send_postDigicamConfigure(const DigicamConfigure& msg);
  void recv_postDigicamConfigure();
  void postDigicamControl(const DigicamControl& msg);
  void send_postDigicamControl(const DigicamControl& msg);
  void recv_postDigicamControl();
  void postMountConfigure(const MountConfigure& msg);
  void send_postMountConfigure(const MountConfigure& msg);
  void recv_postMountConfigure();
  void postMountControl(const MountControl& msg);
  void send_postMountControl(const MountControl& msg);
  void recv_postMountControl();
  void postMountStatus(const MountStatus& msg);
  void send_postMountStatus(const MountStatus& msg);
  void recv_postMountStatus();
  void postFencePoint(const FencePoint& msg);
  void send_postFencePoint(const FencePoint& msg);
  void recv_postFencePoint();
  void postFenceFetchPoint(const FenceFetchPoint& msg);
  void send_postFenceFetchPoint(const FenceFetchPoint& msg);
  void recv_postFenceFetchPoint();
  void postFenceStatus(const FenceStatus& msg);
  void send_postFenceStatus(const FenceStatus& msg);
  void recv_postFenceStatus();
  void postAhrs(const Ahrs& msg);
  void send_postAhrs(const Ahrs& msg);
  void recv_postAhrs();
  void postSimstate(const Simstate& msg);
  void send_postSimstate(const Simstate& msg);
  void recv_postSimstate();
  void postHwstatus(const Hwstatus& msg);
  void send_postHwstatus(const Hwstatus& msg);
  void recv_postHwstatus();
  void postRadio(const Radio& msg);
  void send_postRadio(const Radio& msg);
  void recv_postRadio();
  void postLimitsStatus(const LimitsStatus& msg);
  void send_postLimitsStatus(const LimitsStatus& msg);
  void recv_postLimitsStatus();
  void postWind(const Wind& msg);
  void send_postWind(const Wind& msg);
  void recv_postWind();
  void postData16(const Data16& msg);
  void send_postData16(const Data16& msg);
  void recv_postData16();
  void postData32(const Data32& msg);
  void send_postData32(const Data32& msg);
  void recv_postData32();
  void postData64(const Data64& msg);
  void send_postData64(const Data64& msg);
  void recv_postData64();
  void postData96(const Data96& msg);
  void send_postData96(const Data96& msg);
  void recv_postData96();
  void postRangefinder(const Rangefinder& msg);
  void send_postRangefinder(const Rangefinder& msg);
  void recv_postRangefinder();
};

class ArdupilotmegaMessagePostServiceProcessor : public  ::mavlink::thrift::CommonMessagePostServiceProcessor {
 protected:
  boost::shared_ptr<ArdupilotmegaMessagePostServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ArdupilotmegaMessagePostServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_postSensorOffsets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSetMagOffsets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMeminfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postApAdc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postDigicamConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postDigicamControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMountConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMountControl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postMountStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postFencePoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postFenceFetchPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postFenceStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postAhrs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSimstate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postHwstatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRadio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postLimitsStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postWind(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postData16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postData32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postData64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postData96(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postRangefinder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ArdupilotmegaMessagePostServiceProcessor(boost::shared_ptr<ArdupilotmegaMessagePostServiceIf> iface) :
     ::mavlink::thrift::CommonMessagePostServiceProcessor(iface),
    iface_(iface) {
    processMap_["postSensorOffsets"] = &ArdupilotmegaMessagePostServiceProcessor::process_postSensorOffsets;
    processMap_["postSetMagOffsets"] = &ArdupilotmegaMessagePostServiceProcessor::process_postSetMagOffsets;
    processMap_["postMeminfo"] = &ArdupilotmegaMessagePostServiceProcessor::process_postMeminfo;
    processMap_["postApAdc"] = &ArdupilotmegaMessagePostServiceProcessor::process_postApAdc;
    processMap_["postDigicamConfigure"] = &ArdupilotmegaMessagePostServiceProcessor::process_postDigicamConfigure;
    processMap_["postDigicamControl"] = &ArdupilotmegaMessagePostServiceProcessor::process_postDigicamControl;
    processMap_["postMountConfigure"] = &ArdupilotmegaMessagePostServiceProcessor::process_postMountConfigure;
    processMap_["postMountControl"] = &ArdupilotmegaMessagePostServiceProcessor::process_postMountControl;
    processMap_["postMountStatus"] = &ArdupilotmegaMessagePostServiceProcessor::process_postMountStatus;
    processMap_["postFencePoint"] = &ArdupilotmegaMessagePostServiceProcessor::process_postFencePoint;
    processMap_["postFenceFetchPoint"] = &ArdupilotmegaMessagePostServiceProcessor::process_postFenceFetchPoint;
    processMap_["postFenceStatus"] = &ArdupilotmegaMessagePostServiceProcessor::process_postFenceStatus;
    processMap_["postAhrs"] = &ArdupilotmegaMessagePostServiceProcessor::process_postAhrs;
    processMap_["postSimstate"] = &ArdupilotmegaMessagePostServiceProcessor::process_postSimstate;
    processMap_["postHwstatus"] = &ArdupilotmegaMessagePostServiceProcessor::process_postHwstatus;
    processMap_["postRadio"] = &ArdupilotmegaMessagePostServiceProcessor::process_postRadio;
    processMap_["postLimitsStatus"] = &ArdupilotmegaMessagePostServiceProcessor::process_postLimitsStatus;
    processMap_["postWind"] = &ArdupilotmegaMessagePostServiceProcessor::process_postWind;
    processMap_["postData16"] = &ArdupilotmegaMessagePostServiceProcessor::process_postData16;
    processMap_["postData32"] = &ArdupilotmegaMessagePostServiceProcessor::process_postData32;
    processMap_["postData64"] = &ArdupilotmegaMessagePostServiceProcessor::process_postData64;
    processMap_["postData96"] = &ArdupilotmegaMessagePostServiceProcessor::process_postData96;
    processMap_["postRangefinder"] = &ArdupilotmegaMessagePostServiceProcessor::process_postRangefinder;
  }

  virtual ~ArdupilotmegaMessagePostServiceProcessor() {}
};

class ArdupilotmegaMessagePostServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ArdupilotmegaMessagePostServiceProcessorFactory(const ::boost::shared_ptr< ArdupilotmegaMessagePostServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ArdupilotmegaMessagePostServiceIfFactory > handlerFactory_;
};

class ArdupilotmegaMessagePostServiceMultiface : virtual public ArdupilotmegaMessagePostServiceIf, public  ::mavlink::thrift::CommonMessagePostServiceMultiface {
 public:
  ArdupilotmegaMessagePostServiceMultiface(std::vector<boost::shared_ptr<ArdupilotmegaMessagePostServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ArdupilotmegaMessagePostServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::mavlink::thrift::CommonMessagePostServiceMultiface::add(*iter);
    }
  }
  virtual ~ArdupilotmegaMessagePostServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ArdupilotmegaMessagePostServiceIf> > ifaces_;
  ArdupilotmegaMessagePostServiceMultiface() {}
  void add(boost::shared_ptr<ArdupilotmegaMessagePostServiceIf> iface) {
     ::mavlink::thrift::CommonMessagePostServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void postSensorOffsets(const SensorOffsets& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSensorOffsets(msg);
    }
    ifaces_[i]->postSensorOffsets(msg);
  }

  void postSetMagOffsets(const SetMagOffsets& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSetMagOffsets(msg);
    }
    ifaces_[i]->postSetMagOffsets(msg);
  }

  void postMeminfo(const Meminfo& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMeminfo(msg);
    }
    ifaces_[i]->postMeminfo(msg);
  }

  void postApAdc(const ApAdc& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postApAdc(msg);
    }
    ifaces_[i]->postApAdc(msg);
  }

  void postDigicamConfigure(const DigicamConfigure& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postDigicamConfigure(msg);
    }
    ifaces_[i]->postDigicamConfigure(msg);
  }

  void postDigicamControl(const DigicamControl& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postDigicamControl(msg);
    }
    ifaces_[i]->postDigicamControl(msg);
  }

  void postMountConfigure(const MountConfigure& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMountConfigure(msg);
    }
    ifaces_[i]->postMountConfigure(msg);
  }

  void postMountControl(const MountControl& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMountControl(msg);
    }
    ifaces_[i]->postMountControl(msg);
  }

  void postMountStatus(const MountStatus& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postMountStatus(msg);
    }
    ifaces_[i]->postMountStatus(msg);
  }

  void postFencePoint(const FencePoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postFencePoint(msg);
    }
    ifaces_[i]->postFencePoint(msg);
  }

  void postFenceFetchPoint(const FenceFetchPoint& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postFenceFetchPoint(msg);
    }
    ifaces_[i]->postFenceFetchPoint(msg);
  }

  void postFenceStatus(const FenceStatus& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postFenceStatus(msg);
    }
    ifaces_[i]->postFenceStatus(msg);
  }

  void postAhrs(const Ahrs& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postAhrs(msg);
    }
    ifaces_[i]->postAhrs(msg);
  }

  void postSimstate(const Simstate& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSimstate(msg);
    }
    ifaces_[i]->postSimstate(msg);
  }

  void postHwstatus(const Hwstatus& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postHwstatus(msg);
    }
    ifaces_[i]->postHwstatus(msg);
  }

  void postRadio(const Radio& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRadio(msg);
    }
    ifaces_[i]->postRadio(msg);
  }

  void postLimitsStatus(const LimitsStatus& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postLimitsStatus(msg);
    }
    ifaces_[i]->postLimitsStatus(msg);
  }

  void postWind(const Wind& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postWind(msg);
    }
    ifaces_[i]->postWind(msg);
  }

  void postData16(const Data16& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postData16(msg);
    }
    ifaces_[i]->postData16(msg);
  }

  void postData32(const Data32& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postData32(msg);
    }
    ifaces_[i]->postData32(msg);
  }

  void postData64(const Data64& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postData64(msg);
    }
    ifaces_[i]->postData64(msg);
  }

  void postData96(const Data96& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postData96(msg);
    }
    ifaces_[i]->postData96(msg);
  }

  void postRangefinder(const Rangefinder& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postRangefinder(msg);
    }
    ifaces_[i]->postRangefinder(msg);
  }

};

}} // namespace

#endif
