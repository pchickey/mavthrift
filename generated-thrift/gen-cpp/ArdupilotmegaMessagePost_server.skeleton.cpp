// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ArdupilotmegaMessagePost.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mavlink::thrift;

class ArdupilotmegaMessagePostHandler : virtual public ArdupilotmegaMessagePostIf {
 public:
  ArdupilotmegaMessagePostHandler() {
    // Your initialization goes here
  }

  void postSensorOffsets(const SensorOffsets& msg) {
    // Your implementation goes here
    printf("postSensorOffsets\n");
  }

  void postSetMagOffsets(const SetMagOffsets& msg) {
    // Your implementation goes here
    printf("postSetMagOffsets\n");
  }

  void postMeminfo(const Meminfo& msg) {
    // Your implementation goes here
    printf("postMeminfo\n");
  }

  void postApAdc(const ApAdc& msg) {
    // Your implementation goes here
    printf("postApAdc\n");
  }

  void postDigicamConfigure(const DigicamConfigure& msg) {
    // Your implementation goes here
    printf("postDigicamConfigure\n");
  }

  void postDigicamControl(const DigicamControl& msg) {
    // Your implementation goes here
    printf("postDigicamControl\n");
  }

  void postMountConfigure(const MountConfigure& msg) {
    // Your implementation goes here
    printf("postMountConfigure\n");
  }

  void postMountControl(const MountControl& msg) {
    // Your implementation goes here
    printf("postMountControl\n");
  }

  void postMountStatus(const MountStatus& msg) {
    // Your implementation goes here
    printf("postMountStatus\n");
  }

  void postFencePoint(const FencePoint& msg) {
    // Your implementation goes here
    printf("postFencePoint\n");
  }

  void postFenceFetchPoint(const FenceFetchPoint& msg) {
    // Your implementation goes here
    printf("postFenceFetchPoint\n");
  }

  void postFenceStatus(const FenceStatus& msg) {
    // Your implementation goes here
    printf("postFenceStatus\n");
  }

  void postAhrs(const Ahrs& msg) {
    // Your implementation goes here
    printf("postAhrs\n");
  }

  void postSimstate(const Simstate& msg) {
    // Your implementation goes here
    printf("postSimstate\n");
  }

  void postHwstatus(const Hwstatus& msg) {
    // Your implementation goes here
    printf("postHwstatus\n");
  }

  void postRadio(const Radio& msg) {
    // Your implementation goes here
    printf("postRadio\n");
  }

  void postLimitsStatus(const LimitsStatus& msg) {
    // Your implementation goes here
    printf("postLimitsStatus\n");
  }

  void postWind(const Wind& msg) {
    // Your implementation goes here
    printf("postWind\n");
  }

  void postData16(const Data16& msg) {
    // Your implementation goes here
    printf("postData16\n");
  }

  void postData32(const Data32& msg) {
    // Your implementation goes here
    printf("postData32\n");
  }

  void postData64(const Data64& msg) {
    // Your implementation goes here
    printf("postData64\n");
  }

  void postData96(const Data96& msg) {
    // Your implementation goes here
    printf("postData96\n");
  }

  void postRangefinder(const Rangefinder& msg) {
    // Your implementation goes here
    printf("postRangefinder\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ArdupilotmegaMessagePostHandler> handler(new ArdupilotmegaMessagePostHandler());
  shared_ptr<TProcessor> processor(new ArdupilotmegaMessagePostProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

