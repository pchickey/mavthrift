// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CommonMessageFetchService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mavlink::thrift;

class CommonMessageFetchServiceHandler : virtual public CommonMessageFetchServiceIf {
 public:
  CommonMessageFetchServiceHandler() {
    // Your initialization goes here
  }

  void availableMessages(std::map<CommonMessageTypes::type, int32_t> & _return) {
    // Your implementation goes here
    printf("availableMessages\n");
  }

  void fetchHeartbeat(const std::vector<Heartbeat> & msg) {
    // Your implementation goes here
    printf("fetchHeartbeat\n");
  }

  void fetchSysStatus(const std::vector<SysStatus> & msg) {
    // Your implementation goes here
    printf("fetchSysStatus\n");
  }

  void fetchSystemTime(const std::vector<SystemTime> & msg) {
    // Your implementation goes here
    printf("fetchSystemTime\n");
  }

  void fetchPing(const std::vector<Ping> & msg) {
    // Your implementation goes here
    printf("fetchPing\n");
  }

  void fetchChangeOperatorControl(const std::vector<ChangeOperatorControl> & msg) {
    // Your implementation goes here
    printf("fetchChangeOperatorControl\n");
  }

  void fetchChangeOperatorControlAck(const std::vector<ChangeOperatorControlAck> & msg) {
    // Your implementation goes here
    printf("fetchChangeOperatorControlAck\n");
  }

  void fetchAuthKey(const std::vector<AuthKey> & msg) {
    // Your implementation goes here
    printf("fetchAuthKey\n");
  }

  void fetchSetMode(const std::vector<SetMode> & msg) {
    // Your implementation goes here
    printf("fetchSetMode\n");
  }

  void fetchParamRequestRead(const std::vector<ParamRequestRead> & msg) {
    // Your implementation goes here
    printf("fetchParamRequestRead\n");
  }

  void fetchParamRequestList(const std::vector<ParamRequestList> & msg) {
    // Your implementation goes here
    printf("fetchParamRequestList\n");
  }

  void fetchParamValue(const std::vector<ParamValue> & msg) {
    // Your implementation goes here
    printf("fetchParamValue\n");
  }

  void fetchParamSet(const std::vector<ParamSet> & msg) {
    // Your implementation goes here
    printf("fetchParamSet\n");
  }

  void fetchGpsRawInt(const std::vector<GpsRawInt> & msg) {
    // Your implementation goes here
    printf("fetchGpsRawInt\n");
  }

  void fetchGpsStatus(const std::vector<GpsStatus> & msg) {
    // Your implementation goes here
    printf("fetchGpsStatus\n");
  }

  void fetchScaledImu(const std::vector<ScaledImu> & msg) {
    // Your implementation goes here
    printf("fetchScaledImu\n");
  }

  void fetchRawImu(const std::vector<RawImu> & msg) {
    // Your implementation goes here
    printf("fetchRawImu\n");
  }

  void fetchRawPressure(const std::vector<RawPressure> & msg) {
    // Your implementation goes here
    printf("fetchRawPressure\n");
  }

  void fetchScaledPressure(const std::vector<ScaledPressure> & msg) {
    // Your implementation goes here
    printf("fetchScaledPressure\n");
  }

  void fetchAttitude(const std::vector<Attitude> & msg) {
    // Your implementation goes here
    printf("fetchAttitude\n");
  }

  void fetchAttitudeQuaternion(const std::vector<AttitudeQuaternion> & msg) {
    // Your implementation goes here
    printf("fetchAttitudeQuaternion\n");
  }

  void fetchLocalPositionNed(const std::vector<LocalPositionNed> & msg) {
    // Your implementation goes here
    printf("fetchLocalPositionNed\n");
  }

  void fetchGlobalPositionInt(const std::vector<GlobalPositionInt> & msg) {
    // Your implementation goes here
    printf("fetchGlobalPositionInt\n");
  }

  void fetchRcChannelsScaled(const std::vector<RcChannelsScaled> & msg) {
    // Your implementation goes here
    printf("fetchRcChannelsScaled\n");
  }

  void fetchRcChannelsRaw(const std::vector<RcChannelsRaw> & msg) {
    // Your implementation goes here
    printf("fetchRcChannelsRaw\n");
  }

  void fetchServoOutputRaw(const std::vector<ServoOutputRaw> & msg) {
    // Your implementation goes here
    printf("fetchServoOutputRaw\n");
  }

  void fetchMissionRequestPartialList(const std::vector<MissionRequestPartialList> & msg) {
    // Your implementation goes here
    printf("fetchMissionRequestPartialList\n");
  }

  void fetchMissionWritePartialList(const std::vector<MissionWritePartialList> & msg) {
    // Your implementation goes here
    printf("fetchMissionWritePartialList\n");
  }

  void fetchMissionItem(const std::vector<MissionItem> & msg) {
    // Your implementation goes here
    printf("fetchMissionItem\n");
  }

  void fetchMissionRequest(const std::vector<MissionRequest> & msg) {
    // Your implementation goes here
    printf("fetchMissionRequest\n");
  }

  void fetchMissionSetCurrent(const std::vector<MissionSetCurrent> & msg) {
    // Your implementation goes here
    printf("fetchMissionSetCurrent\n");
  }

  void fetchMissionCurrent(const std::vector<MissionCurrent> & msg) {
    // Your implementation goes here
    printf("fetchMissionCurrent\n");
  }

  void fetchMissionRequestList(const std::vector<MissionRequestList> & msg) {
    // Your implementation goes here
    printf("fetchMissionRequestList\n");
  }

  void fetchMissionCount(const std::vector<MissionCount> & msg) {
    // Your implementation goes here
    printf("fetchMissionCount\n");
  }

  void fetchMissionClearAll(const std::vector<MissionClearAll> & msg) {
    // Your implementation goes here
    printf("fetchMissionClearAll\n");
  }

  void fetchMissionItemReached(const std::vector<MissionItemReached> & msg) {
    // Your implementation goes here
    printf("fetchMissionItemReached\n");
  }

  void fetchMissionAck(const std::vector<MissionAck> & msg) {
    // Your implementation goes here
    printf("fetchMissionAck\n");
  }

  void fetchSetGpsGlobalOrigin(const std::vector<SetGpsGlobalOrigin> & msg) {
    // Your implementation goes here
    printf("fetchSetGpsGlobalOrigin\n");
  }

  void fetchGpsGlobalOrigin(const std::vector<GpsGlobalOrigin> & msg) {
    // Your implementation goes here
    printf("fetchGpsGlobalOrigin\n");
  }

  void fetchSetLocalPositionSetpoint(const std::vector<SetLocalPositionSetpoint> & msg) {
    // Your implementation goes here
    printf("fetchSetLocalPositionSetpoint\n");
  }

  void fetchLocalPositionSetpoint(const std::vector<LocalPositionSetpoint> & msg) {
    // Your implementation goes here
    printf("fetchLocalPositionSetpoint\n");
  }

  void fetchGlobalPositionSetpointInt(const std::vector<GlobalPositionSetpointInt> & msg) {
    // Your implementation goes here
    printf("fetchGlobalPositionSetpointInt\n");
  }

  void fetchSetGlobalPositionSetpointInt(const std::vector<SetGlobalPositionSetpointInt> & msg) {
    // Your implementation goes here
    printf("fetchSetGlobalPositionSetpointInt\n");
  }

  void fetchSafetySetAllowedArea(const std::vector<SafetySetAllowedArea> & msg) {
    // Your implementation goes here
    printf("fetchSafetySetAllowedArea\n");
  }

  void fetchSafetyAllowedArea(const std::vector<SafetyAllowedArea> & msg) {
    // Your implementation goes here
    printf("fetchSafetyAllowedArea\n");
  }

  void fetchSetRollPitchYawThrust(const std::vector<SetRollPitchYawThrust> & msg) {
    // Your implementation goes here
    printf("fetchSetRollPitchYawThrust\n");
  }

  void fetchSetRollPitchYawSpeedThrust(const std::vector<SetRollPitchYawSpeedThrust> & msg) {
    // Your implementation goes here
    printf("fetchSetRollPitchYawSpeedThrust\n");
  }

  void fetchRollPitchYawThrustSetpoint(const std::vector<RollPitchYawThrustSetpoint> & msg) {
    // Your implementation goes here
    printf("fetchRollPitchYawThrustSetpoint\n");
  }

  void fetchRollPitchYawSpeedThrustSetpoint(const std::vector<RollPitchYawSpeedThrustSetpoint> & msg) {
    // Your implementation goes here
    printf("fetchRollPitchYawSpeedThrustSetpoint\n");
  }

  void fetchSetQuadMotorsSetpoint(const std::vector<SetQuadMotorsSetpoint> & msg) {
    // Your implementation goes here
    printf("fetchSetQuadMotorsSetpoint\n");
  }

  void fetchSetQuadSwarmRollPitchYawThrust(const std::vector<SetQuadSwarmRollPitchYawThrust> & msg) {
    // Your implementation goes here
    printf("fetchSetQuadSwarmRollPitchYawThrust\n");
  }

  void fetchNavControllerOutput(const std::vector<NavControllerOutput> & msg) {
    // Your implementation goes here
    printf("fetchNavControllerOutput\n");
  }

  void fetchSetQuadSwarmLedRollPitchYawThrust(const std::vector<SetQuadSwarmLedRollPitchYawThrust> & msg) {
    // Your implementation goes here
    printf("fetchSetQuadSwarmLedRollPitchYawThrust\n");
  }

  void fetchStateCorrection(const std::vector<StateCorrection> & msg) {
    // Your implementation goes here
    printf("fetchStateCorrection\n");
  }

  void fetchRequestDataStream(const std::vector<RequestDataStream> & msg) {
    // Your implementation goes here
    printf("fetchRequestDataStream\n");
  }

  void fetchDataStream(const std::vector<DataStream> & msg) {
    // Your implementation goes here
    printf("fetchDataStream\n");
  }

  void fetchManualControl(const std::vector<ManualControl> & msg) {
    // Your implementation goes here
    printf("fetchManualControl\n");
  }

  void fetchRcChannelsOverride(const std::vector<RcChannelsOverride> & msg) {
    // Your implementation goes here
    printf("fetchRcChannelsOverride\n");
  }

  void fetchVfrHud(const std::vector<VfrHud> & msg) {
    // Your implementation goes here
    printf("fetchVfrHud\n");
  }

  void fetchCommandLong(const std::vector<CommandLong> & msg) {
    // Your implementation goes here
    printf("fetchCommandLong\n");
  }

  void fetchCommandAck(const std::vector<CommandAck> & msg) {
    // Your implementation goes here
    printf("fetchCommandAck\n");
  }

  void fetchRollPitchYawRatesThrustSetpoint(const std::vector<RollPitchYawRatesThrustSetpoint> & msg) {
    // Your implementation goes here
    printf("fetchRollPitchYawRatesThrustSetpoint\n");
  }

  void fetchManualSetpoint(const std::vector<ManualSetpoint> & msg) {
    // Your implementation goes here
    printf("fetchManualSetpoint\n");
  }

  void fetchLocalPositionNedSystemGlobalOffset(const std::vector<LocalPositionNedSystemGlobalOffset> & msg) {
    // Your implementation goes here
    printf("fetchLocalPositionNedSystemGlobalOffset\n");
  }

  void fetchHilState(const std::vector<HilState> & msg) {
    // Your implementation goes here
    printf("fetchHilState\n");
  }

  void fetchHilControls(const std::vector<HilControls> & msg) {
    // Your implementation goes here
    printf("fetchHilControls\n");
  }

  void fetchHilRcInputsRaw(const std::vector<HilRcInputsRaw> & msg) {
    // Your implementation goes here
    printf("fetchHilRcInputsRaw\n");
  }

  void fetchOpticalFlow(const std::vector<OpticalFlow> & msg) {
    // Your implementation goes here
    printf("fetchOpticalFlow\n");
  }

  void fetchGlobalVisionPositionEstimate(const std::vector<GlobalVisionPositionEstimate> & msg) {
    // Your implementation goes here
    printf("fetchGlobalVisionPositionEstimate\n");
  }

  void fetchVisionPositionEstimate(const std::vector<VisionPositionEstimate> & msg) {
    // Your implementation goes here
    printf("fetchVisionPositionEstimate\n");
  }

  void fetchVisionSpeedEstimate(const std::vector<VisionSpeedEstimate> & msg) {
    // Your implementation goes here
    printf("fetchVisionSpeedEstimate\n");
  }

  void fetchViconPositionEstimate(const std::vector<ViconPositionEstimate> & msg) {
    // Your implementation goes here
    printf("fetchViconPositionEstimate\n");
  }

  void fetchHighresImu(const std::vector<HighresImu> & msg) {
    // Your implementation goes here
    printf("fetchHighresImu\n");
  }

  void fetchOmnidirectionalFlow(const std::vector<OmnidirectionalFlow> & msg) {
    // Your implementation goes here
    printf("fetchOmnidirectionalFlow\n");
  }

  void fetchFileTransferStart(const std::vector<FileTransferStart> & msg) {
    // Your implementation goes here
    printf("fetchFileTransferStart\n");
  }

  void fetchFileTransferDirList(const std::vector<FileTransferDirList> & msg) {
    // Your implementation goes here
    printf("fetchFileTransferDirList\n");
  }

  void fetchFileTransferRes(const std::vector<FileTransferRes> & msg) {
    // Your implementation goes here
    printf("fetchFileTransferRes\n");
  }

  void fetchBatteryStatus(const std::vector<BatteryStatus> & msg) {
    // Your implementation goes here
    printf("fetchBatteryStatus\n");
  }

  void fetchSetpoint8dof(const std::vector<Setpoint8dof> & msg) {
    // Your implementation goes here
    printf("fetchSetpoint8dof\n");
  }

  void fetchSetpoint6dof(const std::vector<Setpoint6dof> & msg) {
    // Your implementation goes here
    printf("fetchSetpoint6dof\n");
  }

  void fetchMemoryVect(const std::vector<MemoryVect> & msg) {
    // Your implementation goes here
    printf("fetchMemoryVect\n");
  }

  void fetchDebugVect(const std::vector<DebugVect> & msg) {
    // Your implementation goes here
    printf("fetchDebugVect\n");
  }

  void fetchNamedValueFloat(const std::vector<NamedValueFloat> & msg) {
    // Your implementation goes here
    printf("fetchNamedValueFloat\n");
  }

  void fetchNamedValueInt(const std::vector<NamedValueInt> & msg) {
    // Your implementation goes here
    printf("fetchNamedValueInt\n");
  }

  void fetchStatustext(const std::vector<Statustext> & msg) {
    // Your implementation goes here
    printf("fetchStatustext\n");
  }

  void fetchDebug(const std::vector<Debug> & msg) {
    // Your implementation goes here
    printf("fetchDebug\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<CommonMessageFetchServiceHandler> handler(new CommonMessageFetchServiceHandler());
  shared_ptr<TProcessor> processor(new CommonMessageFetchServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

